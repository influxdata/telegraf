{
  "version": "2.0",
  "service": "<p>AWS AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.</p>",
  "operations": {
    "CreateApiKey": "<p>Creates a unique key that you can distribute to clients who are executing your API.</p>",
    "CreateDataSource": "<p>Creates a <code>DataSource</code> object.</p>",
    "CreateGraphqlApi": "<p>Creates a <code>GraphqlApi</code> object.</p>",
    "CreateResolver": "<p>Creates a <code>Resolver</code> object.</p> <p>A resolver converts incoming requests into a format that a data source can understand and converts the data source's responses into GraphQL.</p>",
    "CreateType": "<p>Creates a <code>Type</code> object.</p>",
    "DeleteApiKey": "<p>Deletes an API key.</p>",
    "DeleteDataSource": "<p>Deletes a <code>DataSource</code> object.</p>",
    "DeleteGraphqlApi": "<p>Deletes a <code>GraphqlApi</code> object.</p>",
    "DeleteResolver": "<p>Deletes a <code>Resolver</code> object.</p>",
    "DeleteType": "<p>Deletes a <code>Type</code> object.</p>",
    "GetDataSource": "<p>Retrieves a <code>DataSource</code> object.</p>",
    "GetGraphqlApi": "<p>Retrieves a <code>GraphqlApi</code> object.</p>",
    "GetIntrospectionSchema": "<p>Retrieves the introspection schema for a GraphQL API.</p>",
    "GetResolver": "<p>Retrieves a <code>Resolver</code> object.</p>",
    "GetSchemaCreationStatus": "<p>Retrieves the current status of a schema creation operation.</p>",
    "GetType": "<p>Retrieves a <code>Type</code> object.</p>",
    "ListApiKeys": "<p>Lists the API keys for a given API.</p> <note> <p>API keys are deleted automatically sometime after they expire. However, they may still be included in the response until they have actually been deleted. You can safely call <code>DeleteApiKey</code> to manually delete a key before it's automatically deleted.</p> </note>",
    "ListDataSources": "<p>Lists the data sources for a given API.</p>",
    "ListGraphqlApis": "<p>Lists your GraphQL APIs.</p>",
    "ListResolvers": "<p>Lists the resolvers for a given API and type.</p>",
    "ListTypes": "<p>Lists the types for a given API.</p>",
    "StartSchemaCreation": "<p>Adds a new schema to your GraphQL API.</p> <p>This operation is asynchronous. Use to determine when it has completed.</p>",
    "UpdateApiKey": "<p>Updates an API key.</p>",
    "UpdateDataSource": "<p>Updates a <code>DataSource</code> object.</p>",
    "UpdateGraphqlApi": "<p>Updates a <code>GraphqlApi</code> object.</p>",
    "UpdateResolver": "<p>Updates a <code>Resolver</code> object.</p>",
    "UpdateType": "<p>Updates a <code>Type</code> object.</p>"
  },
  "shapes": {
    "ApiKey": {
      "base": "<p>Describes an API key.</p> <p>Customers invoke AWS AppSync GraphQL APIs with API keys as an identity mechanism. There are two key versions:</p> <p> <b>da1</b>: This version was introduced at launch in November 2017. These keys always expire after 7 days. Key expiration is managed by DynamoDB TTL. The keys will cease to be valid after Feb 21, 2018 and should not be used after that date.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>UpdateApiKey</code> is not available for this key version.</p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in DynamoDB as milliseconds. This results in a bug where keys are not automatically deleted because DynamoDB expects the TTL to be stored in seconds. As a one-time action, we will delete these keys from the table after Feb 21, 2018.</p> </li> </ul> <p> <b>da2</b>: This version was introduced in February 2018 when AppSync added support to extend key expiration.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time in seconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time in seconds and accepts a user-provided expiration time in seconds.</p> </li> <li> <p> <code>UpdateApiKey</code> returns the expiration time in seconds and accepts a user-provided expiration time in seconds. Key expiration can only be updated while the key has not expired.</p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in DynamoDB as seconds.</p> </li> </ul>",
      "refs": {
        "ApiKeys$member": null,
        "CreateApiKeyResponse$apiKey": "<p>The API key.</p>",
        "UpdateApiKeyResponse$apiKey": "<p>The API key.</p>"
      }
    },
    "ApiKeyLimitExceededException": {
      "base": "<p>The API key exceeded a limit. Try your request again.</p>",
      "refs": {
      }
    },
    "ApiKeyValidityOutOfBoundsException": {
      "base": "<p>The API key expiration must be set to a value between 1 and 365 days from creation (for <code>CreateApiKey</code>) or from update (for <code>UpdateApiKey</code>).</p>",
      "refs": {
      }
    },
    "ApiKeys": {
      "base": null,
      "refs": {
        "ListApiKeysResponse$apiKeys": "<p>The <code>ApiKey</code> objects.</p>"
      }
    },
    "ApiLimitExceededException": {
      "base": "<p>The GraphQL API exceeded a limit. Try your request again.</p>",
      "refs": {
      }
    },
    "AuthenticationType": {
      "base": null,
      "refs": {
        "CreateGraphqlApiRequest$authenticationType": "<p>The authentication type: API key, IAM, or Amazon Cognito User Pools.</p>",
        "GraphqlApi$authenticationType": "<p>The authentication type.</p>",
        "UpdateGraphqlApiRequest$authenticationType": "<p>The new authentication type for the <code>GraphqlApi</code> object.</p>"
      }
    },
    "BadRequestException": {
      "base": "<p>The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again. </p>",
      "refs": {
      }
    },
    "Blob": {
      "base": null,
      "refs": {
        "GetIntrospectionSchemaResponse$schema": "<p>The schema, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href=\"http://graphql.org/learn/schema/\">GraphQL SDL documentation</a>.</p>",
        "StartSchemaCreationRequest$definition": "<p>The schema definition, in GraphQL schema language format.</p>"
      }
    },
    "Boolean": {
      "base": null,
      "refs": {
        "DynamodbDataSourceConfig$useCallerCredentials": "<p>Set to TRUE to use Amazon Cognito credentials with this data source.</p>"
      }
    },
    "ConcurrentModificationException": {
      "base": "<p>Another modification is being made. That modification must complete before you can make your change. </p>",
      "refs": {
      }
    },
    "CreateApiKeyRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateApiKeyResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateDataSourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateDataSourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateGraphqlApiRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateGraphqlApiResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateResolverRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateResolverResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateTypeRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateTypeResponse": {
      "base": null,
      "refs": {
      }
    },
    "DataSource": {
      "base": "<p>Describes a data source.</p>",
      "refs": {
        "CreateDataSourceResponse$dataSource": "<p>The <code>DataSource</code> object.</p>",
        "DataSources$member": null,
        "GetDataSourceResponse$dataSource": "<p>The <code>DataSource</code> object.</p>",
        "UpdateDataSourceResponse$dataSource": "<p>The updated <code>DataSource</code> object.</p>"
      }
    },
    "DataSourceType": {
      "base": null,
      "refs": {
        "CreateDataSourceRequest$type": "<p>The type of the <code>DataSource</code>.</p>",
        "DataSource$type": "<p>The type of the data source.</p> <ul> <li> <p> <b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB table.</p> </li> <li> <p> <b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon Elasticsearch Service domain.</p> </li> <li> <p> <b>AWS_LAMBDA</b>: The data source is an AWS Lambda function.</p> </li> <li> <p> <b>NONE</b>: There is no data source. This type is used when when you wish to invoke a GraphQL operation without connecting to a data source, such as performing data transformation with resolvers or triggering a subscription to be invoked from a mutation.</p> </li> <li> <p> <b>HTTP</b>: The data source is an HTTP endpoint.</p> </li> </ul>",
        "UpdateDataSourceRequest$type": "<p>The new data source type.</p>"
      }
    },
    "DataSources": {
      "base": null,
      "refs": {
        "ListDataSourcesResponse$dataSources": "<p>The <code>DataSource</code> objects.</p>"
      }
    },
    "DefaultAction": {
      "base": null,
      "refs": {
        "UserPoolConfig$defaultAction": "<p>The action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration.</p>"
      }
    },
    "DeleteApiKeyRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteApiKeyResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteDataSourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteDataSourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteGraphqlApiRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteGraphqlApiResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteResolverRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteResolverResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteTypeRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteTypeResponse": {
      "base": null,
      "refs": {
      }
    },
    "DynamodbDataSourceConfig": {
      "base": "<p>Describes a DynamoDB data source configuration.</p>",
      "refs": {
        "CreateDataSourceRequest$dynamodbConfig": "<p>DynamoDB settings.</p>",
        "DataSource$dynamodbConfig": "<p>DynamoDB settings.</p>",
        "UpdateDataSourceRequest$dynamodbConfig": "<p>The new DynamoDB configuration.</p>"
      }
    },
    "ElasticsearchDataSourceConfig": {
      "base": "<p>Describes an Elasticsearch data source configuration.</p>",
      "refs": {
        "CreateDataSourceRequest$elasticsearchConfig": "<p>Amazon Elasticsearch settings.</p>",
        "DataSource$elasticsearchConfig": "<p>Amazon Elasticsearch settings.</p>",
        "UpdateDataSourceRequest$elasticsearchConfig": "<p>The new Elasticsearch configuration.</p>"
      }
    },
    "ErrorMessage": {
      "base": null,
      "refs": {
        "BadRequestException$message": null,
        "ConcurrentModificationException$message": null,
        "GraphQLSchemaException$message": null
      }
    },
    "FieldLogLevel": {
      "base": null,
      "refs": {
        "LogConfig$fieldLogLevel": "<p>The field logging level. Values can be NONE, ERROR, ALL. </p> <ul> <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li> <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each field.</p> </li> </ul> </li> </ul>"
      }
    },
    "GetDataSourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetDataSourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetGraphqlApiRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetGraphqlApiResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetIntrospectionSchemaRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetIntrospectionSchemaResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetResolverRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetResolverResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetSchemaCreationStatusRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetSchemaCreationStatusResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetTypeRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetTypeResponse": {
      "base": null,
      "refs": {
      }
    },
    "GraphQLSchemaException": {
      "base": "<p>The GraphQL schema is not valid.</p>",
      "refs": {
      }
    },
    "GraphqlApi": {
      "base": "<p>Describes a GraphQL API.</p>",
      "refs": {
        "CreateGraphqlApiResponse$graphqlApi": "<p>The <code>GraphqlApi</code>.</p>",
        "GetGraphqlApiResponse$graphqlApi": "<p>The <code>GraphqlApi</code> object.</p>",
        "GraphqlApis$member": null,
        "UpdateGraphqlApiResponse$graphqlApi": "<p>The updated <code>GraphqlApi</code> object.</p>"
      }
    },
    "GraphqlApis": {
      "base": null,
      "refs": {
        "ListGraphqlApisResponse$graphqlApis": "<p>The <code>GraphqlApi</code> objects.</p>"
      }
    },
    "HttpDataSourceConfig": {
      "base": "<p>Describes a Http data source configuration.</p>",
      "refs": {
        "CreateDataSourceRequest$httpConfig": "<p>Http endpoint settings.</p>",
        "DataSource$httpConfig": "<p>Http endpoint settings.</p>",
        "UpdateDataSourceRequest$httpConfig": "<p>The new http endpoint configuration</p>"
      }
    },
    "InternalFailureException": {
      "base": "<p>An internal AWS AppSync error occurred. Try your request again.</p>",
      "refs": {
      }
    },
    "LambdaDataSourceConfig": {
      "base": "<p>Describes a Lambda data source configuration.</p>",
      "refs": {
        "CreateDataSourceRequest$lambdaConfig": "<p>AWS Lambda settings.</p>",
        "DataSource$lambdaConfig": "<p>Lambda settings.</p>",
        "UpdateDataSourceRequest$lambdaConfig": "<p>The new Lambda configuration.</p>"
      }
    },
    "LimitExceededException": {
      "base": "<p>The request exceeded a limit. Try your request again.</p>",
      "refs": {
      }
    },
    "ListApiKeysRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListApiKeysResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListDataSourcesRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListDataSourcesResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListGraphqlApisRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListGraphqlApisResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListResolversRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListResolversResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListTypesRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListTypesResponse": {
      "base": null,
      "refs": {
      }
    },
    "LogConfig": {
      "base": "<p>The CloudWatch Logs configuration.</p>",
      "refs": {
        "CreateGraphqlApiRequest$logConfig": "<p>The Amazon CloudWatch logs configuration.</p>",
        "GraphqlApi$logConfig": "<p>The Amazon CloudWatch Logs configuration.</p>",
        "UpdateGraphqlApiRequest$logConfig": "<p>The Amazon CloudWatch logs configuration for the <code>GraphqlApi</code> object.</p>"
      }
    },
    "Long": {
      "base": null,
      "refs": {
        "ApiKey$expires": "<p>The time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>",
        "CreateApiKeyRequest$expires": "<p>The time from creation time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour. The default value for this parameter is 7 days from creation time. For more information, see .</p>",
        "OpenIDConnectConfig$iatTTL": "<p>The number of milliseconds a token is valid after being issued to a user.</p>",
        "OpenIDConnectConfig$authTTL": "<p>The number of milliseconds a token is valid after being authenticated.</p>",
        "UpdateApiKeyRequest$expires": "<p>The time from update time after which the API key expires. The date is represented as seconds since the epoch. For more information, see .</p>"
      }
    },
    "MapOfStringToString": {
      "base": null,
      "refs": {
        "GraphqlApi$uris": "<p>The URIs.</p>"
      }
    },
    "MappingTemplate": {
      "base": null,
      "refs": {
        "CreateResolverRequest$requestMappingTemplate": "<p>The mapping template to be used for requests.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p>",
        "CreateResolverRequest$responseMappingTemplate": "<p>The mapping template to be used for responses from the data source.</p>",
        "Resolver$requestMappingTemplate": "<p>The request mapping template.</p>",
        "Resolver$responseMappingTemplate": "<p>The response mapping template.</p>",
        "UpdateResolverRequest$requestMappingTemplate": "<p>The new request mapping template.</p>",
        "UpdateResolverRequest$responseMappingTemplate": "<p>The new response mapping template.</p>"
      }
    },
    "MaxResults": {
      "base": null,
      "refs": {
        "ListApiKeysRequest$maxResults": "<p>The maximum number of results you want the request to return.</p>",
        "ListDataSourcesRequest$maxResults": "<p>The maximum number of results you want the request to return.</p>",
        "ListGraphqlApisRequest$maxResults": "<p>The maximum number of results you want the request to return.</p>",
        "ListResolversRequest$maxResults": "<p>The maximum number of results you want the request to return.</p>",
        "ListTypesRequest$maxResults": "<p>The maximum number of results you want the request to return.</p>"
      }
    },
    "NotFoundException": {
      "base": "<p>The resource specified in the request was not found. Check the resource and try again.</p>",
      "refs": {
      }
    },
    "OpenIDConnectConfig": {
      "base": "<p>Describes an Open Id Connect configuration.</p>",
      "refs": {
        "CreateGraphqlApiRequest$openIDConnectConfig": "<p>The Open Id Connect configuration configuration.</p>",
        "GraphqlApi$openIDConnectConfig": "<p>The Open Id Connect configuration.</p>",
        "UpdateGraphqlApiRequest$openIDConnectConfig": "<p>The Open Id Connect configuration configuration for the <code>GraphqlApi</code> object.</p>"
      }
    },
    "OutputType": {
      "base": null,
      "refs": {
        "GetIntrospectionSchemaRequest$format": "<p>The schema format: SDL or JSON.</p>"
      }
    },
    "PaginationToken": {
      "base": null,
      "refs": {
        "ListApiKeysRequest$nextToken": "<p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>",
        "ListApiKeysResponse$nextToken": "<p>An identifier to be passed in the next request to this operation to return the next set of items in the list.</p>",
        "ListDataSourcesRequest$nextToken": "<p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. </p>",
        "ListDataSourcesResponse$nextToken": "<p>An identifier to be passed in the next request to this operation to return the next set of items in the list.</p>",
        "ListGraphqlApisRequest$nextToken": "<p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. </p>",
        "ListGraphqlApisResponse$nextToken": "<p>An identifier to be passed in the next request to this operation to return the next set of items in the list.</p>",
        "ListResolversRequest$nextToken": "<p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. </p>",
        "ListResolversResponse$nextToken": "<p>An identifier to be passed in the next request to this operation to return the next set of items in the list.</p>",
        "ListTypesRequest$nextToken": "<p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. </p>",
        "ListTypesResponse$nextToken": "<p>An identifier to be passed in the next request to this operation to return the next set of items in the list.</p>"
      }
    },
    "Resolver": {
      "base": "<p>Describes a resolver.</p>",
      "refs": {
        "CreateResolverResponse$resolver": "<p>The <code>Resolver</code> object.</p>",
        "GetResolverResponse$resolver": "<p>The <code>Resolver</code> object.</p>",
        "Resolvers$member": null,
        "UpdateResolverResponse$resolver": "<p>The updated <code>Resolver</code> object.</p>"
      }
    },
    "Resolvers": {
      "base": null,
      "refs": {
        "ListResolversResponse$resolvers": "<p>The <code>Resolver</code> objects.</p>"
      }
    },
    "ResourceName": {
      "base": null,
      "refs": {
        "CreateDataSourceRequest$name": "<p>A user-supplied name for the <code>DataSource</code>.</p>",
        "CreateResolverRequest$typeName": "<p>The name of the <code>Type</code>.</p>",
        "CreateResolverRequest$fieldName": "<p>The name of the field to attach the resolver to.</p>",
        "CreateResolverRequest$dataSourceName": "<p>The name of the data source for which the resolver is being created.</p>",
        "DataSource$name": "<p>The name of the data source.</p>",
        "DeleteDataSourceRequest$name": "<p>The name of the data source.</p>",
        "DeleteResolverRequest$typeName": "<p>The name of the resolver type.</p>",
        "DeleteResolverRequest$fieldName": "<p>The resolver field name.</p>",
        "DeleteTypeRequest$typeName": "<p>The type name.</p>",
        "GetDataSourceRequest$name": "<p>The name of the data source.</p>",
        "GetResolverRequest$typeName": "<p>The resolver type name.</p>",
        "GetResolverRequest$fieldName": "<p>The resolver field name.</p>",
        "GetTypeRequest$typeName": "<p>The type name.</p>",
        "GraphqlApi$name": "<p>The API name.</p>",
        "Resolver$typeName": "<p>The resolver type name.</p>",
        "Resolver$fieldName": "<p>The resolver field name.</p>",
        "Resolver$dataSourceName": "<p>The resolver data source name.</p>",
        "Type$name": "<p>The type name.</p>",
        "UpdateDataSourceRequest$name": "<p>The new name for the data source.</p>",
        "UpdateResolverRequest$typeName": "<p>The new type name.</p>",
        "UpdateResolverRequest$fieldName": "<p>The new field name.</p>",
        "UpdateResolverRequest$dataSourceName": "<p>The new data source name.</p>",
        "UpdateTypeRequest$typeName": "<p>The new type name.</p>"
      }
    },
    "SchemaStatus": {
      "base": null,
      "refs": {
        "GetSchemaCreationStatusResponse$status": "<p>The current state of the schema (PROCESSING, ACTIVE, or DELETING). Once the schema is in the ACTIVE state, you can add data.</p>",
        "StartSchemaCreationResponse$status": "<p>The current state of the schema (PROCESSING, ACTIVE, or DELETING). Once the schema is in the ACTIVE state, you can add data.</p>"
      }
    },
    "StartSchemaCreationRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartSchemaCreationResponse": {
      "base": null,
      "refs": {
      }
    },
    "String": {
      "base": null,
      "refs": {
        "ApiKey$id": "<p>The API key ID.</p>",
        "ApiKey$description": "<p>A description of the purpose of the API key.</p>",
        "ApiKeyLimitExceededException$message": null,
        "ApiKeyValidityOutOfBoundsException$message": null,
        "ApiLimitExceededException$message": null,
        "CreateApiKeyRequest$apiId": "<p>The ID for your GraphQL API.</p>",
        "CreateApiKeyRequest$description": "<p>A description of the purpose of the API key.</p>",
        "CreateDataSourceRequest$apiId": "<p>The API ID for the GraphQL API for the <code>DataSource</code>.</p>",
        "CreateDataSourceRequest$description": "<p>A description of the <code>DataSource</code>.</p>",
        "CreateDataSourceRequest$serviceRoleArn": "<p>The IAM service role ARN for the data source. The system assumes this role when accessing the data source.</p>",
        "CreateGraphqlApiRequest$name": "<p>A user-supplied name for the <code>GraphqlApi</code>.</p>",
        "CreateResolverRequest$apiId": "<p>The ID for the GraphQL API for which the resolver is being created.</p>",
        "CreateTypeRequest$apiId": "<p>The API ID.</p>",
        "CreateTypeRequest$definition": "<p>The type definition, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href=\"http://graphql.org/learn/schema/\">GraphQL SDL documentation</a>.</p>",
        "DataSource$dataSourceArn": "<p>The data source ARN.</p>",
        "DataSource$description": "<p>The description of the data source.</p>",
        "DataSource$serviceRoleArn": "<p>The IAM service role ARN for the data source. The system assumes this role when accessing the data source.</p>",
        "DeleteApiKeyRequest$apiId": "<p>The API ID.</p>",
        "DeleteApiKeyRequest$id": "<p>The ID for the API key.</p>",
        "DeleteDataSourceRequest$apiId": "<p>The API ID.</p>",
        "DeleteGraphqlApiRequest$apiId": "<p>The API ID.</p>",
        "DeleteResolverRequest$apiId": "<p>The API ID.</p>",
        "DeleteTypeRequest$apiId": "<p>The API ID.</p>",
        "DynamodbDataSourceConfig$tableName": "<p>The table name.</p>",
        "DynamodbDataSourceConfig$awsRegion": "<p>The AWS region.</p>",
        "ElasticsearchDataSourceConfig$endpoint": "<p>The endpoint.</p>",
        "ElasticsearchDataSourceConfig$awsRegion": "<p>The AWS region.</p>",
        "GetDataSourceRequest$apiId": "<p>The API ID.</p>",
        "GetGraphqlApiRequest$apiId": "<p>The API ID for the GraphQL API.</p>",
        "GetIntrospectionSchemaRequest$apiId": "<p>The API ID.</p>",
        "GetResolverRequest$apiId": "<p>The API ID.</p>",
        "GetSchemaCreationStatusRequest$apiId": "<p>The API ID.</p>",
        "GetSchemaCreationStatusResponse$details": "<p>Detailed information about the status of the schema creation operation.</p>",
        "GetTypeRequest$apiId": "<p>The API ID.</p>",
        "GraphqlApi$apiId": "<p>The API ID.</p>",
        "GraphqlApi$arn": "<p>The ARN.</p>",
        "HttpDataSourceConfig$endpoint": "<p>The Http url endpoint. You can either specify the domain name or ip and port combination and the url scheme must be http(s). If the port is not specified, AWS AppSync will use the default port 80 for http endpoint and port 443 for https endpoints.</p>",
        "InternalFailureException$message": null,
        "LambdaDataSourceConfig$lambdaFunctionArn": "<p>The ARN for the Lambda function.</p>",
        "LimitExceededException$message": null,
        "ListApiKeysRequest$apiId": "<p>The API ID.</p>",
        "ListDataSourcesRequest$apiId": "<p>The API ID.</p>",
        "ListResolversRequest$apiId": "<p>The API ID.</p>",
        "ListResolversRequest$typeName": "<p>The type name.</p>",
        "ListTypesRequest$apiId": "<p>The API ID.</p>",
        "LogConfig$cloudWatchLogsRoleArn": "<p>The service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account. </p>",
        "MapOfStringToString$key": null,
        "MapOfStringToString$value": null,
        "NotFoundException$message": null,
        "OpenIDConnectConfig$issuer": "<p>The issuer for the open id connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.</p>",
        "OpenIDConnectConfig$clientId": "<p>The client identifier of the Relying party at the OpenID Provider. This identifier is typically obtained when the Relying party is registered with the OpenID Provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time</p>",
        "Resolver$resolverArn": "<p>The resolver ARN.</p>",
        "StartSchemaCreationRequest$apiId": "<p>The API ID.</p>",
        "Type$description": "<p>The type description.</p>",
        "Type$arn": "<p>The type ARN.</p>",
        "Type$definition": "<p>The type definition.</p>",
        "UnauthorizedException$message": null,
        "UpdateApiKeyRequest$apiId": "<p>The ID for the GraphQL API</p>",
        "UpdateApiKeyRequest$id": "<p>The API key ID.</p>",
        "UpdateApiKeyRequest$description": "<p>A description of the purpose of the API key.</p>",
        "UpdateDataSourceRequest$apiId": "<p>The API ID.</p>",
        "UpdateDataSourceRequest$description": "<p>The new description for the data source.</p>",
        "UpdateDataSourceRequest$serviceRoleArn": "<p>The new service role ARN for the data source.</p>",
        "UpdateGraphqlApiRequest$apiId": "<p>The API ID.</p>",
        "UpdateGraphqlApiRequest$name": "<p>The new name for the <code>GraphqlApi</code> object.</p>",
        "UpdateResolverRequest$apiId": "<p>The API ID.</p>",
        "UpdateTypeRequest$apiId": "<p>The API ID.</p>",
        "UpdateTypeRequest$definition": "<p>The new definition.</p>",
        "UserPoolConfig$userPoolId": "<p>The user pool ID.</p>",
        "UserPoolConfig$awsRegion": "<p>The AWS region in which the user pool was created.</p>",
        "UserPoolConfig$appIdClientRegex": "<p>A regular expression for validating the incoming Amazon Cognito User Pool app client ID.</p>"
      }
    },
    "Type": {
      "base": "<p>Describes a type.</p>",
      "refs": {
        "CreateTypeResponse$type": "<p>The <code>Type</code> object.</p>",
        "GetTypeResponse$type": "<p>The <code>Type</code> object.</p>",
        "TypeList$member": null,
        "UpdateTypeResponse$type": "<p>The updated <code>Type</code> object.</p>"
      }
    },
    "TypeDefinitionFormat": {
      "base": null,
      "refs": {
        "CreateTypeRequest$format": "<p>The type format: SDL or JSON.</p>",
        "GetTypeRequest$format": "<p>The type format: SDL or JSON.</p>",
        "ListTypesRequest$format": "<p>The type format: SDL or JSON.</p>",
        "Type$format": "<p>The type format: SDL or JSON.</p>",
        "UpdateTypeRequest$format": "<p>The new type format: SDL or JSON.</p>"
      }
    },
    "TypeList": {
      "base": null,
      "refs": {
        "ListTypesResponse$types": "<p>The <code>Type</code> objects.</p>"
      }
    },
    "UnauthorizedException": {
      "base": "<p>You are not authorized to perform this operation.</p>",
      "refs": {
      }
    },
    "UpdateApiKeyRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateApiKeyResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateDataSourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateDataSourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateGraphqlApiRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateGraphqlApiResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateResolverRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateResolverResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateTypeRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateTypeResponse": {
      "base": null,
      "refs": {
      }
    },
    "UserPoolConfig": {
      "base": "<p>Describes an Amazon Cognito User Pool configuration.</p>",
      "refs": {
        "CreateGraphqlApiRequest$userPoolConfig": "<p>The Amazon Cognito User Pool configuration.</p>",
        "GraphqlApi$userPoolConfig": "<p>The Amazon Cognito User Pool configuration.</p>",
        "UpdateGraphqlApiRequest$userPoolConfig": "<p>The new Amazon Cognito User Pool configuration for the <code>GraphqlApi</code> object.</p>"
      }
    }
  }
}
