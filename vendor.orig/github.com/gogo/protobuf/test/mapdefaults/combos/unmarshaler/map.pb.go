// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: combos/unmarshaler/map.proto

package mapdefaults

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MapTest struct {
	StrStr               map[string]string `protobuf:"bytes,1,rep,name=str_str,json=strStr" json:"str_str,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MapTest) Reset()      { *m = MapTest{} }
func (*MapTest) ProtoMessage() {}
func (*MapTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_map_c5bc2daa9ca30987, []int{0}
}
func (m *MapTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapTest.Marshal(b, m, deterministic)
}
func (dst *MapTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapTest.Merge(dst, src)
}
func (m *MapTest) XXX_Size() int {
	return xxx_messageInfo_MapTest.Size(m)
}
func (m *MapTest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapTest.DiscardUnknown(m)
}

var xxx_messageInfo_MapTest proto.InternalMessageInfo

type FakeMap struct {
	Entries              []*FakeMapEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FakeMap) Reset()      { *m = FakeMap{} }
func (*FakeMap) ProtoMessage() {}
func (*FakeMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_map_c5bc2daa9ca30987, []int{1}
}
func (m *FakeMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FakeMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FakeMap.Marshal(b, m, deterministic)
}
func (dst *FakeMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FakeMap.Merge(dst, src)
}
func (m *FakeMap) XXX_Size() int {
	return xxx_messageInfo_FakeMap.Size(m)
}
func (m *FakeMap) XXX_DiscardUnknown() {
	xxx_messageInfo_FakeMap.DiscardUnknown(m)
}

var xxx_messageInfo_FakeMap proto.InternalMessageInfo

type FakeMapEntry struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Other                string   `protobuf:"bytes,3,opt,name=other,proto3" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FakeMapEntry) Reset()      { *m = FakeMapEntry{} }
func (*FakeMapEntry) ProtoMessage() {}
func (*FakeMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_map_c5bc2daa9ca30987, []int{2}
}
func (m *FakeMapEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FakeMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FakeMapEntry.Marshal(b, m, deterministic)
}
func (dst *FakeMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FakeMapEntry.Merge(dst, src)
}
func (m *FakeMapEntry) XXX_Size() int {
	return xxx_messageInfo_FakeMapEntry.Size(m)
}
func (m *FakeMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FakeMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FakeMapEntry proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MapTest)(nil), "mapdefaults.MapTest")
	proto.RegisterMapType((map[string]string)(nil), "mapdefaults.MapTest.StrStrEntry")
	proto.RegisterType((*FakeMap)(nil), "mapdefaults.FakeMap")
	proto.RegisterType((*FakeMapEntry)(nil), "mapdefaults.FakeMapEntry")
}
func (this *MapTest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return MapDescription()
}
func (this *FakeMap) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return MapDescription()
}
func (this *FakeMapEntry) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return MapDescription()
}
func MapDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3895 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5d, 0x6c, 0x23, 0xd7,
		0x75, 0xd6, 0xf0, 0x4f, 0xe4, 0x21, 0x45, 0x8d, 0x46, 0xf2, 0x2e, 0x57, 0xb6, 0xb9, 0x5a, 0xda,
		0x8e, 0x65, 0xbb, 0xa1, 0x82, 0x5d, 0xef, 0x7a, 0x97, 0xdb, 0xd8, 0xa5, 0x28, 0xae, 0x42, 0x57,
		0x12, 0x99, 0xa1, 0x14, 0xff, 0x04, 0xc5, 0x60, 0x34, 0xbc, 0xa4, 0x66, 0x77, 0x38, 0x33, 0x99,
		0x19, 0xee, 0x5a, 0x8b, 0x02, 0xdd, 0xc2, 0xfd, 0x41, 0x50, 0xf4, 0xbf, 0x40, 0x13, 0xd7, 0x71,
		0x9b, 0x02, 0xa9, 0xd3, 0xf4, 0x2f, 0x69, 0xda, 0xfc, 0xf4, 0xa9, 0x2f, 0x69, 0xfd, 0x54, 0x24,
		0x6f, 0x7d, 0xe8, 0x83, 0x57, 0x31, 0xd0, 0xb4, 0x75, 0x1b, 0xb7, 0xf5, 0x83, 0x01, 0xbf, 0x04,
		0xf7, 0x6f, 0x38, 0x43, 0x52, 0x3b, 0x54, 0x00, 0xdb, 0x4f, 0xd2, 0x9c, 0x7b, 0xbe, 0x6f, 0xce,
		0x3d, 0xf7, 0xdc, 0x73, 0xce, 0xbd, 0x43, 0xf8, 0xf1, 0x15, 0x58, 0xe9, 0x59, 0x56, 0xcf, 0x40,
		0x6b, 0xb6, 0x63, 0x79, 0xd6, 0xfe, 0xa0, 0xbb, 0xd6, 0x41, 0xae, 0xe6, 0xe8, 0xb6, 0x67, 0x39,
		0x65, 0x22, 0x93, 0xe6, 0xa9, 0x46, 0x99, 0x6b, 0x94, 0xb6, 0x61, 0xe1, 0x9a, 0x6e, 0xa0, 0x0d,
		0x5f, 0xb1, 0x8d, 0x3c, 0xe9, 0x32, 0x24, 0xba, 0xba, 0x81, 0x0a, 0xc2, 0x4a, 0x7c, 0x35, 0x7b,
		0xfe, 0xe1, 0xf2, 0x08, 0xa8, 0x1c, 0x46, 0xb4, 0xb0, 0x58, 0x26, 0x88, 0xd2, 0x5b, 0x09, 0x58,
		0x9c, 0x30, 0x2a, 0x49, 0x90, 0x30, 0xd5, 0x3e, 0x66, 0x14, 0x56, 0x33, 0x32, 0xf9, 0x5f, 0x2a,
		0xc0, 0xac, 0xad, 0x6a, 0x37, 0xd4, 0x1e, 0x2a, 0xc4, 0x88, 0x98, 0x3f, 0x4a, 0x45, 0x80, 0x0e,
		0xb2, 0x91, 0xd9, 0x41, 0xa6, 0x76, 0x58, 0x88, 0xaf, 0xc4, 0x57, 0x33, 0x72, 0x40, 0x22, 0x3d,
		0x01, 0x0b, 0xf6, 0x60, 0xdf, 0xd0, 0x35, 0x25, 0xa0, 0x06, 0x2b, 0xf1, 0xd5, 0xa4, 0x2c, 0xd2,
		0x81, 0x8d, 0xa1, 0xf2, 0xa3, 0x30, 0x7f, 0x0b, 0xa9, 0x37, 0x82, 0xaa, 0x59, 0xa2, 0x9a, 0xc7,
		0xe2, 0x80, 0x62, 0x0d, 0x72, 0x7d, 0xe4, 0xba, 0x6a, 0x0f, 0x29, 0xde, 0xa1, 0x8d, 0x0a, 0x09,
		0x32, 0xfb, 0x95, 0xb1, 0xd9, 0x8f, 0xce, 0x3c, 0xcb, 0x50, 0xbb, 0x87, 0x36, 0x92, 0xaa, 0x90,
		0x41, 0xe6, 0xa0, 0x4f, 0x19, 0x92, 0xc7, 0xf8, 0xaf, 0x6e, 0x0e, 0xfa, 0xa3, 0x2c, 0x69, 0x0c,
		0x63, 0x14, 0xb3, 0x2e, 0x72, 0x6e, 0xea, 0x1a, 0x2a, 0xa4, 0x08, 0xc1, 0xa3, 0x63, 0x04, 0x6d,
		0x3a, 0x3e, 0xca, 0xc1, 0x71, 0x52, 0x0d, 0x32, 0xe8, 0x25, 0x0f, 0x99, 0xae, 0x6e, 0x99, 0x85,
		0x59, 0x42, 0xf2, 0xc8, 0x84, 0x55, 0x44, 0x46, 0x67, 0x94, 0x62, 0x88, 0x93, 0x2e, 0xc1, 0xac,
		0x65, 0x7b, 0xba, 0x65, 0xba, 0x85, 0xf4, 0x8a, 0xb0, 0x9a, 0x3d, 0xff, 0xc0, 0xc4, 0x40, 0x68,
		0x52, 0x1d, 0x99, 0x2b, 0x4b, 0x0d, 0x10, 0x5d, 0x6b, 0xe0, 0x68, 0x48, 0xd1, 0xac, 0x0e, 0x52,
		0x74, 0xb3, 0x6b, 0x15, 0x32, 0x84, 0xe0, 0xec, 0xf8, 0x44, 0x88, 0x62, 0xcd, 0xea, 0xa0, 0x86,
		0xd9, 0xb5, 0xe4, 0xbc, 0x1b, 0x7a, 0x96, 0x4e, 0x41, 0xca, 0x3d, 0x34, 0x3d, 0xf5, 0xa5, 0x42,
		0x8e, 0x44, 0x08, 0x7b, 0x2a, 0x7d, 0x37, 0x05, 0xf3, 0xd3, 0x84, 0xd8, 0x55, 0x48, 0x76, 0xf1,
		0x2c, 0x0b, 0xb1, 0x93, 0xf8, 0x80, 0x62, 0xc2, 0x4e, 0x4c, 0xfd, 0x94, 0x4e, 0xac, 0x42, 0xd6,
		0x44, 0xae, 0x87, 0x3a, 0x34, 0x22, 0xe2, 0x53, 0xc6, 0x14, 0x50, 0xd0, 0x78, 0x48, 0x25, 0x7e,
		0xaa, 0x90, 0x7a, 0x1e, 0xe6, 0x7d, 0x93, 0x14, 0x47, 0x35, 0x7b, 0x3c, 0x36, 0xd7, 0xa2, 0x2c,
		0x29, 0xd7, 0x39, 0x4e, 0xc6, 0x30, 0x39, 0x8f, 0x42, 0xcf, 0xd2, 0x06, 0x80, 0x65, 0x22, 0xab,
		0xab, 0x74, 0x90, 0x66, 0x14, 0xd2, 0xc7, 0x78, 0xa9, 0x89, 0x55, 0xc6, 0xbc, 0x64, 0x51, 0xa9,
		0x66, 0x48, 0x57, 0x86, 0xa1, 0x36, 0x7b, 0x4c, 0xa4, 0x6c, 0xd3, 0x4d, 0x36, 0x16, 0x6d, 0x7b,
		0x90, 0x77, 0x10, 0x8e, 0x7b, 0xd4, 0x61, 0x33, 0xcb, 0x10, 0x23, 0xca, 0x91, 0x33, 0x93, 0x19,
		0x8c, 0x4e, 0x6c, 0xce, 0x09, 0x3e, 0x4a, 0x0f, 0x81, 0x2f, 0x50, 0x48, 0x58, 0x01, 0xc9, 0x42,
		0x39, 0x2e, 0xdc, 0x51, 0xfb, 0x68, 0xf9, 0x36, 0xe4, 0xc3, 0xee, 0x91, 0x96, 0x20, 0xe9, 0x7a,
		0xaa, 0xe3, 0x91, 0x28, 0x4c, 0xca, 0xf4, 0x41, 0x12, 0x21, 0x8e, 0xcc, 0x0e, 0xc9, 0x72, 0x49,
		0x19, 0xff, 0x2b, 0xfd, 0xdc, 0x70, 0xc2, 0x71, 0x32, 0xe1, 0x8f, 0x8d, 0xaf, 0x68, 0x88, 0x79,
		0x74, 0xde, 0xcb, 0x4f, 0xc1, 0x5c, 0x68, 0x02, 0xd3, 0xbe, 0xba, 0xf4, 0x8b, 0x70, 0xdf, 0x44,
		0x6a, 0xe9, 0x79, 0x58, 0x1a, 0x98, 0xba, 0xe9, 0x21, 0xc7, 0x76, 0x10, 0x8e, 0x58, 0xfa, 0xaa,
		0xc2, 0xbf, 0xcf, 0x1e, 0x13, 0x73, 0x7b, 0x41, 0x6d, 0xca, 0x22, 0x2f, 0x0e, 0xc6, 0x85, 0x8f,
		0x67, 0xd2, 0x3f, 0x9a, 0x15, 0xef, 0xdc, 0xb9, 0x73, 0x27, 0x56, 0xfa, 0x42, 0x0a, 0x96, 0x26,
		0xed, 0x99, 0x89, 0xdb, 0xf7, 0x14, 0xa4, 0xcc, 0x41, 0x7f, 0x1f, 0x39, 0xc4, 0x49, 0x49, 0x99,
		0x3d, 0x49, 0x55, 0x48, 0x1a, 0xea, 0x3e, 0x32, 0x0a, 0x89, 0x15, 0x61, 0x35, 0x7f, 0xfe, 0x89,
		0xa9, 0x76, 0x65, 0x79, 0x0b, 0x43, 0x64, 0x8a, 0x94, 0x9e, 0x86, 0x04, 0x4b, 0xd1, 0x98, 0xe1,
		0xf1, 0xe9, 0x18, 0xf0, 0x5e, 0x92, 0x09, 0x4e, 0xba, 0x1f, 0x32, 0xf8, 0x2f, 0x8d, 0x8d, 0x14,
		0xb1, 0x39, 0x8d, 0x05, 0x38, 0x2e, 0xa4, 0x65, 0x48, 0x93, 0x6d, 0xd2, 0x41, 0xbc, 0xb4, 0xf9,
		0xcf, 0x38, 0xb0, 0x3a, 0xa8, 0xab, 0x0e, 0x0c, 0x4f, 0xb9, 0xa9, 0x1a, 0x03, 0x44, 0x02, 0x3e,
		0x23, 0xe7, 0x98, 0xf0, 0x33, 0x58, 0x26, 0x9d, 0x85, 0x2c, 0xdd, 0x55, 0xba, 0xd9, 0x41, 0x2f,
		0x91, 0xec, 0x99, 0x94, 0xe9, 0x46, 0x6b, 0x60, 0x09, 0x7e, 0xfd, 0x75, 0xd7, 0x32, 0x79, 0x68,
		0x92, 0x57, 0x60, 0x01, 0x79, 0xfd, 0x53, 0xa3, 0x89, 0xfb, 0xc1, 0xc9, 0xd3, 0x1b, 0x8d, 0xa9,
		0xd2, 0xb7, 0x62, 0x90, 0x20, 0xf9, 0x62, 0x1e, 0xb2, 0xbb, 0x2f, 0xb4, 0xea, 0xca, 0x46, 0x73,
		0x6f, 0x7d, 0xab, 0x2e, 0x0a, 0x52, 0x1e, 0x80, 0x08, 0xae, 0x6d, 0x35, 0xab, 0xbb, 0x62, 0xcc,
		0x7f, 0x6e, 0xec, 0xec, 0x5e, 0x7a, 0x52, 0x8c, 0xfb, 0x80, 0x3d, 0x2a, 0x48, 0x04, 0x15, 0x2e,
		0x9c, 0x17, 0x93, 0x92, 0x08, 0x39, 0x4a, 0xd0, 0x78, 0xbe, 0xbe, 0x71, 0xe9, 0x49, 0x31, 0x15,
		0x96, 0x5c, 0x38, 0x2f, 0xce, 0x4a, 0x73, 0x90, 0x21, 0x92, 0xf5, 0x66, 0x73, 0x4b, 0x4c, 0xfb,
		0x9c, 0xed, 0x5d, 0xb9, 0xb1, 0xb3, 0x29, 0x66, 0x7c, 0xce, 0x4d, 0xb9, 0xb9, 0xd7, 0x12, 0xc1,
		0x67, 0xd8, 0xae, 0xb7, 0xdb, 0xd5, 0xcd, 0xba, 0x98, 0xf5, 0x35, 0xd6, 0x5f, 0xd8, 0xad, 0xb7,
		0xc5, 0x5c, 0xc8, 0xac, 0x0b, 0xe7, 0xc5, 0x39, 0xff, 0x15, 0xf5, 0x9d, 0xbd, 0x6d, 0x31, 0x2f,
		0x2d, 0xc0, 0x1c, 0x7d, 0x05, 0x37, 0x62, 0x7e, 0x44, 0x74, 0xe9, 0x49, 0x51, 0x1c, 0x1a, 0x42,
		0x59, 0x16, 0x42, 0x82, 0x4b, 0x4f, 0x8a, 0x52, 0xa9, 0x06, 0x49, 0x12, 0x5d, 0x92, 0x04, 0xf9,
		0xad, 0xea, 0x7a, 0x7d, 0x4b, 0x69, 0xb6, 0x76, 0x1b, 0xcd, 0x9d, 0xea, 0x96, 0x28, 0x0c, 0x65,
		0x72, 0xfd, 0xd3, 0x7b, 0x0d, 0xb9, 0xbe, 0x21, 0xc6, 0x82, 0xb2, 0x56, 0xbd, 0xba, 0x5b, 0xdf,
		0x10, 0xe3, 0x25, 0x0d, 0x96, 0x26, 0xe5, 0xc9, 0x89, 0x3b, 0x23, 0xb0, 0xc4, 0xb1, 0x63, 0x96,
		0x98, 0x70, 0x8d, 0x2d, 0xf1, 0x0f, 0x63, 0xb0, 0x38, 0xa1, 0x56, 0x4c, 0x7c, 0xc9, 0x33, 0x90,
		0xa4, 0x21, 0x4a, 0xab, 0xe7, 0x63, 0x13, 0x8b, 0x0e, 0x09, 0xd8, 0xb1, 0x0a, 0x4a, 0x70, 0xc1,
		0x0e, 0x22, 0x7e, 0x4c, 0x07, 0x81, 0x29, 0xc6, 0x72, 0xfa, 0x2f, 0x8c, 0xe5, 0x74, 0x5a, 0xf6,
		0x2e, 0x4d, 0x53, 0xf6, 0x88, 0xec, 0x64, 0xb9, 0x3d, 0x39, 0x21, 0xb7, 0x5f, 0x85, 0x85, 0x31,
		0xa2, 0xa9, 0x73, 0xec, 0xcb, 0x02, 0x14, 0x8e, 0x73, 0x4e, 0x44, 0xa6, 0x8b, 0x85, 0x32, 0xdd,
		0xd5, 0x51, 0x0f, 0x9e, 0x3b, 0x7e, 0x11, 0xc6, 0xd6, 0xfa, 0x75, 0x01, 0x4e, 0x4d, 0xee, 0x14,
		0x27, 0xda, 0xf0, 0x34, 0xa4, 0xfa, 0xc8, 0x3b, 0xb0, 0x78, 0xb7, 0xf4, 0xb1, 0x09, 0x35, 0x18,
		0x0f, 0x8f, 0x2e, 0x36, 0x43, 0x05, 0x8b, 0x78, 0xfc, 0xb8, 0x76, 0x8f, 0x5a, 0x33, 0x66, 0xe9,
		0xe7, 0x63, 0x70, 0xdf, 0x44, 0xf2, 0x89, 0x86, 0x3e, 0x08, 0xa0, 0x9b, 0xf6, 0xc0, 0xa3, 0x1d,
		0x11, 0x4d, 0xb0, 0x19, 0x22, 0x21, 0xc9, 0x0b, 0x27, 0xcf, 0x81, 0xe7, 0x8f, 0xc7, 0xc9, 0x38,
		0x50, 0x11, 0x51, 0xb8, 0x3c, 0x34, 0x34, 0x41, 0x0c, 0x2d, 0x1e, 0x33, 0xd3, 0xb1, 0xc0, 0xfc,
		0x04, 0x88, 0x9a, 0xa1, 0x23, 0xd3, 0x53, 0x5c, 0xcf, 0x41, 0x6a, 0x5f, 0x37, 0x7b, 0xa4, 0x82,
		0xa4, 0x2b, 0xc9, 0xae, 0x6a, 0xb8, 0x48, 0x9e, 0xa7, 0xc3, 0x6d, 0x3e, 0x8a, 0x11, 0x24, 0x80,
		0x9c, 0x00, 0x22, 0x15, 0x42, 0xd0, 0x61, 0x1f, 0x51, 0xfa, 0x66, 0x1a, 0xb2, 0x81, 0xbe, 0x5a,
		0x3a, 0x07, 0xb9, 0xeb, 0xea, 0x4d, 0x55, 0xe1, 0x67, 0x25, 0xea, 0x89, 0x2c, 0x96, 0xb5, 0xd8,
		0x79, 0xe9, 0x13, 0xb0, 0x44, 0x54, 0xac, 0x81, 0x87, 0x1c, 0x45, 0x33, 0x54, 0xd7, 0x25, 0x4e,
		0x4b, 0x13, 0x55, 0x09, 0x8f, 0x35, 0xf1, 0x50, 0x8d, 0x8f, 0x48, 0x17, 0x61, 0x91, 0x20, 0xfa,
		0x03, 0xc3, 0xd3, 0x6d, 0x03, 0x29, 0xf8, 0xf4, 0xe6, 0x92, 0x4a, 0xe2, 0x5b, 0xb6, 0x80, 0x35,
		0xb6, 0x99, 0x02, 0xb6, 0xc8, 0x95, 0x36, 0xe0, 0x41, 0x02, 0xeb, 0x21, 0x13, 0x39, 0xaa, 0x87,
		0x14, 0xf4, 0xb9, 0x81, 0x6a, 0xb8, 0x8a, 0x6a, 0x76, 0x94, 0x03, 0xd5, 0x3d, 0x28, 0x2c, 0x61,
		0x82, 0xf5, 0x58, 0x41, 0x90, 0xcf, 0x60, 0xc5, 0x4d, 0xa6, 0x57, 0x27, 0x6a, 0x55, 0xb3, 0xf3,
		0x29, 0xd5, 0x3d, 0x90, 0x2a, 0x70, 0x8a, 0xb0, 0xb8, 0x9e, 0xa3, 0x9b, 0x3d, 0x45, 0x3b, 0x40,
		0xda, 0x0d, 0x65, 0xe0, 0x75, 0x2f, 0x17, 0xee, 0x0f, 0xbe, 0x9f, 0x58, 0xd8, 0x26, 0x3a, 0x35,
		0xac, 0xb2, 0xe7, 0x75, 0x2f, 0x4b, 0x6d, 0xc8, 0xe1, 0xc5, 0xe8, 0xeb, 0xb7, 0x91, 0xd2, 0xb5,
		0x1c, 0x52, 0x1a, 0xf3, 0x13, 0x52, 0x53, 0xc0, 0x83, 0xe5, 0x26, 0x03, 0x6c, 0x5b, 0x1d, 0x54,
		0x49, 0xb6, 0x5b, 0xf5, 0xfa, 0x86, 0x9c, 0xe5, 0x2c, 0xd7, 0x2c, 0x07, 0x07, 0x54, 0xcf, 0xf2,
		0x1d, 0x9c, 0xa5, 0x01, 0xd5, 0xb3, 0xb8, 0x7b, 0x2f, 0xc2, 0xa2, 0xa6, 0xd1, 0x39, 0xeb, 0x9a,
		0xc2, 0xce, 0x58, 0x6e, 0x41, 0x0c, 0x39, 0x4b, 0xd3, 0x36, 0xa9, 0x02, 0x8b, 0x71, 0x57, 0xba,
		0x02, 0xf7, 0x0d, 0x9d, 0x15, 0x04, 0x2e, 0x8c, 0xcd, 0x72, 0x14, 0x7a, 0x11, 0x16, 0xed, 0xc3,
		0x71, 0xa0, 0x14, 0x7a, 0xa3, 0x7d, 0x38, 0x0a, 0x7b, 0x0a, 0x96, 0xec, 0x03, 0x7b, 0x1c, 0xf7,
		0x78, 0x10, 0x27, 0xd9, 0x07, 0xf6, 0x28, 0xf0, 0x11, 0x72, 0xe0, 0x76, 0x90, 0xa6, 0x7a, 0xa8,
		0x53, 0x38, 0x1d, 0x54, 0x0f, 0x0c, 0x48, 0x6b, 0x20, 0x6a, 0x9a, 0x82, 0x4c, 0x75, 0xdf, 0x40,
		0x8a, 0xea, 0x20, 0x53, 0x75, 0x0b, 0x67, 0x83, 0xca, 0x79, 0x4d, 0xab, 0x93, 0xd1, 0x2a, 0x19,
		0x94, 0x1e, 0x87, 0x05, 0x6b, 0xff, 0xba, 0x46, 0x43, 0x52, 0xb1, 0x1d, 0xd4, 0xd5, 0x5f, 0x2a,
		0x3c, 0x4c, 0xfc, 0x3b, 0x8f, 0x07, 0x48, 0x40, 0xb6, 0x88, 0x58, 0x7a, 0x0c, 0x44, 0xcd, 0x3d,
		0x50, 0x1d, 0x9b, 0xe4, 0x64, 0xd7, 0x56, 0x35, 0x54, 0x78, 0x84, 0xaa, 0x52, 0xf9, 0x0e, 0x17,
		0xe3, 0x2d, 0xe1, 0xde, 0xd2, 0xbb, 0x1e, 0x67, 0x7c, 0x94, 0x6e, 0x09, 0x22, 0x63, 0x6c, 0xab,
		0x20, 0x62, 0x57, 0x84, 0x5e, 0xbc, 0x4a, 0xd4, 0xf2, 0xf6, 0x81, 0x1d, 0x7c, 0xef, 0x43, 0x30,
		0x87, 0x35, 0x87, 0x2f, 0x7d, 0x8c, 0x36, 0x64, 0xf6, 0x41, 0xe0, 0x8d, 0x1f, 0x58, 0x6f, 0x5c,
		0xaa, 0x40, 0x2e, 0x18, 0x9f, 0x52, 0x06, 0x68, 0x84, 0x8a, 0x02, 0x6e, 0x56, 0x6a, 0xcd, 0x0d,
		0xdc, 0x66, 0xbc, 0x58, 0x17, 0x63, 0xb8, 0xdd, 0xd9, 0x6a, 0xec, 0xd6, 0x15, 0x79, 0x6f, 0x67,
		0xb7, 0xb1, 0x5d, 0x17, 0xe3, 0xc1, 0xbe, 0xfa, 0x7b, 0x31, 0xc8, 0x87, 0x8f, 0x48, 0xd2, 0xcf,
		0xc2, 0x69, 0x7e, 0x9f, 0xe1, 0x22, 0x4f, 0xb9, 0xa5, 0x3b, 0x64, 0xcb, 0xf4, 0x55, 0x5a, 0xbe,
		0xfc, 0x45, 0x5b, 0x62, 0x5a, 0x6d, 0xe4, 0x3d, 0xa7, 0x3b, 0x78, 0x43, 0xf4, 0x55, 0x4f, 0xda,
		0x82, 0xb3, 0xa6, 0xa5, 0xb8, 0x9e, 0x6a, 0x76, 0x54, 0xa7, 0xa3, 0x0c, 0x6f, 0x92, 0x14, 0x55,
		0xd3, 0x90, 0xeb, 0x5a, 0xb4, 0x54, 0xf9, 0x2c, 0x0f, 0x98, 0x56, 0x9b, 0x29, 0x0f, 0x73, 0x78,
		0x95, 0xa9, 0x8e, 0x04, 0x58, 0xfc, 0xb8, 0x00, 0xbb, 0x1f, 0x32, 0x7d, 0xd5, 0x56, 0x90, 0xe9,
		0x39, 0x87, 0xa4, 0x31, 0x4e, 0xcb, 0xe9, 0xbe, 0x6a, 0xd7, 0xf1, 0xf3, 0x87, 0x73, 0x3e, 0xf9,
		0xb7, 0x38, 0xe4, 0x82, 0xcd, 0x31, 0x3e, 0x6b, 0x68, 0xa4, 0x8e, 0x08, 0x24, 0xd3, 0x3c, 0x74,
		0xcf, 0x56, 0xba, 0x5c, 0xc3, 0x05, 0xa6, 0x92, 0xa2, 0x2d, 0xab, 0x4c, 0x91, 0xb8, 0xb8, 0xe3,
		0xdc, 0x82, 0x68, 0x8b, 0x90, 0x96, 0xd9, 0x93, 0xb4, 0x09, 0xa9, 0xeb, 0x2e, 0xe1, 0x4e, 0x11,
		0xee, 0x87, 0xef, 0xcd, 0xfd, 0x6c, 0x9b, 0x90, 0x67, 0x9e, 0x6d, 0x2b, 0x3b, 0x4d, 0x79, 0xbb,
		0xba, 0x25, 0x33, 0xb8, 0x74, 0x06, 0x12, 0x86, 0x7a, 0xfb, 0x30, 0x5c, 0x8a, 0x88, 0x68, 0x5a,
		0xc7, 0x9f, 0x81, 0xc4, 0x2d, 0xa4, 0xde, 0x08, 0x17, 0x00, 0x22, 0xfa, 0x00, 0x43, 0x7f, 0x0d,
		0x92, 0xc4, 0x5f, 0x12, 0x00, 0xf3, 0x98, 0x38, 0x23, 0xa5, 0x21, 0x51, 0x6b, 0xca, 0x38, 0xfc,
		0x45, 0xc8, 0x51, 0xa9, 0xd2, 0x6a, 0xd4, 0x6b, 0x75, 0x31, 0x56, 0xba, 0x08, 0x29, 0xea, 0x04,
		0xbc, 0x35, 0x7c, 0x37, 0x88, 0x33, 0xec, 0x91, 0x71, 0x08, 0x7c, 0x74, 0x6f, 0x7b, 0xbd, 0x2e,
		0x8b, 0xb1, 0xe0, 0xf2, 0xba, 0x90, 0x0b, 0xf6, 0xc5, 0x1f, 0x4e, 0x4c, 0xfd, 0x83, 0x00, 0xd9,
		0x40, 0x9f, 0x8b, 0x1b, 0x14, 0xd5, 0x30, 0xac, 0x5b, 0x8a, 0x6a, 0xe8, 0xaa, 0xcb, 0x82, 0x02,
		0x88, 0xa8, 0x8a, 0x25, 0xd3, 0x2e, 0xda, 0x87, 0x62, 0xfc, 0x6b, 0x02, 0x88, 0xa3, 0x2d, 0xe6,
		0x88, 0x81, 0xc2, 0x47, 0x6a, 0xe0, 0xab, 0x02, 0xe4, 0xc3, 0x7d, 0xe5, 0x88, 0x79, 0xe7, 0x3e,
		0x52, 0xf3, 0xde, 0x8c, 0xc1, 0x5c, 0xa8, 0x9b, 0x9c, 0xd6, 0xba, 0xcf, 0xc1, 0x82, 0xde, 0x41,
		0x7d, 0xdb, 0xf2, 0x90, 0xa9, 0x1d, 0x2a, 0x06, 0xba, 0x89, 0x8c, 0x42, 0x89, 0x24, 0x8a, 0xb5,
		0x7b, 0xf7, 0xab, 0xe5, 0xc6, 0x10, 0xb7, 0x85, 0x61, 0x95, 0xc5, 0xc6, 0x46, 0x7d, 0xbb, 0xd5,
		0xdc, 0xad, 0xef, 0xd4, 0x5e, 0x50, 0xf6, 0x76, 0x7e, 0x7e, 0xa7, 0xf9, 0xdc, 0x8e, 0x2c, 0xea,
		0x23, 0x6a, 0x1f, 0xe0, 0x56, 0x6f, 0x81, 0x38, 0x6a, 0x94, 0x74, 0x1a, 0x26, 0x99, 0x25, 0xce,
		0x48, 0x8b, 0x30, 0xbf, 0xd3, 0x54, 0xda, 0x8d, 0x8d, 0xba, 0x52, 0xbf, 0x76, 0xad, 0x5e, 0xdb,
		0x6d, 0xd3, 0x1b, 0x08, 0x5f, 0x7b, 0x37, 0xbc, 0xa9, 0x5f, 0x89, 0xc3, 0xe2, 0x04, 0x4b, 0xa4,
		0x2a, 0x3b, 0x3b, 0xd0, 0xe3, 0xcc, 0xc7, 0xa7, 0xb1, 0xbe, 0x8c, 0x4b, 0x7e, 0x4b, 0x75, 0x3c,
		0x76, 0xd4, 0x78, 0x0c, 0xb0, 0x97, 0x4c, 0x4f, 0xef, 0xea, 0xc8, 0x61, 0x17, 0x36, 0xf4, 0x40,
		0x31, 0x3f, 0x94, 0xd3, 0x3b, 0x9b, 0x9f, 0x01, 0xc9, 0xb6, 0x5c, 0xdd, 0xd3, 0x6f, 0x22, 0x45,
		0x37, 0xf9, 0xed, 0x0e, 0x3e, 0x60, 0x24, 0x64, 0x91, 0x8f, 0x34, 0x4c, 0xcf, 0xd7, 0x36, 0x51,
		0x4f, 0x1d, 0xd1, 0xc6, 0x09, 0x3c, 0x2e, 0x8b, 0x7c, 0xc4, 0xd7, 0x3e, 0x07, 0xb9, 0x8e, 0x35,
		0xc0, 0x5d, 0x17, 0xd5, 0xc3, 0xf5, 0x42, 0x90, 0xb3, 0x54, 0xe6, 0xab, 0xb0, 0x7e, 0x7a, 0x78,
		0xad, 0x94, 0x93, 0xb3, 0x54, 0x46, 0x55, 0x1e, 0x85, 0x79, 0xb5, 0xd7, 0x73, 0x30, 0x39, 0x27,
		0xa2, 0x27, 0x84, 0xbc, 0x2f, 0x26, 0x8a, 0xcb, 0xcf, 0x42, 0x9a, 0xfb, 0x01, 0x97, 0x64, 0xec,
		0x09, 0xc5, 0xa6, 0xc7, 0xde, 0xd8, 0x6a, 0x46, 0x4e, 0x9b, 0x7c, 0xf0, 0x1c, 0xe4, 0x74, 0x57,
		0x19, 0xde, 0x92, 0xc7, 0x56, 0x62, 0xab, 0x69, 0x39, 0xab, 0xbb, 0xfe, 0x0d, 0x63, 0xe9, 0xf5,
		0x18, 0xe4, 0xc3, 0xb7, 0xfc, 0xd2, 0x06, 0xa4, 0x0d, 0x4b, 0x53, 0x49, 0x68, 0xd1, 0x4f, 0x4c,
		0xab, 0x11, 0x1f, 0x06, 0xca, 0x5b, 0x4c, 0x5f, 0xf6, 0x91, 0xcb, 0xff, 0x22, 0x40, 0x9a, 0x8b,
		0xa5, 0x53, 0x90, 0xb0, 0x55, 0xef, 0x80, 0xd0, 0x25, 0xd7, 0x63, 0xa2, 0x20, 0x93, 0x67, 0x2c,
		0x77, 0x6d, 0xd5, 0x24, 0x21, 0xc0, 0xe4, 0xf8, 0x19, 0xaf, 0xab, 0x81, 0xd4, 0x0e, 0x39, 0x7e,
		0x58, 0xfd, 0x3e, 0x32, 0x3d, 0x97, 0xaf, 0x2b, 0x93, 0xd7, 0x98, 0x58, 0x7a, 0x02, 0x16, 0x3c,
		0x47, 0xd5, 0x8d, 0x90, 0x6e, 0x82, 0xe8, 0x8a, 0x7c, 0xc0, 0x57, 0xae, 0xc0, 0x19, 0xce, 0xdb,
		0x41, 0x9e, 0xaa, 0x1d, 0xa0, 0xce, 0x10, 0x94, 0x22, 0xd7, 0x0c, 0xa7, 0x99, 0xc2, 0x06, 0x1b,
		0xe7, 0xd8, 0xd2, 0x0f, 0x04, 0x58, 0xe0, 0x07, 0xa6, 0x8e, 0xef, 0xac, 0x6d, 0x00, 0xd5, 0x34,
		0x2d, 0x2f, 0xe8, 0xae, 0xf1, 0x50, 0x1e, 0xc3, 0x95, 0xab, 0x3e, 0x48, 0x0e, 0x10, 0x2c, 0xf7,
		0x01, 0x86, 0x23, 0xc7, 0xba, 0xed, 0x2c, 0x64, 0xd9, 0x27, 0x1c, 0xf2, 0x1d, 0x90, 0x1e, 0xb1,
		0x81, 0x8a, 0xf0, 0xc9, 0x4a, 0x5a, 0x82, 0xe4, 0x3e, 0xea, 0xe9, 0x26, 0xbb, 0x98, 0xa5, 0x0f,
		0xfc, 0x22, 0x24, 0xe1, 0x5f, 0x84, 0xac, 0x7f, 0x16, 0x16, 0x35, 0xab, 0x3f, 0x6a, 0xee, 0xba,
		0x38, 0x72, 0xcc, 0x77, 0x3f, 0x25, 0xbc, 0x08, 0xc3, 0x16, 0xf3, 0x3d, 0x41, 0xf8, 0xd3, 0x58,
		0x7c, 0xb3, 0xb5, 0xfe, 0xb5, 0xd8, 0xf2, 0x26, 0x85, 0xb6, 0xf8, 0x4c, 0x65, 0xd4, 0x35, 0x90,
		0x86, 0xad, 0x87, 0xaf, 0xac, 0xc2, 0xc7, 0x7b, 0xba, 0x77, 0x30, 0xd8, 0x2f, 0x6b, 0x56, 0x7f,
		0xad, 0x67, 0xf5, 0xac, 0xe1, 0xa7, 0x4f, 0xfc, 0x44, 0x1e, 0xc8, 0x7f, 0xec, 0xf3, 0x67, 0xc6,
		0x97, 0x2e, 0x47, 0x7e, 0x2b, 0xad, 0xec, 0xc0, 0x22, 0x53, 0x56, 0xc8, 0xf7, 0x17, 0x7a, 0x8a,
		0x90, 0xee, 0x79, 0x87, 0x55, 0xf8, 0xc6, 0x5b, 0xa4, 0x5c, 0xcb, 0x0b, 0x0c, 0x8a, 0xc7, 0xe8,
		0x41, 0xa3, 0x22, 0xc3, 0x7d, 0x21, 0x3e, 0xba, 0x35, 0x91, 0x13, 0xc1, 0xf8, 0x3d, 0xc6, 0xb8,
		0x18, 0x60, 0x6c, 0x33, 0x68, 0xa5, 0x06, 0x73, 0x27, 0xe1, 0xfa, 0x27, 0xc6, 0x95, 0x43, 0x41,
		0x92, 0x4d, 0x98, 0x27, 0x24, 0xda, 0xc0, 0xf5, 0xac, 0x3e, 0xc9, 0x7b, 0xf7, 0xa6, 0xf9, 0xe7,
		0xb7, 0xe8, 0x5e, 0xc9, 0x63, 0x58, 0xcd, 0x47, 0x55, 0x2a, 0x40, 0x3e, 0x39, 0x75, 0x90, 0x66,
		0x44, 0x30, 0xbc, 0xc1, 0x0c, 0xf1, 0xf5, 0x2b, 0x9f, 0x81, 0x25, 0xfc, 0x3f, 0x49, 0x4b, 0x41,
		0x4b, 0xa2, 0x2f, 0xbc, 0x0a, 0x3f, 0x78, 0x99, 0x6e, 0xc7, 0x45, 0x9f, 0x20, 0x60, 0x53, 0x60,
		0x15, 0x7b, 0xc8, 0xf3, 0x90, 0xe3, 0x2a, 0xaa, 0x31, 0xc9, 0xbc, 0xc0, 0x8d, 0x41, 0xe1, 0x8b,
		0x6f, 0x87, 0x57, 0x71, 0x93, 0x22, 0xab, 0x86, 0x51, 0xd9, 0x83, 0xd3, 0x13, 0xa2, 0x62, 0x0a,
		0xce, 0x57, 0x18, 0xe7, 0xd2, 0x58, 0x64, 0x60, 0xda, 0x16, 0x70, 0xb9, 0xbf, 0x96, 0x53, 0x70,
		0xfe, 0x11, 0xe3, 0x94, 0x18, 0x96, 0x2f, 0x29, 0x66, 0x7c, 0x16, 0x16, 0x6e, 0x22, 0x67, 0xdf,
		0x72, 0xd9, 0x2d, 0xcd, 0x14, 0x74, 0xaf, 0x32, 0xba, 0x79, 0x06, 0x24, 0xd7, 0x36, 0x98, 0xeb,
		0x0a, 0xa4, 0xbb, 0xaa, 0x86, 0xa6, 0xa0, 0xf8, 0x12, 0xa3, 0x98, 0xc5, 0xfa, 0x18, 0x5a, 0x85,
		0x5c, 0xcf, 0x62, 0x95, 0x29, 0x1a, 0xfe, 0x1a, 0x83, 0x67, 0x39, 0x86, 0x51, 0xd8, 0x96, 0x3d,
		0x30, 0x70, 0xd9, 0x8a, 0xa6, 0xf8, 0x63, 0x4e, 0xc1, 0x31, 0x8c, 0xe2, 0x04, 0x6e, 0xfd, 0x13,
		0x4e, 0xe1, 0x06, 0xfc, 0xf9, 0x0c, 0x64, 0x2d, 0xd3, 0x38, 0xb4, 0xcc, 0x69, 0x8c, 0xf8, 0x32,
		0x63, 0x00, 0x06, 0xc1, 0x04, 0x57, 0x21, 0x33, 0xed, 0x42, 0x7c, 0xe5, 0x6d, 0xbe, 0x3d, 0xf8,
		0x0a, 0x6c, 0xc2, 0x3c, 0x4f, 0x50, 0xba, 0x65, 0x4e, 0x41, 0xf1, 0x67, 0x8c, 0x22, 0x1f, 0x80,
		0xb1, 0x69, 0x78, 0xc8, 0xf5, 0x7a, 0x68, 0x1a, 0x92, 0xd7, 0xf9, 0x34, 0x18, 0x84, 0xb9, 0x72,
		0x1f, 0x99, 0xda, 0xc1, 0x74, 0x0c, 0x5f, 0xe5, 0xae, 0xe4, 0x18, 0x4c, 0x51, 0x83, 0xb9, 0xbe,
		0xea, 0xb8, 0x07, 0xaa, 0x31, 0xd5, 0x72, 0xfc, 0x39, 0xe3, 0xc8, 0xf9, 0x20, 0xe6, 0x91, 0x81,
		0x79, 0x12, 0x9a, 0xaf, 0x71, 0x8f, 0x04, 0x60, 0x6c, 0xeb, 0xb9, 0x1e, 0xb9, 0xd2, 0x3a, 0x09,
		0xdb, 0x5f, 0xf0, 0xad, 0x47, 0xb1, 0xdb, 0x41, 0xc6, 0xab, 0x90, 0x71, 0xf5, 0xdb, 0x53, 0xd1,
		0xfc, 0x25, 0x5f, 0x69, 0x02, 0xc0, 0xe0, 0x17, 0xe0, 0xcc, 0xc4, 0x32, 0x31, 0x05, 0xd9, 0x5f,
		0x31, 0xb2, 0x53, 0x13, 0x4a, 0x05, 0x4b, 0x09, 0x27, 0xa5, 0xfc, 0x6b, 0x9e, 0x12, 0xd0, 0x08,
		0x57, 0x0b, 0x9f, 0x15, 0x5c, 0xb5, 0x7b, 0x32, 0xaf, 0xfd, 0x0d, 0xf7, 0x1a, 0xc5, 0x86, 0xbc,
		0xb6, 0x0b, 0xa7, 0x18, 0xe3, 0xc9, 0xd6, 0xf5, 0xeb, 0x3c, 0xb1, 0x52, 0xf4, 0x5e, 0x78, 0x75,
		0x3f, 0x0b, 0xcb, 0xbe, 0x3b, 0x79, 0x53, 0xea, 0x2a, 0x7d, 0xd5, 0x9e, 0x82, 0xf9, 0x1b, 0x8c,
		0x99, 0x67, 0x7c, 0xbf, 0xab, 0x75, 0xb7, 0x55, 0x1b, 0x93, 0x3f, 0x0f, 0x05, 0x4e, 0x3e, 0x30,
		0x1d, 0xa4, 0x59, 0x3d, 0x53, 0xbf, 0x8d, 0x3a, 0x53, 0x50, 0xff, 0xed, 0xc8, 0x52, 0xed, 0x05,
		0xe0, 0x98, 0xb9, 0x01, 0xa2, 0xdf, 0xab, 0x28, 0x7a, 0xdf, 0xb6, 0x1c, 0x2f, 0x82, 0xf1, 0x9b,
		0x7c, 0xa5, 0x7c, 0x5c, 0x83, 0xc0, 0x2a, 0x75, 0xc8, 0x93, 0xc7, 0x69, 0x43, 0xf2, 0xef, 0x18,
		0xd1, 0xdc, 0x10, 0xc5, 0x12, 0x87, 0x66, 0xf5, 0x6d, 0xd5, 0x99, 0x26, 0xff, 0xfd, 0x3d, 0x4f,
		0x1c, 0x0c, 0xc2, 0x12, 0x87, 0x77, 0x68, 0x23, 0x5c, 0xed, 0xa7, 0x60, 0xf8, 0x16, 0x4f, 0x1c,
		0x1c, 0xc3, 0x28, 0x78, 0xc3, 0x30, 0x05, 0xc5, 0xb7, 0x39, 0x05, 0xc7, 0x60, 0x8a, 0x4f, 0x0f,
		0x0b, 0xad, 0x83, 0x7a, 0xba, 0xeb, 0x39, 0xb4, 0x15, 0xbe, 0x37, 0xd5, 0x77, 0xde, 0x0e, 0x37,
		0x61, 0x72, 0x00, 0x8a, 0x33, 0x11, 0xbb, 0x42, 0x25, 0x27, 0xa5, 0x68, 0xc3, 0xbe, 0xcb, 0x33,
		0x51, 0x00, 0x46, 0xf7, 0xe7, 0xfc, 0x48, 0xaf, 0x22, 0x45, 0xfd, 0x10, 0xa6, 0xf0, 0xcb, 0xef,
		0x32, 0xae, 0x70, 0xab, 0x52, 0xd9, 0xc2, 0x01, 0x14, 0x6e, 0x28, 0xa2, 0xc9, 0x5e, 0x7e, 0xd7,
		0x8f, 0xa1, 0x50, 0x3f, 0x51, 0xb9, 0x06, 0x73, 0xa1, 0x66, 0x22, 0x9a, 0xea, 0x57, 0x18, 0x55,
		0x2e, 0xd8, 0x4b, 0x54, 0x2e, 0x42, 0x02, 0x37, 0x06, 0xd1, 0xf0, 0x5f, 0x65, 0x70, 0xa2, 0x5e,
		0xf9, 0x24, 0xa4, 0x79, 0x43, 0x10, 0x0d, 0xfd, 0x35, 0x06, 0xf5, 0x21, 0x18, 0xce, 0x9b, 0x81,
		0x68, 0xf8, 0xaf, 0x73, 0x38, 0x87, 0x60, 0xf8, 0xf4, 0x2e, 0xfc, 0xc7, 0xdf, 0x48, 0xb0, 0x84,
		0xce, 0x7d, 0x77, 0x15, 0x66, 0x59, 0x17, 0x10, 0x8d, 0xfe, 0x3c, 0x7b, 0x39, 0x47, 0x54, 0x9e,
		0x82, 0xe4, 0x94, 0x0e, 0xff, 0x4d, 0x06, 0xa5, 0xfa, 0x95, 0x1a, 0x64, 0x03, 0x95, 0x3f, 0x1a,
		0xfe, 0x5b, 0x0c, 0x1e, 0x44, 0x61, 0xd3, 0x59, 0xe5, 0x8f, 0x26, 0xf8, 0x6d, 0x6e, 0x3a, 0x43,
		0x60, 0xb7, 0xf1, 0xa2, 0x1f, 0x8d, 0xfe, 0x1d, 0xee, 0x75, 0x0e, 0xa9, 0x3c, 0x03, 0x19, 0x3f,
		0x91, 0x47, 0xe3, 0x7f, 0x97, 0xe1, 0x87, 0x18, 0xec, 0x81, 0x40, 0x21, 0x89, 0xa6, 0xf8, 0x3d,
		0xee, 0x81, 0x00, 0x0a, 0x6f, 0xa3, 0xd1, 0xe6, 0x20, 0x9a, 0xe9, 0xf7, 0xf9, 0x36, 0x1a, 0xe9,
		0x0d, 0xf0, 0x6a, 0x92, 0x7c, 0x1a, 0x4d, 0xf1, 0x07, 0x7c, 0x35, 0x89, 0x3e, 0x36, 0x63, 0xb4,
		0xda, 0x46, 0x73, 0xfc, 0x21, 0x37, 0x63, 0xa4, 0xd8, 0x56, 0x5a, 0x20, 0x8d, 0x57, 0xda, 0x68,
		0xbe, 0x2f, 0x30, 0xbe, 0x85, 0xb1, 0x42, 0x5b, 0x79, 0x0e, 0x4e, 0x4d, 0xae, 0xb2, 0xd1, 0xac,
		0x5f, 0x7c, 0x77, 0xe4, 0x5c, 0x14, 0x2c, 0xb2, 0x95, 0xdd, 0x61, 0xba, 0x0e, 0x56, 0xd8, 0x68,
		0xda, 0x57, 0xde, 0x0d, 0x67, 0xec, 0x60, 0x81, 0xad, 0x54, 0x01, 0x86, 0xc5, 0x2d, 0x9a, 0xeb,
		0x55, 0xc6, 0x15, 0x00, 0xe1, 0xad, 0xc1, 0x6a, 0x5b, 0x34, 0xfe, 0x4b, 0x7c, 0x6b, 0x30, 0x04,
		0xde, 0x1a, 0xbc, 0xac, 0x45, 0xa3, 0x5f, 0xe3, 0x5b, 0x83, 0x43, 0x70, 0x64, 0x07, 0x2a, 0x47,
		0x34, 0xc3, 0x97, 0x79, 0x64, 0x07, 0x50, 0x95, 0xab, 0x90, 0x36, 0x07, 0x86, 0x81, 0x03, 0x54,
		0xba, 0xf7, 0x0f, 0xc4, 0x0a, 0xff, 0xf1, 0x3e, 0xb3, 0x80, 0x03, 0x2a, 0x17, 0x21, 0x89, 0xfa,
		0xfb, 0xa8, 0x13, 0x85, 0xfc, 0xcf, 0xf7, 0x79, 0x52, 0xc2, 0xda, 0x95, 0x67, 0x00, 0xe8, 0xd1,
		0x9e, 0x7c, 0xb6, 0x8a, 0xc0, 0xfe, 0xd7, 0xfb, 0xec, 0xa7, 0x1b, 0x43, 0xc8, 0x90, 0x80, 0xfe,
		0x10, 0xe4, 0xde, 0x04, 0x6f, 0x87, 0x09, 0xc8, 0xac, 0xaf, 0xc0, 0xec, 0x75, 0xd7, 0x32, 0x3d,
		0xb5, 0x17, 0x85, 0xfe, 0x6f, 0x86, 0xe6, 0xfa, 0xd8, 0x61, 0x7d, 0xcb, 0x41, 0x9e, 0xda, 0x73,
		0xa3, 0xb0, 0xff, 0xc3, 0xb0, 0x3e, 0x00, 0x83, 0x35, 0xd5, 0xf5, 0xa6, 0x99, 0xf7, 0x8f, 0x39,
		0x98, 0x03, 0xb0, 0xd1, 0xf8, 0xff, 0x1b, 0xe8, 0x30, 0x0a, 0xfb, 0x0e, 0x37, 0x9a, 0xe9, 0x57,
		0x3e, 0x09, 0x19, 0xfc, 0x2f, 0xfd, 0x3d, 0x56, 0x04, 0xf8, 0x7f, 0x19, 0x78, 0x88, 0xc0, 0x6f,
		0x76, 0xbd, 0x8e, 0xa7, 0x47, 0x3b, 0xfb, 0xff, 0xd8, 0x4a, 0x73, 0xfd, 0x4a, 0x15, 0xb2, 0xae,
		0xd7, 0xe9, 0x0c, 0x58, 0x7f, 0x15, 0x01, 0xff, 0xff, 0xf7, 0xfd, 0x23, 0xb7, 0x8f, 0x59, 0xaf,
		0x4f, 0xbe, 0x3d, 0x84, 0x4d, 0x6b, 0xd3, 0xa2, 0xf7, 0x86, 0x2f, 0x96, 0xa2, 0x2f, 0x00, 0xe1,
		0xdb, 0x71, 0x78, 0x40, 0xb3, 0xfa, 0xfb, 0x96, 0xbb, 0x16, 0xc8, 0x77, 0x6b, 0x7d, 0xd5, 0x66,
		0xd7, 0x82, 0xd9, 0xbe, 0x6a, 0xb3, 0xdf, 0x5f, 0xba, 0xcb, 0x27, 0xbb, 0x52, 0x2c, 0xfd, 0x12,
		0xcc, 0x6e, 0xab, 0xf6, 0x2e, 0x72, 0x3d, 0x89, 0x38, 0x8b, 0xfc, 0xd0, 0x87, 0xdd, 0xd3, 0xae,
		0x94, 0x03, 0xc4, 0x65, 0xa6, 0x56, 0x6e, 0x7b, 0x4e, 0xdb, 0x73, 0xc8, 0x37, 0x6d, 0x39, 0xe5,
		0x92, 0x87, 0xe5, 0x2b, 0x90, 0x0d, 0x88, 0x25, 0x11, 0xe2, 0x37, 0xd0, 0x21, 0xfb, 0xa9, 0x0f,
		0xfe, 0x57, 0x5a, 0x1a, 0xfe, 0x16, 0x0f, 0xcb, 0xe8, 0x43, 0x25, 0x76, 0x59, 0x28, 0x3d, 0x0d,
		0xb3, 0xd7, 0xd4, 0x1b, 0x68, 0x5b, 0xb5, 0xa5, 0x0b, 0x30, 0x8b, 0x4c, 0xcf, 0xd1, 0x91, 0xcb,
		0x0c, 0x38, 0x13, 0x32, 0x80, 0xa9, 0xd1, 0x37, 0x73, 0xcd, 0xd2, 0x16, 0xe4, 0x82, 0x03, 0xd3,
		0xbe, 0x1b, 0x4b, 0x2d, 0xef, 0x80, 0xfd, 0x36, 0x37, 0x23, 0xd3, 0x87, 0xf5, 0x8d, 0x37, 0xee,
		0x16, 0x67, 0xbe, 0x7f, 0xb7, 0x38, 0xf3, 0xaf, 0x77, 0x8b, 0x33, 0x6f, 0xde, 0x2d, 0x0a, 0xef,
		0xdc, 0x2d, 0x0a, 0xef, 0xdd, 0x2d, 0x0a, 0x77, 0x8e, 0x8a, 0xc2, 0x57, 0x8f, 0x8a, 0xc2, 0xd7,
		0x8f, 0x8a, 0xc2, 0x77, 0x8e, 0x8a, 0xc2, 0x1b, 0x47, 0xc5, 0x99, 0xef, 0x1f, 0x15, 0x85, 0x37,
		0x8f, 0x8a, 0xc2, 0x8f, 0x8e, 0x8a, 0x33, 0xef, 0x1c, 0x15, 0x85, 0xf7, 0x8e, 0x8a, 0x33, 0x77,
		0x7e, 0x58, 0x9c, 0xd9, 0x4f, 0x11, 0xdf, 0x5e, 0xf8, 0x49, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21,
		0x83, 0xac, 0x31, 0xd4, 0x32, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *MapTest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MapTest)
	if !ok {
		that2, ok := that.(MapTest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MapTest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MapTest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MapTest but is not nil && this == nil")
	}
	if len(this.StrStr) != len(that1.StrStr) {
		return fmt.Errorf("StrStr this(%v) Not Equal that(%v)", len(this.StrStr), len(that1.StrStr))
	}
	for i := range this.StrStr {
		if this.StrStr[i] != that1.StrStr[i] {
			return fmt.Errorf("StrStr this[%v](%v) Not Equal that[%v](%v)", i, this.StrStr[i], i, that1.StrStr[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MapTest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapTest)
	if !ok {
		that2, ok := that.(MapTest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StrStr) != len(that1.StrStr) {
		return false
	}
	for i := range this.StrStr {
		if this.StrStr[i] != that1.StrStr[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FakeMap) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FakeMap)
	if !ok {
		that2, ok := that.(FakeMap)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FakeMap")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FakeMap but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FakeMap but is not nil && this == nil")
	}
	if len(this.Entries) != len(that1.Entries) {
		return fmt.Errorf("Entries this(%v) Not Equal that(%v)", len(this.Entries), len(that1.Entries))
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return fmt.Errorf("Entries this[%v](%v) Not Equal that[%v](%v)", i, this.Entries[i], i, that1.Entries[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FakeMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FakeMap)
	if !ok {
		that2, ok := that.(FakeMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FakeMapEntry) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FakeMapEntry)
	if !ok {
		that2, ok := that.(FakeMapEntry)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FakeMapEntry")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FakeMapEntry but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FakeMapEntry but is not nil && this == nil")
	}
	if this.Key != that1.Key {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if this.Other != that1.Other {
		return fmt.Errorf("Other this(%v) Not Equal that(%v)", this.Other, that1.Other)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FakeMapEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FakeMapEntry)
	if !ok {
		that2, ok := that.(FakeMapEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Other != that1.Other {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MapTest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mapdefaults.MapTest{")
	keysForStrStr := make([]string, 0, len(this.StrStr))
	for k := range this.StrStr {
		keysForStrStr = append(keysForStrStr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStrStr)
	mapStringForStrStr := "map[string]string{"
	for _, k := range keysForStrStr {
		mapStringForStrStr += fmt.Sprintf("%#v: %#v,", k, this.StrStr[k])
	}
	mapStringForStrStr += "}"
	if this.StrStr != nil {
		s = append(s, "StrStr: "+mapStringForStrStr+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FakeMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mapdefaults.FakeMap{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FakeMapEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&mapdefaults.FakeMapEntry{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Other: "+fmt.Sprintf("%#v", this.Other)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMap(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedMapTest(r randyMap, easy bool) *MapTest {
	this := &MapTest{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.StrStr = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.StrStr[randStringMap(r)] = randStringMap(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMap(r, 2)
	}
	return this
}

func NewPopulatedFakeMap(r randyMap, easy bool) *FakeMap {
	this := &FakeMap{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Entries = make([]*FakeMapEntry, v2)
		for i := 0; i < v2; i++ {
			this.Entries[i] = NewPopulatedFakeMapEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMap(r, 2)
	}
	return this
}

func NewPopulatedFakeMapEntry(r randyMap, easy bool) *FakeMapEntry {
	this := &FakeMapEntry{}
	this.Key = string(randStringMap(r))
	this.Value = string(randStringMap(r))
	this.Other = string(randStringMap(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMap(r, 4)
	}
	return this
}

type randyMap interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMap(r randyMap) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMap(r randyMap) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneMap(r)
	}
	return string(tmps)
}
func randUnrecognizedMap(r randyMap, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMap(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMap(dAtA []byte, r randyMap, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMap(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateMap(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateMap(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMap(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMap(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMap(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMap(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *MapTest) Size() (n int) {
	var l int
	_ = l
	if len(m.StrStr) > 0 {
		for k, v := range m.StrStr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMap(uint64(len(k))) + 1 + len(v) + sovMap(uint64(len(v)))
			n += mapEntrySize + 1 + sovMap(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FakeMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovMap(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FakeMapEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMap(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMap(uint64(l))
	}
	l = len(m.Other)
	if l > 0 {
		n += 1 + l + sovMap(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMap(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMap(x uint64) (n int) {
	return sovMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MapTest) String() string {
	if this == nil {
		return "nil"
	}
	keysForStrStr := make([]string, 0, len(this.StrStr))
	for k := range this.StrStr {
		keysForStrStr = append(keysForStrStr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStrStr)
	mapStringForStrStr := "map[string]string{"
	for _, k := range keysForStrStr {
		mapStringForStrStr += fmt.Sprintf("%v: %v,", k, this.StrStr[k])
	}
	mapStringForStrStr += "}"
	s := strings.Join([]string{`&MapTest{`,
		`StrStr:` + mapStringForStrStr + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FakeMap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FakeMap{`,
		`Entries:` + strings.Replace(fmt.Sprintf("%v", this.Entries), "FakeMapEntry", "FakeMapEntry", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FakeMapEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FakeMapEntry{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Other:` + fmt.Sprintf("%v", this.Other) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMap(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MapTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrStr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StrStr == nil {
				m.StrStr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMap
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMap
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMap(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMap
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StrStr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FakeMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FakeMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FakeMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &FakeMapEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FakeMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FakeMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FakeMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMap
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMap
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMap(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMap = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMap   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("combos/unmarshaler/map.proto", fileDescriptor_map_c5bc2daa9ca30987) }

var fileDescriptor_map_c5bc2daa9ca30987 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbf, 0x4f, 0x02, 0x31,
	0x14, 0xc7, 0xfb, 0x20, 0x72, 0xb1, 0x38, 0x98, 0x8b, 0xc3, 0x49, 0xcc, 0x0b, 0x61, 0x62, 0xf1,
	0x2e, 0x91, 0x45, 0x1c, 0x1c, 0x8c, 0x3a, 0xc9, 0x02, 0xee, 0xa6, 0x87, 0xe5, 0x47, 0xe0, 0xe8,
	0xa5, 0xed, 0x99, 0x30, 0xc9, 0x9f, 0xe3, 0xe8, 0xe8, 0x9f, 0xc0, 0xc8, 0xe8, 0x48, 0xeb, 0xe2,
	0xc8, 0xc8, 0x68, 0xe8, 0x61, 0x72, 0x6e, 0x6e, 0xef, 0xf3, 0xed, 0xa7, 0x7d, 0xdf, 0x94, 0x9e,
	0xf5, 0x45, 0x12, 0x0b, 0x15, 0x65, 0xb3, 0x84, 0x49, 0x35, 0x62, 0x53, 0x2e, 0xa3, 0x84, 0xa5,
	0x61, 0x2a, 0x85, 0x16, 0x7e, 0x35, 0x61, 0xe9, 0x33, 0x1f, 0xb0, 0x6c, 0xaa, 0x55, 0xed, 0x7c,
	0x38, 0xd6, 0xa3, 0x2c, 0x0e, 0xfb, 0x22, 0x89, 0x86, 0x62, 0x28, 0x22, 0xe7, 0xc4, 0xd9, 0xc0,
	0x91, 0x03, 0x37, 0xe5, 0x77, 0x1b, 0xaf, 0xd4, 0xeb, 0xb0, 0xf4, 0x91, 0x2b, 0xed, 0xb7, 0xa9,
	0xa7, 0xb4, 0x7c, 0x52, 0x5a, 0x06, 0x50, 0x2f, 0x37, 0xab, 0x17, 0xf5, 0xb0, 0xf0, 0x70, 0xb8,
	0xd7, 0xc2, 0x9e, 0x96, 0x3d, 0x2d, 0xef, 0x66, 0x5a, 0xce, 0xbb, 0x15, 0xe5, 0xa0, 0xd6, 0xa6,
	0xd5, 0x42, 0xec, 0x1f, 0xd3, 0xf2, 0x84, 0xcf, 0x03, 0xa8, 0x43, 0xf3, 0xb0, 0xbb, 0x1b, 0xfd,
	0x13, 0x7a, 0xf0, 0xc2, 0xa6, 0x19, 0x0f, 0x4a, 0x2e, 0xcb, 0xe1, 0xaa, 0x74, 0x09, 0x8d, 0x6b,
	0xea, 0xdd, 0xb3, 0x09, 0xef, 0xb0, 0xd4, 0x6f, 0x51, 0x8f, 0xcf, 0xb4, 0x1c, 0x73, 0xb5, 0x2f,
	0x70, 0xfa, 0xa7, 0xc0, 0x5e, 0xcb, 0x37, 0xff, 0x9a, 0x8d, 0x07, 0x7a, 0x54, 0x3c, 0xf8, 0xef,
	0xee, 0x5d, 0x2a, 0xf4, 0x88, 0xcb, 0xa0, 0x9c, 0xa7, 0x0e, 0x6e, 0x6e, 0x97, 0x06, 0xc9, 0xca,
	0x20, 0xf9, 0x34, 0x48, 0xd6, 0x06, 0x61, 0x63, 0x10, 0xb6, 0x06, 0x61, 0x61, 0x11, 0xde, 0x2c,
	0xc2, 0xbb, 0x45, 0xf8, 0xb0, 0x08, 0x4b, 0x8b, 0x64, 0x65, 0x11, 0xd6, 0x16, 0xe1, 0xdb, 0x22,
	0xd9, 0x58, 0x84, 0xad, 0x45, 0xb2, 0xf8, 0x42, 0x12, 0x57, 0xdc, 0xdf, 0xb6, 0x7e, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x44, 0xd1, 0x73, 0x81, 0xb7, 0x01, 0x00, 0x00,
}
