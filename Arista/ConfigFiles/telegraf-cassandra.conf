# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"

# Configuration for telegraf agent
[agent]
  # Default data collection interval for all inputs
  interval = "5s"
  # Rounds collection interval to 'interval'
  # ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  # Telegraf will cache metric_buffer_limit metrics for each output, and will
  # flush this buffer on a successful write.
  metric_buffer_limit = 10000

  # Collection jitter is used to jitter the collection by a random amount.
  # Each plugin will sleep for a random time within jitter before collecting.
  # This can be used to avoid many plugins querying things like sysfs at the
  # same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  # Default data flushing interval for all outputs. You should not set this below
  # interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  # Jitter the flush interval by a random amount. This is primarily to avoid
  # large write spikes for users running a large number of telegraf instances.
  # ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "1s"

  # Run telegraf in debug mode
  debug = false
  # Run telegraf in quiet mode
  quiet = false
  # Override default hostname, if empty use os.Hostname()
  hostname = ""


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  # The full HTTP or UDP endpoint URL for your InfluxDB instance.
  # Multiple urls can be specified but it is assumed that they are part of the same
  # cluster, this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://192.168.99.1:8086"] # required
  #urls = ["http://172.22.229.35:8086"] # required
  # The target database for metrics (telegraf will create it if not exists)
  database = "cassandra" # required
  # Precision of writes, valid values are n, u, ms, s, m, and h
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"

  # Connection timeout (for the connection with InfluxDB), formatted as a string.
  # If not provided, will default to 0 (no timeout)
  # timeout = "5s"
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"
  # Set the user agent for HTTP POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
  # udp_payload = 512

###############################################################################
#                                  INPUTS                                     #
###############################################################################
[cassandra]
  context = "/jolokia/read"
  servers = [":8778"]
  metrics = [ 
          "/java.lang:type=Memory/HeapMemoryUsage",
          "/java.lang:type=Memory/NonHeapMemoryUsage",
          "/java.lang:type=GarbageCollector,name=ConcurrentMarkSweep/CollectionTime",
          "/java.lang:type=GarbageCollector,name=ConcurrentMarkSweep/CollectionCount",
          "/java.lang:type=GarbageCollector,name=ParNew/CollectionTime",
          "/java.lang:type=GarbageCollector,name=ParNew/CollectionCount",
          "/org.apache.cassandra.metrics:type=Compaction,name=CompletedTasks",
          "/org.apache.cassandra.metrics:type=Compaction,name=PendingTasks",
          "/org.apache.cassandra.metrics:type=Compaction,name=TotalCompactionsCompleted",
          "/org.apache.cassandra.metrics:type=Compaction,name=BytesCompacted",
          "/org.apache.cassandra.metrics:type=Client,name=connectedNativeClients",
          "/org.apache.cassandra.metrics:type=Storage,name=Load",
          "/org.apache.cassandra.metrics:type=Storage,name=Exceptions",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=internal,scope=CompactionExecutor,name=ActiveTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=internal,scope=AntiEntropyStage,name=ActiveTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=CounterMutationStage,name=PendingTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=MutationStage,name=PendingTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=ReadRepairStage,name=PendingTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=ReadStage,name=PendingTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=RequestResponseStage,name=PendingTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=CounterMutationStage,name=CurrentlyBlockedTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=MutationStage,name=CurrentlyBlockedTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=ReadRepairStage,name=CurrentlyBlockedTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=ReadStage,name=CurrentlyBlockedTasks",
          "/org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=RequestResponseStage,name=CurrentlyBlockedTasks",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=TotalLatency",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=TotalLatency",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Latency",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Latency",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Timeouts",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Timeouts",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Unavailables",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Unavailables",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Failures",
          "/org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Failures",
          "/org.apache.cassandra.metrics:type=Table,keyspace=*,scope=*,name=ReadLatency",
          "/org.apache.cassandra.metrics:type=Table,keyspace=*,scope=*,name=CoordinatorReadLatency",
          "/org.apache.cassandra.metrics:type=Table,keyspace=*,scope=*,name=WriteLatency",
          "/org.apache.cassandra.metrics:type=Table,keyspace=*,scope=*,name=ReadTotalLatency",
          "/org.apache.cassandra.metrics:type=Table,keyspace=*,scope=*,name=WriteTotalLatency",
          "/org.apache.cassandra.metrics:type=Cache,scope=KeyCache,name=Hits",
          "/org.apache.cassandra.metrics:type=Cache,scope=KeyCache,name=Requests",
          "/org.apache.cassandra.metrics:type=Cache,scope=KeyCache,name=Entries",
          "/org.apache.cassandra.metrics:type=Cache,scope=KeyCache,name=Size",
          "/org.apache.cassandra.metrics:type=Cache,scope=KeyCache,name=Capacity",
          "/org.apache.cassandra.metrics:type=Cache,scope=RowCache,name=Hits",
          "/org.apache.cassandra.metrics:type=Cache,scope=RowCache,name=Requests",
          "/org.apache.cassandra.metrics:type=Cache,scope=RowCache,name=Entries",
          "/org.apache.cassandra.metrics:type=Cache,scope=RowCache,name=Size",
          "/org.apache.cassandra.metrics:type=Cache,scope=RowCache,name=Capacity",
          "/org.apache.cassandra.metrics:type=CommitLog,name=PendingTasks",
          "/org.apache.cassandra.metrics:type=CommitLog,name=TotalCommitLogSize",
          "/org.apache.cassandra.metrics:type=Table,keyspace=*,scope=*,name=LiveDiskSpaceUsed",
          "/org.apache.cassandra.metrics:type=Table,keyspace=*,scope=*,name=TotalDiskSpaceUsed",
          ]

###############################################################################
#                              SERVICE INPUTS                                 #
###############################################################################
