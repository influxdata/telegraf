//go:build linux

// Code generated by mockery v2.12.3. DO NOT EDIT.

package intel_powerstat

import mock "github.com/stretchr/testify/mock"

// mockMsrService is an autogenerated mock type for the mockMsrService type
type mockMsrService struct {
	mock.Mock
}

// isMsrLoaded provides a mock function with given fields:
func (_m *mockMsrService) isMsrLoaded() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// getCPUCoresData provides a mock function with given fields:
func (_m *mockMsrService) getCPUCoresData() map[string]*msrData {
	ret := _m.Called()

	var r0 map[string]*msrData
	if rf, ok := ret.Get(0).(func() map[string]*msrData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*msrData)
		}
	}

	return r0
}

// openAndReadMsr provides a mock function with given fields: core
func (_m *mockMsrService) openAndReadMsr(core string) error {
	ret := _m.Called(core)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(core)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// readSingleMsr provides a mock function with given fields: core, msr
func (_m *mockMsrService) readSingleMsr(core string, msr string) (uint64, error) {
	ret := _m.Called(core, msr)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string, string) uint64); ok {
		r0 = rf(core, msr)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(core, msr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// retrieveCPUFrequencyForCore provides a mock function with given fields: core
func (_m *mockMsrService) retrieveCPUFrequencyForCore(core string) (float64, error) {
	ret := _m.Called(core)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(core)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(core)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// retrieveUncoreFrequency provides a mock function with given fields: socketID, typeFreq, kind, die
func (_m *mockMsrService) retrieveUncoreFrequency(socketID string, typeFreq string, kind string, die string) (float64, error) {
	ret := _m.Called(socketID, typeFreq, kind, die)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string, string, string) float64); ok {
		r0 = rf(socketID, typeFreq, kind, die)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(socketID, typeFreq, kind, die)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type newmockMsrServiceT interface {
	mock.TestingT
	Cleanup(func())
}

// newmockMsrService creates a new instance of mockMsrService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newmockMsrService(t newmockMsrServiceT) *mockMsrService {
	mock := &mockMsrService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
