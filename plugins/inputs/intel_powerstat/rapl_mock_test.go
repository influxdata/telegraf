// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package intel_powerstat

import mock "github.com/stretchr/testify/mock"

// mockRaplService is an autogenerated mock type for the raplService type
type mockRaplService struct {
	mock.Mock
}

// getConstraintMaxPowerWatts provides a mock function with given fields: socketID
func (_m *mockRaplService) getConstraintMaxPowerWatts(socketID string) (float64, error) {
	ret := _m.Called(socketID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(socketID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getRaplData provides a mock function with given fields:
func (_m *mockRaplService) getRaplData() map[string]*raplData {
	ret := _m.Called()

	var r0 map[string]*raplData
	if rf, ok := ret.Get(0).(func() map[string]*raplData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*raplData)
		}
	}

	return r0
}

// initializeRaplData provides a mock function with given fields:
func (_m *mockRaplService) initializeRaplData() {
	_m.Called()
}

// retrieveAndCalculateData provides a mock function with given fields: socketID
func (_m *mockRaplService) retrieveAndCalculateData(socketID string) error {
	ret := _m.Called(socketID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(socketID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
