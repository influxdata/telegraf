// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	telegraf "github.com/influxdata/telegraf"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Accumulator is an autogenerated mock type for the Accumulator type
type Accumulator struct {
	mock.Mock
}

// AddCounter provides a mock function with given fields: measurement, fields, tags, t
func (_m *Accumulator) AddCounter(measurement string, fields map[string]interface{}, tags map[string]string, t ...time.Time) {
	_va := make([]interface{}, len(t))
	for _i := range t {
		_va[_i] = t[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, measurement, fields, tags)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AddError provides a mock function with given fields: err
func (_m *Accumulator) AddError(err error) {
	_m.Called(err)
}

// AddFields provides a mock function with given fields: measurement, fields, tags, t
func (_m *Accumulator) AddFields(measurement string, fields map[string]interface{}, tags map[string]string, t ...time.Time) {
	_va := make([]interface{}, len(t))
	for _i := range t {
		_va[_i] = t[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, measurement, fields, tags)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AddGauge provides a mock function with given fields: measurement, fields, tags, t
func (_m *Accumulator) AddGauge(measurement string, fields map[string]interface{}, tags map[string]string, t ...time.Time) {
	_va := make([]interface{}, len(t))
	for _i := range t {
		_va[_i] = t[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, measurement, fields, tags)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AddHistogram provides a mock function with given fields: measurement, fields, tags, t
func (_m *Accumulator) AddHistogram(measurement string, fields map[string]interface{}, tags map[string]string, t ...time.Time) {
	_va := make([]interface{}, len(t))
	for _i := range t {
		_va[_i] = t[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, measurement, fields, tags)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AddMetric provides a mock function with given fields: _a0
func (_m *Accumulator) AddMetric(_a0 telegraf.Metric) {
	_m.Called(_a0)
}

// AddSummary provides a mock function with given fields: measurement, fields, tags, t
func (_m *Accumulator) AddSummary(measurement string, fields map[string]interface{}, tags map[string]string, t ...time.Time) {
	_va := make([]interface{}, len(t))
	for _i := range t {
		_va[_i] = t[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, measurement, fields, tags)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// SetPrecision provides a mock function with given fields: precision
func (_m *Accumulator) SetPrecision(precision time.Duration) {
	_m.Called(precision)
}

// WithTracking provides a mock function with given fields: maxTracked
func (_m *Accumulator) WithTracking(maxTracked int) telegraf.TrackingAccumulator {
	ret := _m.Called(maxTracked)

	var r0 telegraf.TrackingAccumulator
	if rf, ok := ret.Get(0).(func(int) telegraf.TrackingAccumulator); ok {
		r0 = rf(maxTracked)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(telegraf.TrackingAccumulator)
		}
	}

	return r0
}
