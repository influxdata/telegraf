
MONITOR_INSTANCE="
CREATE OR REPLACE VIEW MONITOR_INSTANCE
(
	  CLUSTER_NAME
	, GROUP_NAME
	, MEMBER_NAME
	, RELEASE_VERSION
	, STARTUP_TIME
	, INSTANCE_STATUS
	, DATA_ACCESS_MODE
)
AS
SELECT '$VAR_CLUSTER_NAME' CLUSTER_NAME
     , NVL( inst.CLUSTER_GROUP_NAME  , '$VAR_GROUP_NAME'  )  GROUP_NAME
     , NVL( inst.CLUSTER_MEMBER_NAME , '$VAR_MEMBER_NAME' ) MEMBER_NAME
     , inst.VERSION            -- RELEASE_VERSION
     , inst.STARTUP_TIME       -- STARTUP_TIME
     , inst.STATUS             -- INSTANCE_STATUS
     , CAST( CASE WHEN ( inst.STATUS = 'OPEN' ) = FALSE
                       THEN 'NONE'
                  ELSE ( CASE WHEN ( SELECT VALUE
                                       FROM FIXED_TABLE_SCHEMA.X\$SM_SYSTEM_INFO xsys
                                      WHERE NAME = 'DATA_ACCESS_MODE'
                                        AND xsys.CLUSTER_MEMBER_ID = inst.CLUSTER_MEMBER_ID ) = 1
                                   THEN 'READ_ONLY'
                              ELSE 'READ_WRITE'
                         END )
             END AS VARCHAR(16 OCTETS) )  -- DATA_ACCESS_MODE
  FROM
       FIXED_TABLE_SCHEMA.X\$INSTANCE@GLOBAL[IGNORE_INACTIVE_MEMBER] AS inst
;
"

MONITOR_SESSION_STAT="
CREATE OR REPLACE VIEW MONITOR_SESSION_STAT
(
	  CLUSTER_NAME
	, TOTAL_SESSION_COUNT
	, ACTIVE_SESSION_COUNT
	, BAD_SESSION_COUNT
	, TOTAL_STATEMENT_COUNT
	, LONG_RUNNING_STATEMENT_COUNT
	, TOTAL_TRANSACTION_COUNT
	, LONG_RUNNING_TRANSACTION_COUNT
)
AS
SELECT '$VAR_CLUSTER_NAME' CLUSTER_NAME
     , TOTAL_SESSION_COUNT
     , ACTIVE_SESSION_COUNT
     , BAD_SESSION_COUNT
     , TOTAL_STATEMENT_COUNT
     , LONG_RUNNING_STATEMENT_COUNT
     , TOTAL_TRANSACTION_COUNT
     , LONG_RUNNING_TRANSACTION_COUNT
  FROM (
       SELECT COUNT(*) TOTAL_SESSION_COUNT
         FROM X\$SESSION
        WHERE USER_ID > 0
          AND PROGRAM != 'gmaster'
     ) X CROSS JOIN (
       SELECT COUNT(DISTINCT CASE WHEN X.VIEW_SCN != '-1.-1.-1' THEN SESSION_ID END) ACTIVE_SESSION_COUNT
            , COUNT(*) TOTAL_STATEMENT_COUNT
            , COUNT(CASE WHEN DATEDIFF (SECOND, X.START_TIME, SYSTIMESTAMP ) > 5 AND X.VIEW_SCN != '-1.-1.-1' THEN 1 END) LONG_RUNNING_STATEMENT_COUNT
         FROM X\$STATEMENT X
     ) Y CROSS JOIN (
       SELECT COUNT(*) TOTAL_TRANSACTION_COUNT
            , COUNT(CASE WHEN ABS(DATEDIFF (SECOND, X.BEGIN_TIME, SYSTIMESTAMP )) > 5 THEN 1 END) LONG_RUNNING_TRANSACTION_COUNT
         FROM X\$TRANSACTION X
     ) Z CROSS JOIN (
       SELECT COUNT(*) BAD_SESSION_COUNT
         FROM X\$SESSION
        WHERE STATUS IN ( 'SIGNALED', 'SNIPED', 'DEAD' )
     ) A
;
"

MONITOR_TABLESPACE_STAT="
CREATE OR REPLACE VIEW MONITOR_TABLESPACE_STAT
(
	  CLUSTER_NAME
	, GROUP_NAME
	, MEMBER_NAME
	, ATTR
	, NAME
	, TOTAL_BYTES
	, USED_BYTES
	, USED_PCT
)
AS
SELECT '$VAR_CLUSTER_NAME' CLUSTER_NAME
     , X.G_NAME           GROUP_NAME
     , X.M_NAME           MEMBER_NAME
     , TBS_ATTR
     , TBS_NAME NAME
     , X.TOTAL_EXT_COUNT * X.EXT_SIZE TOTAL_BYTES
     , (X.USED_DATA_EXT_COUNT + X.USED_META_EXT_COUNT ) * X.EXT_SIZE USED_BYTES
     , ROUND ( (X.USED_DATA_EXT_COUNT + X.USED_META_EXT_COUNT ) * 100/ X.TOTAL_EXT_COUNT , 2) USED_PCT
FROM
    (SELECT NVL( CLUSTER_GROUP_NAME  , '$VAR_GROUP_NAME'  ) G_NAME,
    	    NVL( CLUSTER_MEMBER_NAME , '$VAR_MEMBER_NAME' ) M_NAME,
    	    T.*
       FROM  X\$TABLESPACE_STAT T ) X
    INNER JOIN
    V\$TABLESPACE Y ON X.TBS_ID = Y.TBS_ID
;
"

MONITOR_SSA_STAT="
CREATE OR REPLACE VIEW MONITOR_SSA_STAT
(
	  CLUSTER_NAME
	, GROUP_NAME
	, MEMBER_NAME
	, TOTAL_BYTES
	, USED_BYTES
	, USED_PCT
)
AS
SELECT
      '$VAR_CLUSTER_NAME',
      GROUP_NAME,
      MEMBER_NAME,
      TOTAL_BYTES,
      USED_BYTES,
      ROUND(USED_BYTES*100/TOTAL_BYTES, 2) USED_PCT
FROM
(
      SELECT
             NVL( CLUSTER_GROUP_NAME  , '$VAR_GROUP_NAME'  ) GROUP_NAME,
             NVL( CLUSTER_MEMBER_NAME , '$VAR_MEMBER_NAME' ) MEMBER_NAME,
             (SELECT SUM( TO_NUMBER(VALUE) )
                FROM X\$PROPERTY
               WHERE PROPERTY_NAME = 'SHARED_MEMORY_STATIC_SIZE') TOTAL_BYTES
           , SUM(XK.VALUE) USED_BYTES

      FROM
          X\$KN_SYSTEM_INFO XK
      WHERE
          XK.NAME IN ('FIXED_STATIC_ALLOC_SIZE', 'VARIABLE_STATIC_ALLOC_SIZE' )
      GROUP BY CLUSTER_GROUP_NAME, CLUSTER_MEMBER_NAME
)
;
"

MONITOR_AGER_STAT="
CREATE OR REPLACE VIEW MONITOR_AGER_STAT
(
	  CLUSTER_NAME
	, GROUP_NAME
	, MEMBER_NAME
	, GLOBAL_GAP
	, GROUP_GAP
	, LOCAL_GAP
)
AS
SELECT
       '$VAR_CLUSTER_NAME'
     , NVL( CLUSTER_GROUP_NAME   , '$VAR_GROUP_NAME'  )
     , NVL( CLUSTER_MEMBER_NAME  , '$VAR_MEMBER_NAME' )
     , TO_NUMBER ( SPLIT_PART( AGABLE_SCN_GAP, '.', 1 ))
     , TO_NUMBER ( SPLIT_PART( AGABLE_SCN_GAP, '.', 2 ))
     , TO_NUMBER ( SPLIT_PART( AGABLE_SCN_GAP, '.', 3 ))
FROM X\$AGABLE_INFO@GLOBAL[IGNORE_INACTIVE_MEMBER];
"


MONITOR_SQL_STAT="
CREATE OR REPLACE VIEW MONITOR_SQL_STAT
(
	  CLUSTER_NAME
	, GROUP_NAME
	, MEMBER_NAME
	, STAT_NAME
	, STAT_VALUE
)
AS
SELECT
       '$VAR_CLUSTER_NAME'
     , NVL( CLUSTER_GROUP_NAME   , '$VAR_GROUP_NAME'  )
     , NVL( CLUSTER_MEMBER_NAME  , '$VAR_MEMBER_NAME' )
     , CAST( sysinfo.NAME AS VARCHAR(128 OCTETS) )       -- STAT_NAME
     , CAST( sysinfo.VALUE AS NUMBER )                   -- STAT_VALUE
  FROM
       FIXED_TABLE_SCHEMA.X\$SQL_SYSTEM_INFO@GLOBAL[IGNORE_INACTIVE_MEMBER] AS sysinfo
  WHERE sysinfo.CATEGORY = 20
UNION ALL
SELECT
        '$VAR_CLUSTER_NAME'
     , NVL( sysexec.CLUSTER_GROUP_NAME   , '$VAR_GROUP_NAME'  )
     , NVL( sysexec.CLUSTER_MEMBER_NAME  , '$VAR_MEMBER_NAME' )
     , CAST( 'COMMAND: ' || sysexec.STMT_TYPE AS VARCHAR(128 OCTETS) )   -- STAT_NAME
     , CAST( sysexec.EXECUTE_COUNT AS NUMBER )                           -- STAT_VALUE
  FROM
       FIXED_TABLE_SCHEMA.X\$SQL_SYSTEM_STAT_EXEC_STMT@GLOBAL[IGNORE_INACTIVE_MEMBER] AS sysexec
;
"


MONITOR_CLUSTER_DISPATCHER_DETAIL="
CREATE OR REPLACE VIEW MONITOR_CLUSTER_DISPATCHER_DETAIL
(
	  CLUSTER_NAME
	, GROUP_NAME
	, MEMBER_NAME
	, RX_BYTES
	, TX_BYTES
	, RX_JOBS
	, TX_JOBS
)
AS
SELECT
       '$VAR_CLUSTER_NAME'
     , NVL( CLUSTER_GROUP_NAME   , '$VAR_GROUP_NAME'  ) GROUP_NAME
     , NVL( CLUSTER_MEMBER_NAME  , '$VAR_MEMBER_NAME'  ) GROUP_NAME
     , SUM( RX_BYTES )
     , SUM( TX_BYTES )
     , SUM( RX_JOBS )
     , SUM( TX_JOBS )
FROM X\$CLUSTER_DISPATCHER
GROUP BY CLUSTER_GROUP_NAME, CLUSTER_MEMBER_NAME
;
"



MONITOR_CLUSTER_DISPATCHER="
CREATE OR REPLACE VIEW MONITOR_CLUSTER_DISPATCHER
(
	CLUSTER_NAME
	, GROUP_NAME
	, RX_BYTES
	, TX_BYTES
	, RX_JOBS
	, TX_JOBS
)
AS
SELECT
       '$VAR_CLUSTER_NAME'
     , NVL( CLUSTER_GROUP_NAME   , '$VAR_GROUP_NAME'  ) GROUP_NAME
     , TRUNC( AVG(RX_BYTES) )
     , TRUNC( AVG(TX_BYTES) )
     , TRUNC( AVG(RX_JOBS)  )
     , TRUNC( AVG(TX_JOBS)  )
FROM X\$CLUSTER_DISPATCHER
GROUP BY CLUSTER_GROUP_NAME
;
"



MONITOR_SESSION_DETAIL="
CREATE OR REPLACE VIEW MONITOR_SESSION_DETAIL
(
	CLUSTER_NAME
	, GROUP_NAME
	, MEMBER_NAME
	, SESSION_ID
	, SERIAL_NO
	, TRANS_ID
	, CONNECTION_TYPE
	, USER_NAME
	, PROCESS_ID
	, LOGON_TIME
	, PROGRAM_NAME
	, CLIENT_ADDRESS
	, CLIENT_PORT
	, IS_ACTIVE
)
AS
SELECT
       '$VAR_CLUSTER_NAME'
     , NVL( X.CLUSTER_GROUP_NAME   , '$VAR_GROUP_NAME'  ) GROUP_NAME
     , NVL( X.CLUSTER_MEMBER_NAME  , '$VAR_MEMBER_NAME'  ) MEMBER_NAME
     , TO_CHAR(X.ID)
     , SERIAL
     , TRANS_ID
     , CONNECTION
     , AUTHORIZATION_NAME
     , SERVER_PROCESS
     , LOGON_TIME
     , PROGRAM
     , NVL( ADDRESS , 'cluster peer' )
     , PORT
     , (CASE WHEN (NVL(Y.CNT, 0) > 0 OR X.TRANS_ID != -1 ) THEN 'ACTIVE' ELSE 'IDLE' END )
  FROM X\$SESSION@GLOBAL[IGNORE_INACTIVE_MEMBER] X
       LEFT OUTER JOIN (
       SELECT
              CLUSTER_MEMBER_ID
            , ID
            , COUNT(*) CNT
         FROM X\$STATEMENT@GLOBAL[IGNORE_INACTIVE_MEMBER]
        WHERE VIEW_SCN != '-1.-1.-1'
        GROUP BY CLUSTER_MEMBER_ID, ID
       ) Y
       ON  X.ID = Y.ID
       AND X.CLUSTER_MEMBER_ID = Y.CLUSTER_MEMBER_ID
       LEFT OUTER JOIN
       DEFINITION_SCHEMA.AUTHORIZATIONS@GLOBAL[IGNORE_INACTIVE_MEMBER] AS auth
       ON  X.USER_ID = auth.AUTH_ID
       AND X.CLUSTER_MEMBER_ID = auth.CLUSTER_MEMBER_ID
 WHERE USER_ID > 0
   AND STATUS IN ( 'CONNECTED', 'SIGNALED', 'SNIPED', 'DEAD' )
   AND PROGRAM != 'gmaster';
"



MONITOR_STATEMENT_DETAIL="
CREATE OR REPLACE VIEW MONITOR_STATEMENT_DETAIL
(
	CLUSTER_NAME
	, GROUP_NAME
	, MEMBER_NAME
	, SESSIONS_STMT_ID
	, PROGRAM_NAME
	, PROCESS_ID
	, STATUS
	, SQL_TEXT
	, ELASPED_SECONDS
)
AS
SELECT
       '$VAR_CLUSTER_NAME'
     , NVL( X.CLUSTER_GROUP_NAME   , '$VAR_GROUP_NAME'  ) GROUP_NAME
     , NVL( X.CLUSTER_MEMBER_NAME  , '$VAR_MEMBER_NAME'  ) MEMBER_NAME
     , TO_CHAR (X.SESSION_ID) || '-' || TO_CHAR(X.ID ) SESSIONS_STMT_ID
     , Y.PROGRAM
     , Y.SERVER_PROCESS
     , (CASE WHEN VIEW_SCN = '-1.-1.-1' THEN 'DONE' ELSE 'RUNNING' END ) STATUS
     , RPAD(SQL_TEXT, 64) SQL_TEXT
     , NVL(DATEDIFF(SECOND, START_TIME, SYSTIMESTAMP ), 0)  ELASPED_SECONDS
FROM X\$STATEMENT@GLOBAL[IGNORE_INACTIVE_MEMBER] X
     INNER JOIN
     X\$SESSION@GLOBAL[IGNORE_INACTIVE_MEMBER] Y
     ON X.SESSION_ID = Y.ID;
"


MONITOR_TRANSACTION_DETAIL="
CREATE OR REPLACE VIEW MONITOR_TRANSACTION_DETAIL
(
	  CLUSTER_NAME
	, GROUP_NAME
	, MEMBER_NAME
	, TRANS_ID
	, SESSION_ID
	, PROCESS_ID
	, PROGRAM_NAME
	, TRANS_STATE
	, IS_XA
	, ELAPSED_SECONDS
)
AS
SELECT
       '$VAR_CLUSTER_NAME'
     , NVL( X.CLUSTER_GROUP_NAME   , '$VAR_GROUP_NAME'   ) GROUP_NAME
     , NVL( X.CLUSTER_MEMBER_NAME  , '$VAR_MEMBER_NAME'  ) MEMBER_NAME
     , TO_CHAR(X.LOGICAL_TRANS_ID) TRANS_ID
     , Y.ID
     , Y.SERVER_PROCESS
     , Y.PROGRAM
     , X.STATE
     , DECODE(X.IS_XA, TRUE, 'TRUE', 'FALSE') IS_XA
     , NVL(DATEDIFF(SECOND, X.BEGIN_TIME, SYSTIMESTAMP ) ,0) ELAPSED_SECONDS
  FROM X\$TRANSACTION@GLOBAL[IGNORE_INACTIVE_MEMBER] X
       INNER JOIN
       X\$SESSION@GLOBAL[IGNORE_INACTIVE_MEMBER] Y
       ON  X.LOGICAL_TRANS_ID  = Y.TRANS_ID
       AND X.CLUSTER_MEMBER_ID = Y.CLUSTER_MEMBER_ID
;
"


MONITOR_SHARD_TAB_DISTRIBUTION="
CREATE OR REPLACE VIEW MONITOR_SHARD_TAB_DISTRIBUTION
(
	  CLUSTER_NAME
	, OWNER
	, TABLE_SCHEMA
	, TABLE_NAME
	, GROUP_NAME
	, ALLOC_BYTES
)
AS
SELECT '$VAR_CLUSTER_NAME'
       , X.OWNER
       , X.TABLE_SCHEMA
, X.TABLE_NAME, Y.GROUP_NAME,
       MIN ( BLOCKS ) * 8192 ALLOC_BYTES
  FROM ALL_CLUSTER_TABLES X INNER JOIN ALL_TAB_PLACE Y
   ON X.OWNER = Y.OWNER
   AND X.TABLE_SCHEMA = Y.TABLE_SCHEMA
   AND X.TABLE_NAME = Y.TABLE_NAME
WHERE SHARD_STRATEGY != 'CLONED'
GROUP BY X.OWNER, X.TABLE_SCHEMA, X.TABLE_NAME, Y.GROUP_NAME
ORDER BY 1,2,3,4;
"



MONITOR_SHARD_IND_DISTRIBUTION="
CREATE OR REPLACE VIEW MONITOR_SHARD_IND_DISTRIBUTION
(
	  CLUSTER_NAME
	, OWNER
	, TABLE_SCHEMA
	, TABLE_NAME
	, INDEX_NAME
	, GROUP_NAME
	, ALLOC_BYTES
)
AS
SELECT '$VAR_CLUSTER_NAME'
       , X.OWNER
       , X.TABLE_SCHEMA
       , X.TABLE_NAME
       , Y.INDEX_NAME
       , Y.GROUP_NAME,
       MIN ( BLOCKS ) * 8192 ALLOC_BYTES
  FROM ALL_CLUSTER_TABLES X INNER JOIN ALL_IND_PLACE Y
   ON X.OWNER = Y.OWNER
   AND X.TABLE_SCHEMA = Y.TABLE_SCHEMA
   AND X.TABLE_NAME = Y.TABLE_NAME
WHERE SHARD_STRATEGY != 'CLONED'
GROUP BY X.OWNER, X.TABLE_SCHEMA, X.TABLE_NAME, Y.INDEX_NAME, Y.GROUP_NAME
ORDER BY 1,2,3,4,5;
"


MONITOR_SHARD_TRANS="
CREATE OR REPLACE VIEW MONITOR_SHARD_TRANS
(
	CLUSTER_NAME
	, MEMBER_NAME
	, DRIVER_ID
	, DRIVER_COUNT
	, ID
	, SERIAL
	, TRANS_ID
	, TOP_LAYER
	, CONNECTION
	, USER_ID
	, LOGIN_USER_ID
	, STATUS
	, WATCH
	, SERVER
	, CLIENT_CHARSET
	, CLIENT_PROCESS
	, SERVER_PROCESS
	, LOGON_TIME
	, PROGRAM
	, ADDRESS
	, PORT
	, DRIVER_MEMBER_POS
	, DRIVER_SESSION_ID
	, DRIVER_SESSION_SERIAL
	, IN_FULL
	, IN_JOB
	, FAILOVER_TYPE
	, FAILED_OVER
)
AS
SELECT
      '$VAR_CLUSTER_NAME',
      NVL( S.CLUSTER_MEMBER_NAME , '$VAR_MEMBER_NAME' ) MEMBER_NAME,
      A.DRIVER_ID DRIVER_ID,
      A.DRIVER_COUNT DRIVER_COUNT,
      S.ID ID,
      S.SERIAL SERIAL,
      S.TRANS_ID TRANS_ID,
      S.TOP_LAYER TOP_LAYER,
      S.CONNECTION CONNECTION,
      S.USER_ID,
      S.LOGIN_USER_ID,
      S.STATUS,
      S.WATCH,
      S.SERVER,
      S.CLIENT_CHARSET,
      S.CLIENT_PROCESS,
      S.SERVER_PROCESS,
      S.LOGON_TIME,
      S.PROGRAM,
      S.ADDRESS,
      S.PORT,
      S.DRIVER_MEMBER_POS,
      S.DRIVER_SESSION_ID,
      S.DRIVER_SESSION_SERIAL,
      S.IN_FULL,
      S.IN_JOB,
      S.FAILOVER_TYPE,
      S.FAILED_OVER
FROM (
      SELECT DRIVER_TRANS_ID AS DRIVER_ID, COUNT(1) AS DRIVER_COUNT
        FROM X\$TRANSACTION@GLOBAL[IGNORE_INACTIVE_MEMBER]
       WHERE DRIVER_TRANS_ID IN (
                                 SELECT DISTINCT(DRIVER_TRANS_ID)
                                   FROM X\$TRANSACTION@GLOBAL[IGNORE_INACTIVE_MEMBER]
                                )
      GROUP BY DRIVER_TRANS_ID
     ) A, X\$SESSION@GLOBAL[IGNORE_INACTIVE_MEMBER] S
WHERE S.TRANS_ID = A.DRIVER_ID
  AND A.DRIVER_COUNT >= 2
;
"


MONITOR_LOCK_WAIT="
CREATE OR REPLACE VIEW MONITOR_LOCK_WAIT
(
      CLUSTER_NAME
    , GRANTED_MEMBER_NAME
    , GRANTED_ID
    , GRANTED_SERIAL
    , GRANTED_PROGRAM
    , GRANTED_PROCESS_ID
    , REQUESTED_MEMBER_NAME
    , REQUESTED_ID
    , REQUESTED_SERIAL
    , REQUESTED_PROGRAM
    , REQUESTED_PROCESS_ID
)
AS
select
      '$VAR_CLUSTER_NAME'
      -- NVL for standalone
    , NVL( x.cluster_member_name , '$VAR_MEMBER_NAME' ) 
    , x.id
    , x.serial
    , x.program
    , x.client_process
    , y.request_member_name
    , y.id
    , y.serial
    , y.program
    , y.client_process
from
x\$session x,
(
        select
           -- for cluster
           i.local_member_name granted_member_name
         , gs.driver_session_id
         , gs.driver_session_serial
         , lw.cluster_member_name request_member_name
         , rs.id
         , rs.serial
         , rs.program
         , rs.client_process
      from
            x\$session gs
          , x\$session rs
          , x\$lock_wait lw
          , x\$instance i
     where
          lw.cluster_member_name = gs.cluster_member_name
      and gs.id                  = lw.granted_transaction_slot_id
      and rs.id                  = lw.request_transaction_slot_id
      and gs.driver_member_pos   = i.local_member_position
      and gs.driver_member_pos > 0
    union all
    select
           -- for standalone, and granted, request on same member ( cluster )
           '$VAR_MEMBER_NAME'
         , gs.id
         , gs.serial
         , '$VAR_MEMBER_NAME'
         , rs.id
         , rs.serial
         , rs.program
         , rs.client_process
      from
          x\$session    gs,
          x\$session    rs,
          x\$lock_wait  lw,
     where
           gs.id = lw.granted_transaction_slot_id
       and rs.id = lw.request_transaction_slot_id
       and gs.driver_member_pos = -1 
) y
where
    -- NVL for standalone
    NVL( x.cluster_member_name , '$VAR_MEMBER_NAME' ) = NVL( y.granted_member_name , '$VAR_MEMBER_NAME' )
and x.id                  = y.driver_session_id
and x.serial              = y.driver_session_serial
;
"




