# This sample procfilter configuration can be copied in the /etc/telegraf/telegraf.d/ directory.
# The grafana.json can then be used to query measurements output by the procfilter plugin to an influxDB server and display sample dashboards.
# You can take a look at the result there:
#   https://snapshot.raintank.io/dashboard/snapshot/PLaOGAJDBNlCIredFhBwhmauk7Vn3MOb
#

# Monitor process cpu and memory usage with filters and aggregation
[[inputs.procfilter]]
  ## Describe what you want to measure in the script.
  measurement_prefix = "pf."
  script_file = ""
  script = """
     # Find ressource hogs.
     top.cmd.cpu = tag(cmd) field(cpu,rss,vsz,swap,cmd_line) <- top(cpu,3)
     top.cmd.rss = tag(cmd) field(rss) <- top(rss,3)
     top.cmd.swap = tag(cmd) field(cpu,rss,vsz,swap,cmd_line) <- top(swap,3)
     top.cmd.thread_nb = tag(cmd) field(cpu,rss,vsz,swap,thread_nb,cmd_line) <- top(thread_nb,3)

     # Pack by user.
     top.by.user.cpu = tag(user) field(cpu) <- top(cpu,3,by(user))
     top.by.user.rss = tag(user) field(rss) <- top(rss,3,by(user))
     top.by.user.swap = tag(user) field(swap) <- top(swap,3,by(user))
     top.by.user.process_nb = tag(user) field(process_nb) <- top(process_nb,3,by(user))

     # Pack by workloads.
     wl.influx = field(process_nb,cpu,rss,vsz,swap) <- pack(cmd('influxdb'r),user('influxdb'))
     wl.telegraf = field(process_nb,cpu,rss,vsz,swap) <- pack(user('telegraf'))
     wl.root = field(process_nb,cpu,rss,vsz,swap) <- pack(user(0))
     wl._other = field(process_nb,cpu,rss,vsz,swap) <- pack(not(filters('^wl[.]'r)))
   """
