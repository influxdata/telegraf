syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2019-04-01 13:49:25
// ProtoYang-version 1
// module huawei-ifm
// revision 2018-11-23
// revision 2018-06-11
// revision 2017-12-23
// revision 2017-03-23
// revision 2013-01-01
// namespace http://www.huawei.com/netconf/vrp/huawei-ifm

package huawei_ifm;

option go_package = "github.com/influxdata/telegraf/plugins/parsers/huawei_grpc_gpb/telemetry_proto/huawei_ifm";


message Ifm {
   message Interfaces {
      message Interface {
         enum IfAdminStatus {
            IfAdminStatus_DOWN = 0;
            IfAdminStatus_UP = 1;
         };
         IfAdminStatus ifAdminStatus = 5;
         message IfClearedStat {
            uint64 sendByte = 29;
            uint64 sendPacket = 36;
            message IfMacMtuDiscardStat {
               uint64 statisticsMacIpv4 = 1;
               uint64 statisticsMacIpv6 = 2;
               uint64 statisticsMtuIpv4 = 3;
               uint64 statisticsMtuIpv6 = 4;
            }
            IfMacMtuDiscardStat ifMacMtuDiscardStat = 37;
            uint32 ifOperStatItvl = 38;
            uint64 inBitRate = 39;
            uint64 inByteRate = 40;
            uint64 inPacketRate = 41;
            string inUseRate = 42;
            uint64 outBitRate = 43;
            uint64 outByteRate = 44;
            uint64 outPacketRate = 45;
            string outUseRate = 46;
            uint64 rcvBroadBit = 47;
            uint64 rcvBroadBitRate = 48;
            uint64 rcvBroadPacket = 49;
            uint64 rcvBroadPacketRate = 50;
            uint64 rcvDropPacket = 51;
            uint64 rcvErrorPacket = 52;
            uint64 rcvMutiBit = 53;
            uint64 rcvMutiBitRate = 54;
            uint64 rcvMutiPacket = 55;
            uint64 rcvMutiPacketRate = 56;
            uint64 rcvUniBit = 57;
            uint64 rcvUniBitRate = 58;
            uint64 rcvUniPacket = 59;
            uint64 rcvUniPacketRate = 60;
            uint64 receiveByte = 61;
            uint64 receivePacket = 62;
            uint64 sendBroadBit = 63;
            uint64 sendBroadBitRate = 64;
            uint64 sendBroadPacket = 65;
            uint64 sendBroadPacketRate = 66;
            uint64 sendDropPacket = 67;
            uint64 sendErrorPacket = 68;
            uint64 sendMutiBit = 69;
            uint64 sendMutiBitRate = 70;
            uint64 sendMutiPacket = 71;
            uint64 sendMutiPacketRate = 72;
            uint64 sendUniBit = 73;
            uint64 sendUniBitRate = 74;
            uint64 sendUniPacket = 75;
            uint64 sendUniPacketRate = 76;
         }
         IfClearedStat ifClearedStat = 9;
         message IfDynamicInfo {
            enum IfOperStatus {
               IfOperStatus_DOWN = 0;
               IfOperStatus_UP = 1;
            };
            IfOperStatus ifOperStatus = 5;
            bool ifCtrlFlapDamp = 6;
            enum IfLinkQualityGrade {
               IfLinkQualityGrade_GOOD = 0;
               IfLinkQualityGrade_HIGH = 1;
               IfLinkQualityGrade_LOW = 2;
               IfLinkQualityGrade_MIDDLE = 3;
            };
            IfLinkQualityGrade ifLinkQualityGrade = 7;
            enum IfLinkStatus {
               IfLinkStatus_DOWN = 0;
               IfLinkStatus_UP = 1;
            };
            IfLinkStatus ifLinkStatus = 8;
            string ifOperMac = 9;
            uint64 ifOperSpeed = 10;
            uint32 ifOpertMTU = 11;
            enum IfPhyStatus {
               IfPhyStatus_DOWN = 0;
               IfPhyStatus_UP = 1;
            };
            IfPhyStatus ifPhyStatus = 12;
            enum IfV4State {
               IfV4State_DOWN = 0;
               IfV4State_UP = 1;
            };
            IfV4State ifV4State = 13;
            enum IfV6State {
               IfV6State_DOWN = 0;
               IfV6State_UP = 1;
            };
            IfV6State ifV6State = 14;
            bool isOffline = 15;
            string lineProtocolUpTime = 16;
            uint32 subIfCount = 17;
         }
         IfDynamicInfo ifDynamicInfo = 13;
         uint32 ifIndex = 16;
         string ifName = 25;
         message IfStatistics {
            uint64 rcvBroadPacket = 2;
            uint64 rcvDropPacket = 3;
            uint64 rcvErrorPacket = 4;
            uint64 rcvMutiPacket = 5;
            uint64 rcvUniPacket = 6;
            uint64 receiveByte = 7;
            uint64 receivePacket = 8;
            uint64 sendBroadPacket = 9;
            uint64 sendByte = 10;
            uint64 sendDropPacket = 11;
            uint64 sendErrorPacket = 12;
            uint64 sendMutiPacket = 13;
            uint64 sendPacket = 14;
            uint64 sendUniPacket = 15;
            uint64 in_realtime_bit_rate = 17;
            uint64 out_realtime_bit_rate = 18;
            message EthPortErrSts {
               uint64 rxAlignment = 1;
               uint64 rxCRC = 2;
               uint64 rxFragment = 3;
               uint64 rxInrangeLen = 4;
               uint64 rxJabber = 5;
               uint64 rxJumboOctets = 6;
               uint64 rxLong = 7;
               uint64 rxOverrun = 8;
               uint64 rxPause = 9;
               uint64 rxSymbol = 10;
               uint64 rxUndersize = 11;
               uint64 txJumboOctets = 12;
               uint64 txLost = 13;
               uint64 txOverrun = 14;
               uint64 txPause = 15;
               uint64 txSystem = 16;
               uint64 txUnderrun = 17;
            }
            EthPortErrSts ethPortErrSts = 16;
         }
         IfStatistics ifStatistics = 35;
         uint32 downDelayTime = 36;
         message FlowAlarm {
            uint32 unknownUnicastAlarm = 1;
         }
         FlowAlarm flowAlarm = 37;
         message ForwardMode {
            enum VeForwarMode {
               VeForwarMode_HALFX_THROUGH = 0;
               VeForwarMode_INVALID = 1;
               VeForwarMode_LOOPBACK = 2;
               VeForwarMode_THROUGH = 3;
            };
            VeForwarMode veForwarMode = 1;
         }
         ForwardMode forwardMode = 38;
         message Fr {
            message Dlcis {
               uint32 dlci = 1;
            }
            Dlcis dlcis = 1;
            message IfLink {
               uint32 timeInternal = 1;
            }
            IfLink ifLink = 2;
            enum IfType {
               IfType_DCE = 0;
               IfType_DTE = 1;
               IfType_NNI = 2;
            };
            IfType ifType = 3;
            enum LmiType {
               LmiType_ANSI = 0;
               LmiType_NONSTANDARD = 1;
               LmiType_Q933A = 2;
            };
            LmiType lmiType = 4;
            uint32 n391dte = 5;
            uint64 n392dce = 6;
            uint64 n392dte = 7;
            uint64 n393dce = 8;
            uint32 n393dte = 9;
            uint64 t392dce = 10;
         }
         Fr fr = 39;
         message Hdlc {
            bool downWhenLoop = 1;
            message IfLink {
               uint32 timeInternal = 1;
            }
            IfLink ifLink = 2;
         }
         Hdlc hdlc = 40;
         uint32 ifBandwidth = 41;
         message IfCeIpStatiEnable {
            enum IfIpStatiEnable {
               IfIpStatiEnable_DISABLE = 0;
               IfIpStatiEnable_ENABLE = 1;
               IfIpStatiEnable_INBOUND = 2;
               IfIpStatiEnable_OUTBOUND = 3;
            };
            IfIpStatiEnable ifIpStatiEnable = 1;
            enum IfIpStatiIpv4Enable {
               IfIpStatiIpv4Enable_DISABLE = 0;
               IfIpStatiIpv4Enable_ENABLE = 1;
               IfIpStatiIpv4Enable_INBOUND = 2;
               IfIpStatiIpv4Enable_OUTBOUND = 3;
            };
            IfIpStatiIpv4Enable ifIpStatiIpv4Enable = 2;
            enum IfIpStatiIpv6Enable {
               IfIpStatiIpv6Enable_DISABLE = 0;
               IfIpStatiIpv6Enable_ENABLE = 1;
               IfIpStatiIpv6Enable_INBOUND = 2;
               IfIpStatiIpv6Enable_OUTBOUND = 3;
            };
            IfIpStatiIpv6Enable ifIpStatiIpv6Enable = 3;
         }
         IfCeIpStatiEnable ifCeIpStatiEnable = 42;
         message IfCeIpStatisticsInfo {
            uint64 receiveIpv4Bit = 1;
            uint64 receiveIpv4BitRate = 2;
            uint64 receiveIpv4Packet = 3;
            uint64 receiveIpv4PacketRate = 4;
            uint64 receiveIpv6Bit = 5;
            uint64 receiveIpv6BitRate = 6;
            uint64 receiveIpv6Packet = 7;
            uint64 receiveIpv6PacketRate = 8;
            uint64 sendIpv4Bit = 9;
            uint64 sendIpv4BitRate = 10;
            uint64 sendIpv4Packet = 11;
            uint64 sendIpv4PacketRate = 12;
            uint64 sendIpv6Bit = 13;
            uint64 sendIpv6BitRate = 14;
            uint64 sendIpv6Packet = 15;
            uint64 sendIpv6PacketRate = 16;
         }
         IfCeIpStatisticsInfo ifCeIpStatisticsInfo = 43;
         enum IfCfgEncapType {
            IfCfgEncapType_IETF = 0;
            IfCfgEncapType_NONSTANDARD = 1;
         };
         IfCfgEncapType ifCfgEncapType = 44;
         string ifCfgMac = 45;
         enum IfClass {
            IfClass_MAININTERFACE = 0;
            IfClass_SUBINTERFACE = 1;
         };
         IfClass ifClass = 46;
         message IfControlFlap {
            uint32 ifCeiling = 1;
            bool ifCtrlFlapEnbl = 2;
            uint32 ifDecayNg = 3;
            uint32 ifDecayOk = 4;
            uint32 ifReuse = 5;
            uint32 ifSuppress = 6;
         }
         IfControlFlap ifControlFlap = 47;
         string ifDescr = 48;
         bool ifDf = 49;
         message IfErrorDown {
            enum ErrorDownCause {
               ErrorDownCause_AUTOX_DEFEND = 0;
               ErrorDownCause_BPDUX_PROTECTION = 1;
               ErrorDownCause_CRCX_STATISTICS = 2;
               ErrorDownCause_DUALX_ACTIVE = 3;
               ErrorDownCause_FABRICX_LINKX_FAILURE = 4;
               ErrorDownCause_FABRICX_UPLINKX_THRESHOLD = 5;
               ErrorDownCause_FORWARDX_ENGINEX_BUFFERX_FAILED = 6;
               ErrorDownCause_FORWARDX_ENGINEX_INTERFACEX_FAILED = 7;
               ErrorDownCause_INVALID = 8;
               ErrorDownCause_L2X_LOOPX_OCCURED = 9;
               ErrorDownCause_LEAFX_MSTP = 10;
               ErrorDownCause_LINKX_FLAP = 11;
               ErrorDownCause_LOOPBACKX_DETECT = 12;
               ErrorDownCause_MACX_ADDRESSX_FLAPPING = 13;
               ErrorDownCause_MONITORX_LINK = 14;
               ErrorDownCause_MX_LAG = 15;
               ErrorDownCause_MX_LAGX_CONSISTENCYX_CHECK = 16;
               ErrorDownCause_NOX_STACKX_LINK = 17;
               ErrorDownCause_PORTSECX_REACHEDLIMIT = 18;
               ErrorDownCause_RESOURCEX_MISMATCH = 19;
               ErrorDownCause_SPINEX_MEMBERX_EXCEEDX_LIMIT = 20;
               ErrorDownCause_SPINEX_TYPEX_UNSUPPORTED = 21;
               ErrorDownCause_STACKX_CONFIGX_CONFLICT = 22;
               ErrorDownCause_STACKX_MEMBERX_EXCEEDX_LIMIT = 23;
               ErrorDownCause_STACKX_PACKETX_DEFENSIVE = 24;
               ErrorDownCause_STORMX_CONTROL = 25;
               ErrorDownCause_TRANSCEIVERX_POWERX_LOW = 26;
            };
            ErrorDownCause errorDownCause = 1;
            uint32 recoveryTime = 2;
            uint32 remainderTime = 3;
         }
         IfErrorDown ifErrorDown = 50;
         message IfIpIcmpStatistics {
            uint64 dropDirectedBroadcast = 1;
            uint64 echoReply = 2;
            uint64 echoRequest = 3;
            uint64 forwardDirectedBroadcast = 4;
            uint64 informationReply = 5;
            uint64 informationRequest = 6;
            uint64 inputByte = 7;
            uint64 inputICMPPacket = 8;
            uint64 inputMulticast = 9;
            uint64 inputPacket = 10;
            uint64 invalidTTLPacket = 11;
            uint64 ipHeaderBad = 12;
            uint64 netmaskReply = 13;
            uint64 netmaskRequest = 14;
            uint64 outputByte = 15;
            uint64 outputMulticast = 16;
            uint64 outputPacket = 17;
            uint64 receiveDirectedBroadcast = 18;
            uint64 routerAdvert = 19;
            uint64 routerSolicit = 20;
            uint64 routingRedirect = 21;
            uint64 sendDirectedBroadcast = 22;
            uint64 sourceQuench = 23;
            uint64 timeExceed = 24;
            uint64 timestampReply = 25;
            uint64 timestampRequest = 26;
            uint64 ttlBeingOne = 27;
            uint64 unknownType = 28;
            uint64 unreachable = 29;
         }
         IfIpIcmpStatistics ifIpIcmpStatistics = 51;
         message IfIpStatiCfg {
            bool ifIpStatiEnable = 1;
            enum IfIpStatiMode {
               IfIpStatiMode_MAC = 0;
               IfIpStatiMode_FORWARD = 1;
            };
            IfIpStatiMode ifIpStatiMode = 2;
         }
         IfIpStatiCfg ifIpStatiCfg = 52;
         enum IfLinkProtocol {
            IfLinkProtocol_ATM = 0;
            IfLinkProtocol_ETHERNET = 1;
            IfLinkProtocol_FR = 2;
            IfLinkProtocol_HDLC = 3;
            IfLinkProtocol_INVALID = 4;
            IfLinkProtocol_PPP = 5;
            IfLinkProtocol_TDM = 6;
         };
         IfLinkProtocol ifLinkProtocol = 53;
         string ifMainIfDescr = 54;
         message IfMru {
            uint32 mru = 1;
         }
         IfMru ifMru = 55;
         message IfMruDiscardStat {
            uint64 dropByte = 1;
            uint64 dropPack = 2;
         }
         IfMruDiscardStat ifMruDiscardStat = 56;
         message IfMruStatEnable {
            bool mruStatEn = 1;
         }
         IfMruStatEnable ifMruStatEnable = 57;
         uint32 ifMtu = 58;
         enum IfNetworkLayerStatus {
            IfNetworkLayerStatus_IPV4ANDIPV6DOWN = 0;
            IfNetworkLayerStatus_IPV4ANDIPV6UP = 1;
         };
         IfNetworkLayerStatus ifNetworkLayerStatus = 59;
         string ifNumber = 60;
         enum IfOperEncapType {
            IfOperEncapType_DOT1Q = 0;
            IfOperEncapType_DOT1QPOLICY = 1;
            IfOperEncapType_EVCDEFAULT = 2;
            IfOperEncapType_EVCDOT1Q = 3;
            IfOperEncapType_EVCDOT1QPOLICY = 4;
            IfOperEncapType_EVCQINQ = 5;
            IfOperEncapType_EVCUNTAG = 6;
            IfOperEncapType_IETF = 7;
            IfOperEncapType_INVALID = 8;
            IfOperEncapType_L2VC = 9;
            IfOperEncapType_L2VE = 10;
            IfOperEncapType_L3VC = 11;
            IfOperEncapType_L3VE = 12;
            IfOperEncapType_L3VEACC = 13;
            IfOperEncapType_L3VETER = 14;
            IfOperEncapType_NONSTANDARD = 15;
            IfOperEncapType_P2MP = 16;
            IfOperEncapType_P2P = 17;
            IfOperEncapType_QINQ = 18;
            IfOperEncapType_QINQLINK = 19;
            IfOperEncapType_QINQMAPPING = 20;
            IfOperEncapType_SOFTGREVE = 21;
            IfOperEncapType_STACKINGPOLICY = 22;
            IfOperEncapType_UNTAGPOLICY = 23;
            IfOperEncapType_USERVLAN = 24;
            IfOperEncapType_USERVLANANY = 25;
            IfOperEncapType_VLANTYPE = 26;
            IfOperEncapType_VLANTYPEPOLICY = 27;
         };
         IfOperEncapType ifOperEncapType = 61;
         string ifParentIfName = 62;
         enum IfPhyType {
            IfPhyType_ATM = 0;
            IfPhyType_ATMX_BUNDLE = 1;
            IfPhyType_CPOS = 2;
            IfPhyType_CPOSX_TRUNK = 3;
            IfPhyType_DCNINTERFACE = 4;
            IfPhyType_E1 = 5;
            IfPhyType_E3 = 6;
            IfPhyType_ETHERNET = 7;
            IfPhyType_ETHX_TRUNK = 8;
            IfPhyType_FABRICX_PORT = 9;
            IfPhyType_FC = 10;
            IfPhyType_FCOEX_PORT = 11;
            IfPhyType_FIBERX_CHANNEL = 12;
            IfPhyType_FLEXE = 13;
            IfPhyType_FLEXEX_100G = 14;
            IfPhyType_FLEXEX_200GE = 15;
            IfPhyType_FLEXEX_400G = 16;
            IfPhyType_FLEXEX_50G = 17;
            IfPhyType_FLEXEX_50X_100G = 18;
            IfPhyType_GEBRIEF = 19;
            IfPhyType_GIGABITETHERNET = 20;
            IfPhyType_GLOBALX_IMAX_GROUP = 21;
            IfPhyType_GLOBALX_MPX_GROUP = 22;
            IfPhyType_GLOBALX_VE = 23;
            IfPhyType_GMPLSX_UNI = 24;
            IfPhyType_HPGE = 25;
            IfPhyType_IMAX_GROUP = 26;
            IfPhyType_IMETH = 27;
            IfPhyType_INFINIBAND = 28;
            IfPhyType_IPX_TRUNK = 29;
            IfPhyType_LMPIF = 30;
            IfPhyType_LOOPBACK = 31;
            IfPhyType_METH = 32;
            IfPhyType_MPX_GROUP = 33;
            IfPhyType_MTUNNEL = 34;
            IfPhyType_NULL = 35;
            IfPhyType_NVE = 36;
            IfPhyType_OTN = 37;
            IfPhyType_POS = 38;
            IfPhyType_POSX_TRUNK = 39;
            IfPhyType_PWX_VE = 40;
            IfPhyType_REMOTEX_AP = 41;
            IfPhyType_SERIAL = 42;
            IfPhyType_SERVICEIF = 43;
            IfPhyType_SIP = 44;
            IfPhyType_STACKX_PORT = 45;
            IfPhyType_T1 = 46;
            IfPhyType_T3 = 47;
            IfPhyType_TRUNKX_SERIAL = 48;
            IfPhyType_TUNNEL = 49;
            IfPhyType_VBDIF = 50;
            IfPhyType_VBRIDGE = 51;
            IfPhyType_VC12 = 52;
            IfPhyType_VC4 = 53;
            IfPhyType_VIRTUALX_ETHERNET = 54;
            IfPhyType_VIRTUALX_ODUK = 55;
            IfPhyType_VIRTUALX_SERIAL = 56;
            IfPhyType_VIRTUALX_TEMPLATE = 57;
            IfPhyType_VLANIF = 58;
            IfPhyType_VMETH = 59;
            IfPhyType_VP = 60;
            IfPhyType_VXX_TUNNEL = 61;
            IfPhyType_WDM = 62;
            IfPhyType_XGIGABITETHERNET = 63;
            IfPhyType_X_100GE = 64;
            IfPhyType_X_10GE = 65;
            IfPhyType_X_10X10GE = 66;
            IfPhyType_X_200GE = 67;
            IfPhyType_X_25GE = 68;
            IfPhyType_X_3X40GE = 69;
            IfPhyType_X_400GE = 70;
            IfPhyType_X_40GE = 71;
            IfPhyType_X_4X10GE = 72;
            IfPhyType_X_4X25GE = 73;
            IfPhyType_X_50GE = 74;
            IfPhyType_X_50X_100GE = 75;
         };
         IfPhyType ifPhyType = 63;
         string ifPosition = 64;
         enum IfRouterType {
            IfRouterType_BROADCAST = 0;
            IfRouterType_INVALID = 1;
            IfRouterType_NBMA = 2;
            IfRouterType_PTOMP = 3;
            IfRouterType_PTOP = 4;
         };
         IfRouterType ifRouterType = 65;
         enum IfServiceType {
            IfServiceType_BUNDLEMEMBER = 0;
            IfServiceType_CPOSTRUNKMEMBER = 1;
            IfServiceType_FABRICMEMBER = 2;
            IfServiceType_GLOBALIMAMEMBER = 3;
            IfServiceType_GLOBALMPMEMBER = 4;
            IfServiceType_IMAMEMBER = 5;
            IfServiceType_LAGMASTERMEMBER = 6;
            IfServiceType_LAGSLAVEMEMBER = 7;
            IfServiceType_MPMEMBER = 8;
            IfServiceType_NONE = 9;
            IfServiceType_POSTRUNKMEMBER = 10;
            IfServiceType_STACKMEMBER = 11;
            IfServiceType_TRUNKMEMBER = 12;
            IfServiceType_VBRIDGEMEMBER = 13;
         };
         IfServiceType ifServiceType = 66;
         uint32 ifStatItvl = 67;
         bool ifStatiEnable = 68;
         message IfTcpMss {
            uint32 tcpmss = 1;
         }
         IfTcpMss ifTcpMss = 69;
         message IfTrackRtMtg {
            uint32 downWeight = 1;
            string routeMtgName = 2;
         }
         IfTrackRtMtg ifTrackRtMtg = 70;
         bool ifTrapEnable = 71;
         message IfTrapThreshold {
            uint32 inputResumeRate = 1;
            uint32 inputRisingRate = 2;
            uint32 outputResumeRate = 3;
            uint32 outputRisingRate = 4;
         }
         IfTrapThreshold ifTrapThreshold = 72;
         string ifTrunkIfName = 73;
         message Ipv4Config {
            enum AddrCfgType {
               AddrCfgType_CONFIG = 0;
               AddrCfgType_NEGOTIATION = 1;
               AddrCfgType_UNNUMBERED = 2;
            };
            AddrCfgType addrCfgType = 1;
            message Am4CfgAddrs {
               message Am4CfgAddr {
                  enum AddrType {
                     AddrType_MAIN = 0;
                     AddrType_NAP = 1;
                     AddrType_NEG = 2;
                     AddrType_NEG_REMOTE = 3;
                     AddrType_SUB = 4;
                     AddrType_UNNUMBER = 5;
                  };
                  AddrType addrType = 1;
                  string ifIpAddr = 2;
                  string subnetMask = 3;
                  uint32 tag = 5;
               }
               repeated Am4CfgAddr am4CfgAddr = 1;
            }
            Am4CfgAddrs am4CfgAddrs = 2;
            string unNumIfName = 3;
         }
         Ipv4Config ipv4Config = 74;
         message Ipv4Oper {
            message Ipv4Addrs {
               message Ipv4Addr {
                  enum AddrType {
                     AddrType_MAIN = 0;
                     AddrType_NAP = 1;
                     AddrType_NEG = 2;
                     AddrType_NEG_REMOTE = 3;
                     AddrType_SUB = 4;
                     AddrType_UNNUMBER = 5;
                  };
                  AddrType addrType = 1;
                  string ifIpAddr = 2;
                  bool isIpBlock = 3;
                  string subnetMask = 4;
                  uint32 tag = 5;
               }
               repeated Ipv4Addr ipv4Addr = 1;
            }
            Ipv4Addrs ipv4Addrs = 1;
         }
         Ipv4Oper ipv4Oper = 75;
         message Ipv6Config {
            message Am6CfgAddrs {
               message Am6CfgAddr {
                  uint32 addrPrefixLen = 1;
                  enum AddrType6 {
                     AddrType6_ANYCAST = 0;
                     AddrType6_EUI64 = 1;
                     AddrType6_GLOBAL = 2;
                     AddrType6_LINKLOCAL = 3;
                     AddrType6_NDPREFIX = 4;
                  };
                  AddrType6 addrType6 = 2;
                  uint32 collisionCount = 3;
                  enum IfIDGenType {
                     IfIDGenType_CGA = 0;
                     IfIDGenType_EUI64 = 1;
                     IfIDGenType_NONE = 2;
                  };
                  IfIDGenType ifIDGenType = 4;
                  string ifIp6Addr = 5;
               }
               repeated Am6CfgAddr am6CfgAddr = 1;
            }
            Am6CfgAddrs am6CfgAddrs = 1;
            message Am6CgaInfos {
               message Am6CgaInfo {
                  string modifier = 1;
                  string rsaKeyLabel = 2;
                  uint32 secLevel = 3;
               }
               repeated Am6CgaInfo am6CgaInfo = 1;
            }
            Am6CgaInfos am6CgaInfos = 2;
            bool autoLinkLocal = 3;
            bool enableFlag = 4;
            uint32 ifMtu6 = 5;
            bool spreadMtu6Flag = 6;
         }
         Ipv6Config ipv6Config = 76;
         message Ipv6Oper {
            uint32 ifOperMtu6 = 1;
            message Ipv6Addrs {
               message Ipv6Addr {
                  uint32 addrPrefixLen = 1;
                  enum AddrType6 {
                     AddrType6_ANYCAST = 0;
                     AddrType6_EUI64 = 1;
                     AddrType6_GLOBAL = 2;
                     AddrType6_LINKLOCAL = 3;
                     AddrType6_NDPREFIX = 4;
                  };
                  AddrType6 addrType6 = 2;
                  uint32 collisionCount = 3;
                  enum IfIDGenType {
                     IfIDGenType_CGA = 0;
                     IfIDGenType_EUI64 = 1;
                     IfIDGenType_NONE = 2;
                  };
                  IfIDGenType ifIDGenType = 4;
                  string ifIp6Addr = 5;
                  bool isIpBlock = 6;
                  enum Status {
                     Status_DUPLICATE = 0;
                     Status_INACCESSIBLE = 1;
                     Status_PREFERRED = 2;
                     Status_TENTATIVE = 3;
                     Status_UNKNOWN = 4;
                  };
                  Status status = 7;
               }
               repeated Ipv6Addr ipv6Addr = 1;
            }
            Ipv6Addrs ipv6Addrs = 2;
         }
         Ipv6Oper ipv6Oper = 77;
         bool isActorBearSrv = 78;
         bool isAvailable = 79;
         bool isL2SwitchPort = 80;
         bool l2SubIfFlag = 81;
         uint32 l2SwitchPortIndex = 82;
         message MainIpAddr {
            string ifIpAddr = 1;
            enum IpAddrCfgType {
               IpAddrCfgType_CONFIG = 0;
               IpAddrCfgType_DELETE = 1;
            };
            IpAddrCfgType ipAddrCfgType = 2;
            string subnetMask = 3;
         }
         MainIpAddr mainIpAddr = 83;
         message NetSlices {
            message NetSlice {
               uint32 sliceInstanceId = 1;
               string sliceInstanceName = 2;
            }
            repeated NetSlice netSlice = 1;
         }
         NetSlices netSlices = 84;
         message PhyDampIfCfg {
            bool dampIgnoreGlobal = 1;
            bool ifDampEnable = 2;
            enum IfDampLevel {
               IfDampLevel_HEAVY = 0;
               IfDampLevel_LIGHT = 1;
               IfDampLevel_MANUAL = 2;
               IfDampLevel_MIDDLE = 3;
            };
            IfDampLevel ifDampLevel = 3;
            bool ifDampTxOff = 4;
            uint32 ifHalfLifePeriod = 5;
            uint32 ifMaxSuppressTime = 6;
            uint32 ifReuse = 7;
            uint32 ifSuppress = 8;
         }
         PhyDampIfCfg phyDampIfCfg = 85;
         message PhyDampIfOper {
            uint32 currentPenalty = 1;
            uint32 dampReuseTime = 2;
            uint32 ifHalfLifePeriod = 3;
            uint32 ifMaxPenalty = 4;
            uint32 ifMaxSuppressTime = 5;
            uint32 ifReuse = 6;
            uint32 ifSuppress = 7;
            enum IfSuppressStatus {
               IfSuppressStatus_SUPPRESSED = 0;
               IfSuppressStatus_UNSUPPRESSED = 1;
            };
            IfSuppressStatus ifSuppressStatus = 8;
         }
         PhyDampIfOper phyDampIfOper = 86;
         message PhyIfMacStat {
            bool phyIfMacStatEnable = 1;
         }
         PhyIfMacStat phyIfMacStat = 87;
         enum PortMode {
            PortMode_L2 = 0;
            PortMode_L3 = 1;
            PortMode_MIX = 2;
         };
         PortMode portMode = 88;
         message Ppp {
            string chapPaswrd = 1;
            string chapUserName = 2;
            message CrcParam {
               uint32 bitAlaCof = 1;
               uint32 bitAlaPow = 2;
               uint32 bitResCof = 3;
               uint32 bitResPow = 4;
               uint32 childAlarmNum = 5;
               uint32 childMaxNum = 6;
               uint32 childResmNum = 7;
               enum CrcBit {
                  CrcBit_X_16 = 0;
                  CrcBit_X_32 = 1;
               };
               CrcBit crcBit = 8;
               enum ErrType {
                  ErrType_BITERRRATIO = 0;
                  ErrType_DEFAULT = 1;
                  ErrType_HIGHLOW = 2;
                  ErrType_PKTERRRATIO = 3;
               };
               ErrType errType = 9;
               uint32 highThreshold = 10;
               uint32 interval = 11;
               uint32 lowThreshold = 12;
               uint32 pktAlaCof = 13;
               uint32 pktAlaPow = 14;
               uint32 pktResCof = 15;
               uint32 pktResPow = 16;
               uint32 sampleFactor = 17;
               bool shutdown = 18;
            }
            CrcParam crcParam = 3;
            uint32 deadLinkTime = 4;
            message DispPppInfoNode {
               message DownEvents {
                  message DownEvent {
                     string downReason = 1;
                     string downTime = 2;
                     enum LinkType {
                        LinkType_IPCP = 0;
                        LinkType_LCP = 1;
                     };
                     LinkType linkType = 3;
                  }
                  repeated DownEvent downEvent = 1;
               }
               DownEvents downEvents = 1;
               enum Ip6CpState {
                  Ip6CpState_ACKRCVD = 0;
                  Ip6CpState_ACKSENT = 1;
                  Ip6CpState_CLOSED = 2;
                  Ip6CpState_CLOSING = 3;
                  Ip6CpState_INITIAL = 4;
                  Ip6CpState_NONE = 5;
                  Ip6CpState_OPENED = 6;
                  Ip6CpState_REQSENT = 7;
                  Ip6CpState_STARTING = 8;
                  Ip6CpState_STOPPED = 9;
                  Ip6CpState_STOPPING = 10;
               };
               Ip6CpState ip6cpState = 2;
               enum IpcpState {
                  IpcpState_ACKRCVD = 0;
                  IpcpState_ACKSENT = 1;
                  IpcpState_CLOSED = 2;
                  IpcpState_CLOSING = 3;
                  IpcpState_INITIAL = 4;
                  IpcpState_NONE = 5;
                  IpcpState_OPENED = 6;
                  IpcpState_REQSENT = 7;
                  IpcpState_STARTING = 8;
                  IpcpState_STOPPED = 9;
                  IpcpState_STOPPING = 10;
               };
               IpcpState ipcpState = 3;
               enum LcpState {
                  LcpState_ACKRCVD = 0;
                  LcpState_ACKSENT = 1;
                  LcpState_CLOSED = 2;
                  LcpState_CLOSING = 3;
                  LcpState_INITIAL = 4;
                  LcpState_NONE = 5;
                  LcpState_OPENED = 6;
                  LcpState_REQSENT = 7;
                  LcpState_STARTING = 8;
                  LcpState_STOPPED = 9;
                  LcpState_STOPPING = 10;
               };
               LcpState lcpState = 4;
               uint32 localMru = 5;
               uint32 magicNum = 6;
               enum MplscpState {
                  MplscpState_ACKRCVD = 0;
                  MplscpState_ACKSENT = 1;
                  MplscpState_CLOSED = 2;
                  MplscpState_CLOSING = 3;
                  MplscpState_INITIAL = 4;
                  MplscpState_NONE = 5;
                  MplscpState_OPENED = 6;
                  MplscpState_REQSENT = 7;
                  MplscpState_STARTING = 8;
                  MplscpState_STOPPED = 9;
                  MplscpState_STOPPING = 10;
               };
               MplscpState mplscpState = 7;
               uint32 negoTimeOut = 8;
               enum OsicpState {
                  OsicpState_ACKRCVD = 0;
                  OsicpState_ACKSENT = 1;
                  OsicpState_CLOSED = 2;
                  OsicpState_CLOSING = 3;
                  OsicpState_INITIAL = 4;
                  OsicpState_NONE = 5;
                  OsicpState_OPENED = 6;
                  OsicpState_REQSENT = 7;
                  OsicpState_STARTING = 8;
                  OsicpState_STOPPED = 9;
                  OsicpState_STOPPING = 10;
               };
               OsicpState osicpState = 9;
               string peerIpaddr = 10;
               uint32 peerMru = 11;
            }
            DispPppInfoNode dispPppInfoNode = 5;
            bool dnsAdmitAny = 6;
            bool ifChapAuth = 7;
            message IfLink {
               uint32 timeInternal = 1;
            }
            IfLink ifLink = 8;
            bool ifPapAuth = 9;
            bool magicNumCheck = 10;
            enum MplscpNego {
               MplscpNego_DISABLE = 0;
               MplscpNego_ENABLE = 1;
            };
            MplscpNego mplscpNego = 11;
            enum MruNegoMtd {
               MruNegoMtd_IPV4 = 0;
               MruNegoMtd_IPV6 = 1;
            };
            MruNegoMtd mruNegoMtd = 12;
            uint32 negoTimeout = 13;
            enum OsicpNego {
               OsicpNego_DISABLE = 0;
               OsicpNego_ENABLE = 1;
            };
            OsicpNego osicpNego = 14;
            string papPaswrd = 15;
            string papUserName = 16;
            bool peerHostRoute = 17;
            string peerIpAddr = 18;
            message PppStatistics {
               uint32 inputCrcPkts = 1;
               uint32 inputLongPkts = 2;
               uint32 inputLostPkts = 3;
               uint32 inputShortPkts = 4;
               uint32 outLostPkts = 5;
               uint32 outOverPkts = 6;
               uint32 outUnderPkts = 7;
            }
            PppStatistics pppStatistics = 19;
            string primDNSAddr = 20;
            string secndDNSAddr = 21;
         }
         Ppp ppp = 89;
         uint32 protocolUpDelayTime = 90;
         message RemoteIfStat {
            uint64 sendMutiPacket = 1;
         }
         RemoteIfStat remoteIfStat = 91;
         bool spreadMtuFlag = 92;
         enum StatMode {
            StatMode_BASEINTERFACE = 0;
            StatMode_BASEVLANGROUP = 1;
         };
         StatMode statMode = 93;
         message TransAlarmDown {
            enum Oof {
               Oof_DISABLE = 0;
               Oof_ENABLE = 1;
            };
            Oof oof = 1;
            enum Pais {
               Pais_DISABLE = 0;
               Pais_ENABLE = 1;
            };
            Pais pais = 2;
            enum Prdi {
               Prdi_DISABLE = 0;
               Prdi_ENABLE = 1;
            };
            Prdi prdi = 3;
         }
         TransAlarmDown transAlarmDown = 94;
         message VPosition {
            uint32 vBoardID = 1;
            uint32 vPortID = 2;
            string vnfcName = 3;
         }
         VPosition vPosition = 95;
         message VbdIfForwardMode {
            bool vbdIfFwdLoop = 1;
         }
         VbdIfForwardMode vbdIfForwardMode = 96;
         message VeGroup {
            uint32 veGroupId = 1;
            enum VeIfType {
               VeIfType_INVALID = 0;
               VeIfType_L2VE = 1;
               VeIfType_L3VE = 2;
               VeIfType_TERMINATEVE = 3;
            };
            VeIfType veIfType = 2;
         }
         VeGroup veGroup = 97;
         message VeMemberSlot {
            string veSlotId = 1;
         }
         VeMemberSlot veMemberSlot = 98;
         message VllPwLoopChk {
            uint32 loopCheckTime = 1;
            bool loopEnable = 2;
         }
         VllPwLoopChk vllPwLoopChk = 99;
         string vrfName = 100;
         string vsName = 101;
      }
      repeated Interface interface = 1;
   }
   Interfaces interfaces = 5;
   message AutoRecoveryTimes {
      message AutoRecoveryTime {
         enum ErrorDownType {
            ErrorDownType_AUTOX_DEFEND = 0;
            ErrorDownType_BPDUX_PROTECTION = 1;
            ErrorDownType_CRCX_STATISTICS = 2;
            ErrorDownType_DUALX_ACTIVE = 3;
            ErrorDownType_FABRICX_LINKX_FAILURE = 4;
            ErrorDownType_FABRICX_UPLINKX_THRESHOLD = 5;
            ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED = 6;
            ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED = 7;
            ErrorDownType_INVALID = 8;
            ErrorDownType_L2X_LOOPX_OCCURED = 9;
            ErrorDownType_LEAFX_MSTP = 10;
            ErrorDownType_LINKX_FLAP = 11;
            ErrorDownType_LOOPBACKX_DETECT = 12;
            ErrorDownType_MACX_ADDRESSX_FLAPPING = 13;
            ErrorDownType_MONITORX_LINK = 14;
            ErrorDownType_MX_LAG = 15;
            ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK = 16;
            ErrorDownType_NOX_STACKX_LINK = 17;
            ErrorDownType_PORTSECX_REACHEDLIMIT = 18;
            ErrorDownType_RESOURCEX_MISMATCH = 19;
            ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT = 20;
            ErrorDownType_SPINEX_TYPEX_UNSUPPORTED = 21;
            ErrorDownType_STACKX_CONFIGX_CONFLICT = 22;
            ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT = 23;
            ErrorDownType_STACKX_PACKETX_DEFENSIVE = 24;
            ErrorDownType_STORMX_CONTROL = 25;
            ErrorDownType_TRANSCEIVERX_POWERX_LOW = 26;
         };
         ErrorDownType errorDownType = 1;
         uint32 timeValue = 2;
      }
      repeated AutoRecoveryTime autoRecoveryTime = 1;
   }
   AutoRecoveryTimes autoRecoveryTimes = 6;
   message GlobalConfig {
      message DualStat {
         bool dualStatEnable = 1;
      }
      DualStat dualStat = 1;
      uint32 globalStatItvl = 2;
      enum Ipv4IgnorePrimarySub {
         Ipv4IgnorePrimarySub_DISABLE = 0;
         Ipv4IgnorePrimarySub_ENABLE = 1;
      };
      Ipv4IgnorePrimarySub ipv4IgnorePrimarySub = 3;
      bool subIfLinkDownTrapEnable = 4;
      enum SysAttriControlMtu {
         SysAttriControlMtu_X_1450 = 0;
         SysAttriControlMtu_X_1500 = 1;
      };
      SysAttriControlMtu sysAttriControlMtu = 5;
   }
   GlobalConfig globalConfig = 7;
   message HdlcDamp {
      bool hdlcDampEnable = 1;
      enum HdlcDampLevel {
         HdlcDampLevel_HEAVY = 0;
         HdlcDampLevel_LIGHT = 1;
         HdlcDampLevel_MANUAL = 2;
         HdlcDampLevel_MIDDLE = 3;
      };
      HdlcDampLevel hdlcDampLevel = 2;
      uint32 hdlcHalfLifePeriod = 3;
      uint32 hdlcMaxSuppressTime = 4;
      uint32 hdlcReuse = 5;
      uint32 hdlcSuppress = 6;
   }
   HdlcDamp hdlcDamp = 8;
   message IfDamp {
      bool ifDampEnable = 1;
      enum IfDampLevel {
         IfDampLevel_HEAVY = 0;
         IfDampLevel_LIGHT = 1;
         IfDampLevel_MANUAL = 2;
         IfDampLevel_MIDDLE = 3;
      };
      IfDampLevel ifDampLevel = 2;
      bool ifDampTxOff = 3;
      uint32 ifHalfLifePeriod = 4;
      uint32 ifMaxSuppressTime = 5;
      uint32 ifReuse = 6;
      uint32 ifSuppress = 7;
   }
   IfDamp ifDamp = 9;
   message InterfaceCounts {
      message InterfaceCount {
         enum IfClass {
            IfClass_MAININTERFACE = 0;
            IfClass_SUBINTERFACE = 1;
         };
         IfClass ifClass = 1;
         uint32 ifCount = 2;
         enum IfPhyType {
            IfPhyType_ATM = 0;
            IfPhyType_ATMX_BUNDLE = 1;
            IfPhyType_CPOS = 2;
            IfPhyType_CPOSX_TRUNK = 3;
            IfPhyType_DCNINTERFACE = 4;
            IfPhyType_E1 = 5;
            IfPhyType_E3 = 6;
            IfPhyType_ETHERNET = 7;
            IfPhyType_ETHX_TRUNK = 8;
            IfPhyType_FABRICX_PORT = 9;
            IfPhyType_FC = 10;
            IfPhyType_FCOEX_PORT = 11;
            IfPhyType_FIBERX_CHANNEL = 12;
            IfPhyType_FLEXE = 13;
            IfPhyType_FLEXEX_100G = 14;
            IfPhyType_FLEXEX_200GE = 15;
            IfPhyType_FLEXEX_400G = 16;
            IfPhyType_FLEXEX_50G = 17;
            IfPhyType_FLEXEX_50X_100G = 18;
            IfPhyType_GEBRIEF = 19;
            IfPhyType_GIGABITETHERNET = 20;
            IfPhyType_GLOBALX_IMAX_GROUP = 21;
            IfPhyType_GLOBALX_MPX_GROUP = 22;
            IfPhyType_GLOBALX_VE = 23;
            IfPhyType_GMPLSX_UNI = 24;
            IfPhyType_HPGE = 25;
            IfPhyType_IMAX_GROUP = 26;
            IfPhyType_IMETH = 27;
            IfPhyType_INFINIBAND = 28;
            IfPhyType_IPX_TRUNK = 29;
            IfPhyType_LMPIF = 30;
            IfPhyType_LOOPBACK = 31;
            IfPhyType_METH = 32;
            IfPhyType_MPX_GROUP = 33;
            IfPhyType_MTUNNEL = 34;
            IfPhyType_NULL = 35;
            IfPhyType_NVE = 36;
            IfPhyType_OTN = 37;
            IfPhyType_POS = 38;
            IfPhyType_POSX_TRUNK = 39;
            IfPhyType_PWX_VE = 40;
            IfPhyType_REMOTEX_AP = 41;
            IfPhyType_SERIAL = 42;
            IfPhyType_SERVICEIF = 43;
            IfPhyType_SIP = 44;
            IfPhyType_STACKX_PORT = 45;
            IfPhyType_T1 = 46;
            IfPhyType_T3 = 47;
            IfPhyType_TRUNKX_SERIAL = 48;
            IfPhyType_TUNNEL = 49;
            IfPhyType_VBDIF = 50;
            IfPhyType_VBRIDGE = 51;
            IfPhyType_VC12 = 52;
            IfPhyType_VC4 = 53;
            IfPhyType_VIRTUALX_ETHERNET = 54;
            IfPhyType_VIRTUALX_ODUK = 55;
            IfPhyType_VIRTUALX_SERIAL = 56;
            IfPhyType_VIRTUALX_TEMPLATE = 57;
            IfPhyType_VLANIF = 58;
            IfPhyType_VMETH = 59;
            IfPhyType_VP = 60;
            IfPhyType_VXX_TUNNEL = 61;
            IfPhyType_WDM = 62;
            IfPhyType_XGIGABITETHERNET = 63;
            IfPhyType_X_100GE = 64;
            IfPhyType_X_10GE = 65;
            IfPhyType_X_10X10GE = 66;
            IfPhyType_X_200GE = 67;
            IfPhyType_X_25GE = 68;
            IfPhyType_X_3X40GE = 69;
            IfPhyType_X_400GE = 70;
            IfPhyType_X_40GE = 71;
            IfPhyType_X_4X10GE = 72;
            IfPhyType_X_4X25GE = 73;
            IfPhyType_X_50GE = 74;
            IfPhyType_X_50X_100GE = 75;
         };
         IfPhyType ifPhyType = 3;
      }
      repeated InterfaceCount interfaceCount = 1;
   }
   InterfaceCounts interfaceCounts = 10;
   message IpConflictConfig {
      enum IpConflictCheck {
         IpConflictCheck_DISABLE = 0;
         IpConflictCheck_ENABLE = 1;
      };
      IpConflictCheck ipConflictCheck = 1;
      enum IpConflictPreempt {
         IpConflictPreempt_DISABLE = 0;
         IpConflictPreempt_ENABLE = 1;
      };
      IpConflictPreempt ipConflictPreempt = 2;
      enum Ipv6ConflictCheck {
         Ipv6ConflictCheck_DISABLE = 0;
         Ipv6ConflictCheck_ENABLE = 1;
      };
      Ipv6ConflictCheck ipv6ConflictCheck = 3;
      enum Ipv6ConflictPreempt {
         Ipv6ConflictPreempt_DISABLE = 0;
         Ipv6ConflictPreempt_ENABLE = 1;
      };
      Ipv6ConflictPreempt ipv6ConflictPreempt = 4;
   }
   IpConflictConfig ipConflictConfig = 11;
   message IpInterfaceCountOper {
      uint32 ifPhyDownCount = 1;
      uint32 ifPhyUpCount = 2;
      uint32 ifV4DownCount = 3;
      uint32 ifV4UpCount = 4;
      message IpInterfaceCounts {
         message IpInterfaceCount {
            uint32 ifCount = 1;
            enum IfPhyType {
               IfPhyType_ATM = 0;
               IfPhyType_ATMX_BUNDLE = 1;
               IfPhyType_CPOS = 2;
               IfPhyType_CPOSX_TRUNK = 3;
               IfPhyType_DCNINTERFACE = 4;
               IfPhyType_E1 = 5;
               IfPhyType_E3 = 6;
               IfPhyType_ETHERNET = 7;
               IfPhyType_ETHX_TRUNK = 8;
               IfPhyType_FABRICX_PORT = 9;
               IfPhyType_FC = 10;
               IfPhyType_FCOEX_PORT = 11;
               IfPhyType_FIBERX_CHANNEL = 12;
               IfPhyType_FLEXE = 13;
               IfPhyType_FLEXEX_100G = 14;
               IfPhyType_FLEXEX_200GE = 15;
               IfPhyType_FLEXEX_400G = 16;
               IfPhyType_FLEXEX_50G = 17;
               IfPhyType_FLEXEX_50X_100G = 18;
               IfPhyType_GEBRIEF = 19;
               IfPhyType_GIGABITETHERNET = 20;
               IfPhyType_GLOBALX_IMAX_GROUP = 21;
               IfPhyType_GLOBALX_MPX_GROUP = 22;
               IfPhyType_GLOBALX_VE = 23;
               IfPhyType_GMPLSX_UNI = 24;
               IfPhyType_HPGE = 25;
               IfPhyType_IMAX_GROUP = 26;
               IfPhyType_IMETH = 27;
               IfPhyType_INFINIBAND = 28;
               IfPhyType_IPX_TRUNK = 29;
               IfPhyType_LMPIF = 30;
               IfPhyType_LOOPBACK = 31;
               IfPhyType_METH = 32;
               IfPhyType_MPX_GROUP = 33;
               IfPhyType_MTUNNEL = 34;
               IfPhyType_NULL = 35;
               IfPhyType_NVE = 36;
               IfPhyType_OTN = 37;
               IfPhyType_POS = 38;
               IfPhyType_POSX_TRUNK = 39;
               IfPhyType_PWX_VE = 40;
               IfPhyType_REMOTEX_AP = 41;
               IfPhyType_SERIAL = 42;
               IfPhyType_SERVICEIF = 43;
               IfPhyType_SIP = 44;
               IfPhyType_STACKX_PORT = 45;
               IfPhyType_T1 = 46;
               IfPhyType_T3 = 47;
               IfPhyType_TRUNKX_SERIAL = 48;
               IfPhyType_TUNNEL = 49;
               IfPhyType_VBDIF = 50;
               IfPhyType_VBRIDGE = 51;
               IfPhyType_VC12 = 52;
               IfPhyType_VC4 = 53;
               IfPhyType_VIRTUALX_ETHERNET = 54;
               IfPhyType_VIRTUALX_ODUK = 55;
               IfPhyType_VIRTUALX_SERIAL = 56;
               IfPhyType_VIRTUALX_TEMPLATE = 57;
               IfPhyType_VLANIF = 58;
               IfPhyType_VMETH = 59;
               IfPhyType_VP = 60;
               IfPhyType_VXX_TUNNEL = 61;
               IfPhyType_WDM = 62;
               IfPhyType_XGIGABITETHERNET = 63;
               IfPhyType_X_100GE = 64;
               IfPhyType_X_10GE = 65;
               IfPhyType_X_10X10GE = 66;
               IfPhyType_X_200GE = 67;
               IfPhyType_X_25GE = 68;
               IfPhyType_X_3X40GE = 69;
               IfPhyType_X_400GE = 70;
               IfPhyType_X_40GE = 71;
               IfPhyType_X_4X10GE = 72;
               IfPhyType_X_4X25GE = 73;
               IfPhyType_X_50GE = 74;
               IfPhyType_X_50X_100GE = 75;
            };
            IfPhyType ifPhyType = 2;
         }
         repeated IpInterfaceCount ipInterfaceCount = 1;
      }
      IpInterfaceCounts ipInterfaceCounts = 5;
   }
   IpInterfaceCountOper ipInterfaceCountOper = 12;
   message Ipv6InterfaceCountOper {
      uint32 ifPhyDownCount = 1;
      uint32 ifPhyUpCount = 2;
      uint32 ifV6DownCount = 3;
      uint32 ifV6UpCount = 4;
      message Ipv6InterfaceCounts {
         message Ipv6InterfaceCount {
            uint32 ifCount = 1;
            enum IfPhyType {
               IfPhyType_ATM = 0;
               IfPhyType_ATMX_BUNDLE = 1;
               IfPhyType_CPOS = 2;
               IfPhyType_CPOSX_TRUNK = 3;
               IfPhyType_DCNINTERFACE = 4;
               IfPhyType_E1 = 5;
               IfPhyType_E3 = 6;
               IfPhyType_ETHERNET = 7;
               IfPhyType_ETHX_TRUNK = 8;
               IfPhyType_FABRICX_PORT = 9;
               IfPhyType_FC = 10;
               IfPhyType_FCOEX_PORT = 11;
               IfPhyType_FIBERX_CHANNEL = 12;
               IfPhyType_FLEXE = 13;
               IfPhyType_FLEXEX_100G = 14;
               IfPhyType_FLEXEX_200GE = 15;
               IfPhyType_FLEXEX_400G = 16;
               IfPhyType_FLEXEX_50G = 17;
               IfPhyType_FLEXEX_50X_100G = 18;
               IfPhyType_GEBRIEF = 19;
               IfPhyType_GIGABITETHERNET = 20;
               IfPhyType_GLOBALX_IMAX_GROUP = 21;
               IfPhyType_GLOBALX_MPX_GROUP = 22;
               IfPhyType_GLOBALX_VE = 23;
               IfPhyType_GMPLSX_UNI = 24;
               IfPhyType_HPGE = 25;
               IfPhyType_IMAX_GROUP = 26;
               IfPhyType_IMETH = 27;
               IfPhyType_INFINIBAND = 28;
               IfPhyType_IPX_TRUNK = 29;
               IfPhyType_LMPIF = 30;
               IfPhyType_LOOPBACK = 31;
               IfPhyType_METH = 32;
               IfPhyType_MPX_GROUP = 33;
               IfPhyType_MTUNNEL = 34;
               IfPhyType_NULL = 35;
               IfPhyType_NVE = 36;
               IfPhyType_OTN = 37;
               IfPhyType_POS = 38;
               IfPhyType_POSX_TRUNK = 39;
               IfPhyType_PWX_VE = 40;
               IfPhyType_REMOTEX_AP = 41;
               IfPhyType_SERIAL = 42;
               IfPhyType_SERVICEIF = 43;
               IfPhyType_SIP = 44;
               IfPhyType_STACKX_PORT = 45;
               IfPhyType_T1 = 46;
               IfPhyType_T3 = 47;
               IfPhyType_TRUNKX_SERIAL = 48;
               IfPhyType_TUNNEL = 49;
               IfPhyType_VBDIF = 50;
               IfPhyType_VBRIDGE = 51;
               IfPhyType_VC12 = 52;
               IfPhyType_VC4 = 53;
               IfPhyType_VIRTUALX_ETHERNET = 54;
               IfPhyType_VIRTUALX_ODUK = 55;
               IfPhyType_VIRTUALX_SERIAL = 56;
               IfPhyType_VIRTUALX_TEMPLATE = 57;
               IfPhyType_VLANIF = 58;
               IfPhyType_VMETH = 59;
               IfPhyType_VP = 60;
               IfPhyType_VXX_TUNNEL = 61;
               IfPhyType_WDM = 62;
               IfPhyType_XGIGABITETHERNET = 63;
               IfPhyType_X_100GE = 64;
               IfPhyType_X_10GE = 65;
               IfPhyType_X_10X10GE = 66;
               IfPhyType_X_200GE = 67;
               IfPhyType_X_25GE = 68;
               IfPhyType_X_3X40GE = 69;
               IfPhyType_X_400GE = 70;
               IfPhyType_X_40GE = 71;
               IfPhyType_X_4X10GE = 72;
               IfPhyType_X_4X25GE = 73;
               IfPhyType_X_50GE = 74;
               IfPhyType_X_50X_100GE = 75;
            };
            IfPhyType ifPhyType = 2;
         }
         repeated Ipv6InterfaceCount ipv6InterfaceCount = 1;
      }
      Ipv6InterfaceCounts ipv6InterfaceCounts = 5;
   }
   Ipv6InterfaceCountOper ipv6InterfaceCountOper = 13;
   message PppDamp {
      bool pppDampEnable = 1;
      enum PppDampLevel {
         PppDampLevel_HEAVY = 0;
         PppDampLevel_LIGHT = 1;
         PppDampLevel_MANUAL = 2;
         PppDampLevel_MIDDLE = 3;
      };
      PppDampLevel pppDampLevel = 2;
      uint32 pppHalfLifePeriod = 3;
      uint32 pppMaxSuppressTime = 4;
      uint32 pppReuse = 5;
      uint32 pppSuppress = 6;
   }
   PppDamp pppDamp = 14;
   message RemoteInterfaces {
      message RemoteInterface {
         uint32 ifIndex = 1;
         string ifName = 2;
         message RemoteIfStatOper {
            uint64 inBitRate = 1;
            uint64 inPacketRate = 2;
            uint64 inPeakBitRate = 3;
            string inPeakBitRateRecordTime = 4;
            string inUseRate = 5;
            string lastclearedTime = 6;
            uint64 outBitRate = 7;
            uint64 outPacketRate = 8;
            uint64 outPeakBitRate = 9;
            string outPeakBitRateRecordTime = 10;
            string outUseRate = 11;
         }
         RemoteIfStatOper remoteIfStatOper = 3;
      }
      repeated RemoteInterface remoteInterface = 1;
   }
   RemoteInterfaces remoteInterfaces = 15;
   message StaticDimRanges {
      message StaticDimRange {
         string cardRange = 1;
         string chassisRange = 2;
         enum IfPhyType {
            IfPhyType_ATM = 0;
            IfPhyType_ATMX_BUNDLE = 1;
            IfPhyType_CPOS = 2;
            IfPhyType_CPOSX_TRUNK = 3;
            IfPhyType_DCNINTERFACE = 4;
            IfPhyType_E1 = 5;
            IfPhyType_E3 = 6;
            IfPhyType_ETHERNET = 7;
            IfPhyType_ETHX_TRUNK = 8;
            IfPhyType_FABRICX_PORT = 9;
            IfPhyType_FC = 10;
            IfPhyType_FCOEX_PORT = 11;
            IfPhyType_FIBERX_CHANNEL = 12;
            IfPhyType_FLEXE = 13;
            IfPhyType_FLEXEX_100G = 14;
            IfPhyType_FLEXEX_200GE = 15;
            IfPhyType_FLEXEX_400G = 16;
            IfPhyType_FLEXEX_50G = 17;
            IfPhyType_FLEXEX_50X_100G = 18;
            IfPhyType_GEBRIEF = 19;
            IfPhyType_GIGABITETHERNET = 20;
            IfPhyType_GLOBALX_IMAX_GROUP = 21;
            IfPhyType_GLOBALX_MPX_GROUP = 22;
            IfPhyType_GLOBALX_VE = 23;
            IfPhyType_GMPLSX_UNI = 24;
            IfPhyType_HPGE = 25;
            IfPhyType_IMAX_GROUP = 26;
            IfPhyType_IMETH = 27;
            IfPhyType_INFINIBAND = 28;
            IfPhyType_IPX_TRUNK = 29;
            IfPhyType_LMPIF = 30;
            IfPhyType_LOOPBACK = 31;
            IfPhyType_METH = 32;
            IfPhyType_MPX_GROUP = 33;
            IfPhyType_MTUNNEL = 34;
            IfPhyType_NULL = 35;
            IfPhyType_NVE = 36;
            IfPhyType_OTN = 37;
            IfPhyType_POS = 38;
            IfPhyType_POSX_TRUNK = 39;
            IfPhyType_PWX_VE = 40;
            IfPhyType_REMOTEX_AP = 41;
            IfPhyType_SERIAL = 42;
            IfPhyType_SERVICEIF = 43;
            IfPhyType_SIP = 44;
            IfPhyType_STACKX_PORT = 45;
            IfPhyType_T1 = 46;
            IfPhyType_T3 = 47;
            IfPhyType_TRUNKX_SERIAL = 48;
            IfPhyType_TUNNEL = 49;
            IfPhyType_VBDIF = 50;
            IfPhyType_VBRIDGE = 51;
            IfPhyType_VC12 = 52;
            IfPhyType_VC4 = 53;
            IfPhyType_VIRTUALX_ETHERNET = 54;
            IfPhyType_VIRTUALX_ODUK = 55;
            IfPhyType_VIRTUALX_SERIAL = 56;
            IfPhyType_VIRTUALX_TEMPLATE = 57;
            IfPhyType_VLANIF = 58;
            IfPhyType_VMETH = 59;
            IfPhyType_VP = 60;
            IfPhyType_VXX_TUNNEL = 61;
            IfPhyType_WDM = 62;
            IfPhyType_XGIGABITETHERNET = 63;
            IfPhyType_X_100GE = 64;
            IfPhyType_X_10GE = 65;
            IfPhyType_X_10X10GE = 66;
            IfPhyType_X_200GE = 67;
            IfPhyType_X_25GE = 68;
            IfPhyType_X_3X40GE = 69;
            IfPhyType_X_400GE = 70;
            IfPhyType_X_40GE = 71;
            IfPhyType_X_4X10GE = 72;
            IfPhyType_X_4X25GE = 73;
            IfPhyType_X_50GE = 74;
            IfPhyType_X_50X_100GE = 75;
         };
         IfPhyType ifPhyType = 3;
         string portRange = 4;
         string slotRange = 5;
      }
      repeated StaticDimRange staticDimRange = 1;
   }
   StaticDimRanges staticDimRanges = 16;
}
message HwErrordown {
   string Cause = 1;
   uint32 IfIndex = 2;
   string IfName = 3;
   string RecoveryType = 4;
}
message HwErrordownRecovery {
   string Cause = 1;
   uint32 IfIndex = 2;
   string IfName = 3;
   string RecoveryType = 4;
}
message HwHdlcLoopbackDetResume {
   int32 InterfaceIndex = 1;
   string InterfaceName = 2;
}
message HwHdlcLoopbackDetect {
   int32 InterfaceIndex = 1;
   string InterfaceName = 2;
}
message HwIfControlFlapResume {
   uint32 InterfaceExtIndex = 1;
   uint32 InterfaceIndex = 2;
   string InterfaceName = 3;
   uint32 SuppressState = 4;
}
message HwIfControlFlapSuppress {
   uint32 InterfaceExtIndex = 1;
   uint32 InterfaceIndex = 2;
   string InterfaceName = 3;
   uint32 SuppressState = 4;
}
message HwLcpNegotiateFailed {
   uint32 ifIndex = 1;
   string ifName = 2;
   string reasonCode = 3;
}
message HwLcpNegotiateResumed {
   uint32 ifIndex = 1;
   string ifName = 2;
   string reasonCode = 3;
}
message HwMpDown {
   uint32 IfIndex = 1;
   string IfName = 2;
}
message HwMpSonChannelDampingDetect {
   uint32 MpIfIndex = 1;
   string MpIfName = 2;
   uint32 MpMemberIfIndex = 3;
   string MpMemberIfName = 4;
}
message HwMpSonChannelDampingResume {
   uint32 MpIfIndex = 1;
   string MpIfName = 2;
   uint32 MpMemberIfIndex = 3;
   string MpMemberIfName = 4;
}
message HwMpUp {
   uint32 IfIndex = 1;
   string IfName = 2;
}
message HwNcpNegotiateFailed {
   string hwPppNcpName = 1;
   string hwPppNegotiationFailReason = 2;
   uint32 ifIndex = 3;
   string ifName = 4;
}
message HwNcpNegotiateResumed {
   string hwPppNcpName = 1;
   string hwPppNegotiationFailReason = 2;
   uint32 ifIndex = 3;
   string ifName = 4;
}
message HwPhysicalAdminIfDown {
   uint32 ifIndex = 1;
   string ifName = 2;
   string ifOperStatus = 3;
}
message HwPhysicalAdminIfUp {
   uint32 ifIndex = 1;
   string ifName = 2;
   string ifOperStatus = 3;
}
message HwPppLoopbackDetResume {
   uint32 HwBaseTrapEventType = 1;
   uint32 HwBaseTrapProbableCause = 2;
   uint32 HwBaseTrapSeverity = 3;
   uint32 IfIndex = 4;
   string IfName = 5;
}
message HwPppLoopbackDetect {
   uint32 HwBaseTrapEventType = 1;
   uint32 HwBaseTrapProbableCause = 2;
   uint32 HwBaseTrapSeverity = 3;
   uint32 IfIndex = 4;
   string IfName = 5;
}
message Hwifflowdown {
   uint32 hwIFExtFlowStatus = 1;
   uint32 hwIFExtIndex = 2;
   uint32 ifIndex = 3;
   string ifName = 4;
   uint32 sysUpTime = 5;
}
message Hwifflowup {
   uint32 hwIFExtFlowStatus = 1;
   uint32 hwIFExtIndex = 2;
   uint32 ifIndex = 3;
   string ifName = 4;
   uint32 sysUpTime = 5;
}
message Ipv6IfStateChange {
   bytes Reason = 1;
   uint32 ReasonCode = 2;
   string ipv6IfAdminStatus = 3;
   string ipv6IfDescr = 4;
   uint32 ipv6IfIndex = 5;
   string ipv6IfOperStatus = 6;
   string ipv6MainIf = 7;
   uint32 rootIndex = 8;
}
message Linkdown {
   uint32 PhysicalIndex = 1;
   bytes Reason = 2;
   string ifAdminStatus = 3;
   uint32 ifIndex = 4;
   string ifName = 5;
   string ifOperStatus = 6;
   string mainIf = 7;
   uint32 reasonCode = 8;
   uint32 rootIndex = 9;
}
message Linkup {
   uint32 PhysicalIndex = 1;
   bytes Reason = 2;
   string ifAdminStatus = 3;
   uint32 ifIndex = 4;
   string ifName = 5;
   string ifOperStatus = 6;
   string mainIf = 7;
   uint32 reasonCode = 8;
   uint32 rootIndex = 9;
}
