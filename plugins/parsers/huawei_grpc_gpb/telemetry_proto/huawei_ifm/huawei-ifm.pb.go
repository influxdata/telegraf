// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: huawei-ifm.proto

package huawei_ifm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ifm_Interfaces_Interface_IfAdminStatus int32

const (
	Ifm_Interfaces_Interface_IfAdminStatus_DOWN Ifm_Interfaces_Interface_IfAdminStatus = 0
	Ifm_Interfaces_Interface_IfAdminStatus_UP   Ifm_Interfaces_Interface_IfAdminStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfAdminStatus.
var (
	Ifm_Interfaces_Interface_IfAdminStatus_name = map[int32]string{
		0: "IfAdminStatus_DOWN",
		1: "IfAdminStatus_UP",
	}
	Ifm_Interfaces_Interface_IfAdminStatus_value = map[string]int32{
		"IfAdminStatus_DOWN": 0,
		"IfAdminStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_IfAdminStatus) Enum() *Ifm_Interfaces_Interface_IfAdminStatus {
	p := new(Ifm_Interfaces_Interface_IfAdminStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfAdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfAdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[0].Descriptor()
}

func (Ifm_Interfaces_Interface_IfAdminStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[0]
}

func (x Ifm_Interfaces_Interface_IfAdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfAdminStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_IfAdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_IfCfgEncapType int32

const (
	Ifm_Interfaces_Interface_IfCfgEncapType_IETF        Ifm_Interfaces_Interface_IfCfgEncapType = 0
	Ifm_Interfaces_Interface_IfCfgEncapType_NONSTANDARD Ifm_Interfaces_Interface_IfCfgEncapType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfCfgEncapType.
var (
	Ifm_Interfaces_Interface_IfCfgEncapType_name = map[int32]string{
		0: "IfCfgEncapType_IETF",
		1: "IfCfgEncapType_NONSTANDARD",
	}
	Ifm_Interfaces_Interface_IfCfgEncapType_value = map[string]int32{
		"IfCfgEncapType_IETF":        0,
		"IfCfgEncapType_NONSTANDARD": 1,
	}
)

func (x Ifm_Interfaces_Interface_IfCfgEncapType) Enum() *Ifm_Interfaces_Interface_IfCfgEncapType {
	p := new(Ifm_Interfaces_Interface_IfCfgEncapType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfCfgEncapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfCfgEncapType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[1].Descriptor()
}

func (Ifm_Interfaces_Interface_IfCfgEncapType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[1]
}

func (x Ifm_Interfaces_Interface_IfCfgEncapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfCfgEncapType.Descriptor instead.
func (Ifm_Interfaces_Interface_IfCfgEncapType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

type Ifm_Interfaces_Interface_IfClass int32

const (
	Ifm_Interfaces_Interface_IfClass_MAININTERFACE Ifm_Interfaces_Interface_IfClass = 0
	Ifm_Interfaces_Interface_IfClass_SUBINTERFACE  Ifm_Interfaces_Interface_IfClass = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfClass.
var (
	Ifm_Interfaces_Interface_IfClass_name = map[int32]string{
		0: "IfClass_MAININTERFACE",
		1: "IfClass_SUBINTERFACE",
	}
	Ifm_Interfaces_Interface_IfClass_value = map[string]int32{
		"IfClass_MAININTERFACE": 0,
		"IfClass_SUBINTERFACE":  1,
	}
)

func (x Ifm_Interfaces_Interface_IfClass) Enum() *Ifm_Interfaces_Interface_IfClass {
	p := new(Ifm_Interfaces_Interface_IfClass)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[2].Descriptor()
}

func (Ifm_Interfaces_Interface_IfClass) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[2]
}

func (x Ifm_Interfaces_Interface_IfClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfClass.Descriptor instead.
func (Ifm_Interfaces_Interface_IfClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

type Ifm_Interfaces_Interface_IfLinkProtocol int32

const (
	Ifm_Interfaces_Interface_IfLinkProtocol_ATM      Ifm_Interfaces_Interface_IfLinkProtocol = 0
	Ifm_Interfaces_Interface_IfLinkProtocol_ETHERNET Ifm_Interfaces_Interface_IfLinkProtocol = 1
	Ifm_Interfaces_Interface_IfLinkProtocol_FR       Ifm_Interfaces_Interface_IfLinkProtocol = 2
	Ifm_Interfaces_Interface_IfLinkProtocol_HDLC     Ifm_Interfaces_Interface_IfLinkProtocol = 3
	Ifm_Interfaces_Interface_IfLinkProtocol_INVALID  Ifm_Interfaces_Interface_IfLinkProtocol = 4
	Ifm_Interfaces_Interface_IfLinkProtocol_PPP      Ifm_Interfaces_Interface_IfLinkProtocol = 5
	Ifm_Interfaces_Interface_IfLinkProtocol_TDM      Ifm_Interfaces_Interface_IfLinkProtocol = 6
)

// Enum value maps for Ifm_Interfaces_Interface_IfLinkProtocol.
var (
	Ifm_Interfaces_Interface_IfLinkProtocol_name = map[int32]string{
		0: "IfLinkProtocol_ATM",
		1: "IfLinkProtocol_ETHERNET",
		2: "IfLinkProtocol_FR",
		3: "IfLinkProtocol_HDLC",
		4: "IfLinkProtocol_INVALID",
		5: "IfLinkProtocol_PPP",
		6: "IfLinkProtocol_TDM",
	}
	Ifm_Interfaces_Interface_IfLinkProtocol_value = map[string]int32{
		"IfLinkProtocol_ATM":      0,
		"IfLinkProtocol_ETHERNET": 1,
		"IfLinkProtocol_FR":       2,
		"IfLinkProtocol_HDLC":     3,
		"IfLinkProtocol_INVALID":  4,
		"IfLinkProtocol_PPP":      5,
		"IfLinkProtocol_TDM":      6,
	}
)

func (x Ifm_Interfaces_Interface_IfLinkProtocol) Enum() *Ifm_Interfaces_Interface_IfLinkProtocol {
	p := new(Ifm_Interfaces_Interface_IfLinkProtocol)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfLinkProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfLinkProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[3].Descriptor()
}

func (Ifm_Interfaces_Interface_IfLinkProtocol) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[3]
}

func (x Ifm_Interfaces_Interface_IfLinkProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfLinkProtocol.Descriptor instead.
func (Ifm_Interfaces_Interface_IfLinkProtocol) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

type Ifm_Interfaces_Interface_IfNetworkLayerStatus int32

const (
	Ifm_Interfaces_Interface_IfNetworkLayerStatus_IPV4ANDIPV6DOWN Ifm_Interfaces_Interface_IfNetworkLayerStatus = 0
	Ifm_Interfaces_Interface_IfNetworkLayerStatus_IPV4ANDIPV6UP   Ifm_Interfaces_Interface_IfNetworkLayerStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfNetworkLayerStatus.
var (
	Ifm_Interfaces_Interface_IfNetworkLayerStatus_name = map[int32]string{
		0: "IfNetworkLayerStatus_IPV4ANDIPV6DOWN",
		1: "IfNetworkLayerStatus_IPV4ANDIPV6UP",
	}
	Ifm_Interfaces_Interface_IfNetworkLayerStatus_value = map[string]int32{
		"IfNetworkLayerStatus_IPV4ANDIPV6DOWN": 0,
		"IfNetworkLayerStatus_IPV4ANDIPV6UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_IfNetworkLayerStatus) Enum() *Ifm_Interfaces_Interface_IfNetworkLayerStatus {
	p := new(Ifm_Interfaces_Interface_IfNetworkLayerStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfNetworkLayerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfNetworkLayerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[4].Descriptor()
}

func (Ifm_Interfaces_Interface_IfNetworkLayerStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[4]
}

func (x Ifm_Interfaces_Interface_IfNetworkLayerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfNetworkLayerStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_IfNetworkLayerStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

type Ifm_Interfaces_Interface_IfOperEncapType int32

const (
	Ifm_Interfaces_Interface_IfOperEncapType_DOT1Q          Ifm_Interfaces_Interface_IfOperEncapType = 0
	Ifm_Interfaces_Interface_IfOperEncapType_DOT1QPOLICY    Ifm_Interfaces_Interface_IfOperEncapType = 1
	Ifm_Interfaces_Interface_IfOperEncapType_EVCDEFAULT     Ifm_Interfaces_Interface_IfOperEncapType = 2
	Ifm_Interfaces_Interface_IfOperEncapType_EVCDOT1Q       Ifm_Interfaces_Interface_IfOperEncapType = 3
	Ifm_Interfaces_Interface_IfOperEncapType_EVCDOT1QPOLICY Ifm_Interfaces_Interface_IfOperEncapType = 4
	Ifm_Interfaces_Interface_IfOperEncapType_EVCQINQ        Ifm_Interfaces_Interface_IfOperEncapType = 5
	Ifm_Interfaces_Interface_IfOperEncapType_EVCUNTAG       Ifm_Interfaces_Interface_IfOperEncapType = 6
	Ifm_Interfaces_Interface_IfOperEncapType_IETF           Ifm_Interfaces_Interface_IfOperEncapType = 7
	Ifm_Interfaces_Interface_IfOperEncapType_INVALID        Ifm_Interfaces_Interface_IfOperEncapType = 8
	Ifm_Interfaces_Interface_IfOperEncapType_L2VC           Ifm_Interfaces_Interface_IfOperEncapType = 9
	Ifm_Interfaces_Interface_IfOperEncapType_L2VE           Ifm_Interfaces_Interface_IfOperEncapType = 10
	Ifm_Interfaces_Interface_IfOperEncapType_L3VC           Ifm_Interfaces_Interface_IfOperEncapType = 11
	Ifm_Interfaces_Interface_IfOperEncapType_L3VE           Ifm_Interfaces_Interface_IfOperEncapType = 12
	Ifm_Interfaces_Interface_IfOperEncapType_L3VEACC        Ifm_Interfaces_Interface_IfOperEncapType = 13
	Ifm_Interfaces_Interface_IfOperEncapType_L3VETER        Ifm_Interfaces_Interface_IfOperEncapType = 14
	Ifm_Interfaces_Interface_IfOperEncapType_NONSTANDARD    Ifm_Interfaces_Interface_IfOperEncapType = 15
	Ifm_Interfaces_Interface_IfOperEncapType_P2MP           Ifm_Interfaces_Interface_IfOperEncapType = 16
	Ifm_Interfaces_Interface_IfOperEncapType_P2P            Ifm_Interfaces_Interface_IfOperEncapType = 17
	Ifm_Interfaces_Interface_IfOperEncapType_QINQ           Ifm_Interfaces_Interface_IfOperEncapType = 18
	Ifm_Interfaces_Interface_IfOperEncapType_QINQLINK       Ifm_Interfaces_Interface_IfOperEncapType = 19
	Ifm_Interfaces_Interface_IfOperEncapType_QINQMAPPING    Ifm_Interfaces_Interface_IfOperEncapType = 20
	Ifm_Interfaces_Interface_IfOperEncapType_SOFTGREVE      Ifm_Interfaces_Interface_IfOperEncapType = 21
	Ifm_Interfaces_Interface_IfOperEncapType_STACKINGPOLICY Ifm_Interfaces_Interface_IfOperEncapType = 22
	Ifm_Interfaces_Interface_IfOperEncapType_UNTAGPOLICY    Ifm_Interfaces_Interface_IfOperEncapType = 23
	Ifm_Interfaces_Interface_IfOperEncapType_USERVLAN       Ifm_Interfaces_Interface_IfOperEncapType = 24
	Ifm_Interfaces_Interface_IfOperEncapType_USERVLANANY    Ifm_Interfaces_Interface_IfOperEncapType = 25
	Ifm_Interfaces_Interface_IfOperEncapType_VLANTYPE       Ifm_Interfaces_Interface_IfOperEncapType = 26
	Ifm_Interfaces_Interface_IfOperEncapType_VLANTYPEPOLICY Ifm_Interfaces_Interface_IfOperEncapType = 27
)

// Enum value maps for Ifm_Interfaces_Interface_IfOperEncapType.
var (
	Ifm_Interfaces_Interface_IfOperEncapType_name = map[int32]string{
		0:  "IfOperEncapType_DOT1Q",
		1:  "IfOperEncapType_DOT1QPOLICY",
		2:  "IfOperEncapType_EVCDEFAULT",
		3:  "IfOperEncapType_EVCDOT1Q",
		4:  "IfOperEncapType_EVCDOT1QPOLICY",
		5:  "IfOperEncapType_EVCQINQ",
		6:  "IfOperEncapType_EVCUNTAG",
		7:  "IfOperEncapType_IETF",
		8:  "IfOperEncapType_INVALID",
		9:  "IfOperEncapType_L2VC",
		10: "IfOperEncapType_L2VE",
		11: "IfOperEncapType_L3VC",
		12: "IfOperEncapType_L3VE",
		13: "IfOperEncapType_L3VEACC",
		14: "IfOperEncapType_L3VETER",
		15: "IfOperEncapType_NONSTANDARD",
		16: "IfOperEncapType_P2MP",
		17: "IfOperEncapType_P2P",
		18: "IfOperEncapType_QINQ",
		19: "IfOperEncapType_QINQLINK",
		20: "IfOperEncapType_QINQMAPPING",
		21: "IfOperEncapType_SOFTGREVE",
		22: "IfOperEncapType_STACKINGPOLICY",
		23: "IfOperEncapType_UNTAGPOLICY",
		24: "IfOperEncapType_USERVLAN",
		25: "IfOperEncapType_USERVLANANY",
		26: "IfOperEncapType_VLANTYPE",
		27: "IfOperEncapType_VLANTYPEPOLICY",
	}
	Ifm_Interfaces_Interface_IfOperEncapType_value = map[string]int32{
		"IfOperEncapType_DOT1Q":          0,
		"IfOperEncapType_DOT1QPOLICY":    1,
		"IfOperEncapType_EVCDEFAULT":     2,
		"IfOperEncapType_EVCDOT1Q":       3,
		"IfOperEncapType_EVCDOT1QPOLICY": 4,
		"IfOperEncapType_EVCQINQ":        5,
		"IfOperEncapType_EVCUNTAG":       6,
		"IfOperEncapType_IETF":           7,
		"IfOperEncapType_INVALID":        8,
		"IfOperEncapType_L2VC":           9,
		"IfOperEncapType_L2VE":           10,
		"IfOperEncapType_L3VC":           11,
		"IfOperEncapType_L3VE":           12,
		"IfOperEncapType_L3VEACC":        13,
		"IfOperEncapType_L3VETER":        14,
		"IfOperEncapType_NONSTANDARD":    15,
		"IfOperEncapType_P2MP":           16,
		"IfOperEncapType_P2P":            17,
		"IfOperEncapType_QINQ":           18,
		"IfOperEncapType_QINQLINK":       19,
		"IfOperEncapType_QINQMAPPING":    20,
		"IfOperEncapType_SOFTGREVE":      21,
		"IfOperEncapType_STACKINGPOLICY": 22,
		"IfOperEncapType_UNTAGPOLICY":    23,
		"IfOperEncapType_USERVLAN":       24,
		"IfOperEncapType_USERVLANANY":    25,
		"IfOperEncapType_VLANTYPE":       26,
		"IfOperEncapType_VLANTYPEPOLICY": 27,
	}
)

func (x Ifm_Interfaces_Interface_IfOperEncapType) Enum() *Ifm_Interfaces_Interface_IfOperEncapType {
	p := new(Ifm_Interfaces_Interface_IfOperEncapType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfOperEncapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfOperEncapType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[5].Descriptor()
}

func (Ifm_Interfaces_Interface_IfOperEncapType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[5]
}

func (x Ifm_Interfaces_Interface_IfOperEncapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfOperEncapType.Descriptor instead.
func (Ifm_Interfaces_Interface_IfOperEncapType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 5}
}

type Ifm_Interfaces_Interface_IfPhyType int32

const (
	Ifm_Interfaces_Interface_IfPhyType_ATM                Ifm_Interfaces_Interface_IfPhyType = 0
	Ifm_Interfaces_Interface_IfPhyType_ATMX_BUNDLE        Ifm_Interfaces_Interface_IfPhyType = 1
	Ifm_Interfaces_Interface_IfPhyType_CPOS               Ifm_Interfaces_Interface_IfPhyType = 2
	Ifm_Interfaces_Interface_IfPhyType_CPOSX_TRUNK        Ifm_Interfaces_Interface_IfPhyType = 3
	Ifm_Interfaces_Interface_IfPhyType_DCNINTERFACE       Ifm_Interfaces_Interface_IfPhyType = 4
	Ifm_Interfaces_Interface_IfPhyType_E1                 Ifm_Interfaces_Interface_IfPhyType = 5
	Ifm_Interfaces_Interface_IfPhyType_E3                 Ifm_Interfaces_Interface_IfPhyType = 6
	Ifm_Interfaces_Interface_IfPhyType_ETHERNET           Ifm_Interfaces_Interface_IfPhyType = 7
	Ifm_Interfaces_Interface_IfPhyType_ETHX_TRUNK         Ifm_Interfaces_Interface_IfPhyType = 8
	Ifm_Interfaces_Interface_IfPhyType_FABRICX_PORT       Ifm_Interfaces_Interface_IfPhyType = 9
	Ifm_Interfaces_Interface_IfPhyType_FC                 Ifm_Interfaces_Interface_IfPhyType = 10
	Ifm_Interfaces_Interface_IfPhyType_FCOEX_PORT         Ifm_Interfaces_Interface_IfPhyType = 11
	Ifm_Interfaces_Interface_IfPhyType_FIBERX_CHANNEL     Ifm_Interfaces_Interface_IfPhyType = 12
	Ifm_Interfaces_Interface_IfPhyType_FLEXE              Ifm_Interfaces_Interface_IfPhyType = 13
	Ifm_Interfaces_Interface_IfPhyType_FLEXEX_100G        Ifm_Interfaces_Interface_IfPhyType = 14
	Ifm_Interfaces_Interface_IfPhyType_FLEXEX_200GE       Ifm_Interfaces_Interface_IfPhyType = 15
	Ifm_Interfaces_Interface_IfPhyType_FLEXEX_400G        Ifm_Interfaces_Interface_IfPhyType = 16
	Ifm_Interfaces_Interface_IfPhyType_FLEXEX_50G         Ifm_Interfaces_Interface_IfPhyType = 17
	Ifm_Interfaces_Interface_IfPhyType_FLEXEX_50X_100G    Ifm_Interfaces_Interface_IfPhyType = 18
	Ifm_Interfaces_Interface_IfPhyType_GEBRIEF            Ifm_Interfaces_Interface_IfPhyType = 19
	Ifm_Interfaces_Interface_IfPhyType_GIGABITETHERNET    Ifm_Interfaces_Interface_IfPhyType = 20
	Ifm_Interfaces_Interface_IfPhyType_GLOBALX_IMAX_GROUP Ifm_Interfaces_Interface_IfPhyType = 21
	Ifm_Interfaces_Interface_IfPhyType_GLOBALX_MPX_GROUP  Ifm_Interfaces_Interface_IfPhyType = 22
	Ifm_Interfaces_Interface_IfPhyType_GLOBALX_VE         Ifm_Interfaces_Interface_IfPhyType = 23
	Ifm_Interfaces_Interface_IfPhyType_GMPLSX_UNI         Ifm_Interfaces_Interface_IfPhyType = 24
	Ifm_Interfaces_Interface_IfPhyType_HPGE               Ifm_Interfaces_Interface_IfPhyType = 25
	Ifm_Interfaces_Interface_IfPhyType_IMAX_GROUP         Ifm_Interfaces_Interface_IfPhyType = 26
	Ifm_Interfaces_Interface_IfPhyType_IMETH              Ifm_Interfaces_Interface_IfPhyType = 27
	Ifm_Interfaces_Interface_IfPhyType_INFINIBAND         Ifm_Interfaces_Interface_IfPhyType = 28
	Ifm_Interfaces_Interface_IfPhyType_IPX_TRUNK          Ifm_Interfaces_Interface_IfPhyType = 29
	Ifm_Interfaces_Interface_IfPhyType_LMPIF              Ifm_Interfaces_Interface_IfPhyType = 30
	Ifm_Interfaces_Interface_IfPhyType_LOOPBACK           Ifm_Interfaces_Interface_IfPhyType = 31
	Ifm_Interfaces_Interface_IfPhyType_METH               Ifm_Interfaces_Interface_IfPhyType = 32
	Ifm_Interfaces_Interface_IfPhyType_MPX_GROUP          Ifm_Interfaces_Interface_IfPhyType = 33
	Ifm_Interfaces_Interface_IfPhyType_MTUNNEL            Ifm_Interfaces_Interface_IfPhyType = 34
	Ifm_Interfaces_Interface_IfPhyType_NULL               Ifm_Interfaces_Interface_IfPhyType = 35
	Ifm_Interfaces_Interface_IfPhyType_NVE                Ifm_Interfaces_Interface_IfPhyType = 36
	Ifm_Interfaces_Interface_IfPhyType_OTN                Ifm_Interfaces_Interface_IfPhyType = 37
	Ifm_Interfaces_Interface_IfPhyType_POS                Ifm_Interfaces_Interface_IfPhyType = 38
	Ifm_Interfaces_Interface_IfPhyType_POSX_TRUNK         Ifm_Interfaces_Interface_IfPhyType = 39
	Ifm_Interfaces_Interface_IfPhyType_PWX_VE             Ifm_Interfaces_Interface_IfPhyType = 40
	Ifm_Interfaces_Interface_IfPhyType_REMOTEX_AP         Ifm_Interfaces_Interface_IfPhyType = 41
	Ifm_Interfaces_Interface_IfPhyType_SERIAL             Ifm_Interfaces_Interface_IfPhyType = 42
	Ifm_Interfaces_Interface_IfPhyType_SERVICEIF          Ifm_Interfaces_Interface_IfPhyType = 43
	Ifm_Interfaces_Interface_IfPhyType_SIP                Ifm_Interfaces_Interface_IfPhyType = 44
	Ifm_Interfaces_Interface_IfPhyType_STACKX_PORT        Ifm_Interfaces_Interface_IfPhyType = 45
	Ifm_Interfaces_Interface_IfPhyType_T1                 Ifm_Interfaces_Interface_IfPhyType = 46
	Ifm_Interfaces_Interface_IfPhyType_T3                 Ifm_Interfaces_Interface_IfPhyType = 47
	Ifm_Interfaces_Interface_IfPhyType_TRUNKX_SERIAL      Ifm_Interfaces_Interface_IfPhyType = 48
	Ifm_Interfaces_Interface_IfPhyType_TUNNEL             Ifm_Interfaces_Interface_IfPhyType = 49
	Ifm_Interfaces_Interface_IfPhyType_VBDIF              Ifm_Interfaces_Interface_IfPhyType = 50
	Ifm_Interfaces_Interface_IfPhyType_VBRIDGE            Ifm_Interfaces_Interface_IfPhyType = 51
	Ifm_Interfaces_Interface_IfPhyType_VC12               Ifm_Interfaces_Interface_IfPhyType = 52
	Ifm_Interfaces_Interface_IfPhyType_VC4                Ifm_Interfaces_Interface_IfPhyType = 53
	Ifm_Interfaces_Interface_IfPhyType_VIRTUALX_ETHERNET  Ifm_Interfaces_Interface_IfPhyType = 54
	Ifm_Interfaces_Interface_IfPhyType_VIRTUALX_ODUK      Ifm_Interfaces_Interface_IfPhyType = 55
	Ifm_Interfaces_Interface_IfPhyType_VIRTUALX_SERIAL    Ifm_Interfaces_Interface_IfPhyType = 56
	Ifm_Interfaces_Interface_IfPhyType_VIRTUALX_TEMPLATE  Ifm_Interfaces_Interface_IfPhyType = 57
	Ifm_Interfaces_Interface_IfPhyType_VLANIF             Ifm_Interfaces_Interface_IfPhyType = 58
	Ifm_Interfaces_Interface_IfPhyType_VMETH              Ifm_Interfaces_Interface_IfPhyType = 59
	Ifm_Interfaces_Interface_IfPhyType_VP                 Ifm_Interfaces_Interface_IfPhyType = 60
	Ifm_Interfaces_Interface_IfPhyType_VXX_TUNNEL         Ifm_Interfaces_Interface_IfPhyType = 61
	Ifm_Interfaces_Interface_IfPhyType_WDM                Ifm_Interfaces_Interface_IfPhyType = 62
	Ifm_Interfaces_Interface_IfPhyType_XGIGABITETHERNET   Ifm_Interfaces_Interface_IfPhyType = 63
	Ifm_Interfaces_Interface_IfPhyType_X_100GE            Ifm_Interfaces_Interface_IfPhyType = 64
	Ifm_Interfaces_Interface_IfPhyType_X_10GE             Ifm_Interfaces_Interface_IfPhyType = 65
	Ifm_Interfaces_Interface_IfPhyType_X_10X10GE          Ifm_Interfaces_Interface_IfPhyType = 66
	Ifm_Interfaces_Interface_IfPhyType_X_200GE            Ifm_Interfaces_Interface_IfPhyType = 67
	Ifm_Interfaces_Interface_IfPhyType_X_25GE             Ifm_Interfaces_Interface_IfPhyType = 68
	Ifm_Interfaces_Interface_IfPhyType_X_3X40GE           Ifm_Interfaces_Interface_IfPhyType = 69
	Ifm_Interfaces_Interface_IfPhyType_X_400GE            Ifm_Interfaces_Interface_IfPhyType = 70
	Ifm_Interfaces_Interface_IfPhyType_X_40GE             Ifm_Interfaces_Interface_IfPhyType = 71
	Ifm_Interfaces_Interface_IfPhyType_X_4X10GE           Ifm_Interfaces_Interface_IfPhyType = 72
	Ifm_Interfaces_Interface_IfPhyType_X_4X25GE           Ifm_Interfaces_Interface_IfPhyType = 73
	Ifm_Interfaces_Interface_IfPhyType_X_50GE             Ifm_Interfaces_Interface_IfPhyType = 74
	Ifm_Interfaces_Interface_IfPhyType_X_50X_100GE        Ifm_Interfaces_Interface_IfPhyType = 75
)

// Enum value maps for Ifm_Interfaces_Interface_IfPhyType.
var (
	Ifm_Interfaces_Interface_IfPhyType_name = map[int32]string{
		0:  "IfPhyType_ATM",
		1:  "IfPhyType_ATMX_BUNDLE",
		2:  "IfPhyType_CPOS",
		3:  "IfPhyType_CPOSX_TRUNK",
		4:  "IfPhyType_DCNINTERFACE",
		5:  "IfPhyType_E1",
		6:  "IfPhyType_E3",
		7:  "IfPhyType_ETHERNET",
		8:  "IfPhyType_ETHX_TRUNK",
		9:  "IfPhyType_FABRICX_PORT",
		10: "IfPhyType_FC",
		11: "IfPhyType_FCOEX_PORT",
		12: "IfPhyType_FIBERX_CHANNEL",
		13: "IfPhyType_FLEXE",
		14: "IfPhyType_FLEXEX_100G",
		15: "IfPhyType_FLEXEX_200GE",
		16: "IfPhyType_FLEXEX_400G",
		17: "IfPhyType_FLEXEX_50G",
		18: "IfPhyType_FLEXEX_50X_100G",
		19: "IfPhyType_GEBRIEF",
		20: "IfPhyType_GIGABITETHERNET",
		21: "IfPhyType_GLOBALX_IMAX_GROUP",
		22: "IfPhyType_GLOBALX_MPX_GROUP",
		23: "IfPhyType_GLOBALX_VE",
		24: "IfPhyType_GMPLSX_UNI",
		25: "IfPhyType_HPGE",
		26: "IfPhyType_IMAX_GROUP",
		27: "IfPhyType_IMETH",
		28: "IfPhyType_INFINIBAND",
		29: "IfPhyType_IPX_TRUNK",
		30: "IfPhyType_LMPIF",
		31: "IfPhyType_LOOPBACK",
		32: "IfPhyType_METH",
		33: "IfPhyType_MPX_GROUP",
		34: "IfPhyType_MTUNNEL",
		35: "IfPhyType_NULL",
		36: "IfPhyType_NVE",
		37: "IfPhyType_OTN",
		38: "IfPhyType_POS",
		39: "IfPhyType_POSX_TRUNK",
		40: "IfPhyType_PWX_VE",
		41: "IfPhyType_REMOTEX_AP",
		42: "IfPhyType_SERIAL",
		43: "IfPhyType_SERVICEIF",
		44: "IfPhyType_SIP",
		45: "IfPhyType_STACKX_PORT",
		46: "IfPhyType_T1",
		47: "IfPhyType_T3",
		48: "IfPhyType_TRUNKX_SERIAL",
		49: "IfPhyType_TUNNEL",
		50: "IfPhyType_VBDIF",
		51: "IfPhyType_VBRIDGE",
		52: "IfPhyType_VC12",
		53: "IfPhyType_VC4",
		54: "IfPhyType_VIRTUALX_ETHERNET",
		55: "IfPhyType_VIRTUALX_ODUK",
		56: "IfPhyType_VIRTUALX_SERIAL",
		57: "IfPhyType_VIRTUALX_TEMPLATE",
		58: "IfPhyType_VLANIF",
		59: "IfPhyType_VMETH",
		60: "IfPhyType_VP",
		61: "IfPhyType_VXX_TUNNEL",
		62: "IfPhyType_WDM",
		63: "IfPhyType_XGIGABITETHERNET",
		64: "IfPhyType_X_100GE",
		65: "IfPhyType_X_10GE",
		66: "IfPhyType_X_10X10GE",
		67: "IfPhyType_X_200GE",
		68: "IfPhyType_X_25GE",
		69: "IfPhyType_X_3X40GE",
		70: "IfPhyType_X_400GE",
		71: "IfPhyType_X_40GE",
		72: "IfPhyType_X_4X10GE",
		73: "IfPhyType_X_4X25GE",
		74: "IfPhyType_X_50GE",
		75: "IfPhyType_X_50X_100GE",
	}
	Ifm_Interfaces_Interface_IfPhyType_value = map[string]int32{
		"IfPhyType_ATM":                0,
		"IfPhyType_ATMX_BUNDLE":        1,
		"IfPhyType_CPOS":               2,
		"IfPhyType_CPOSX_TRUNK":        3,
		"IfPhyType_DCNINTERFACE":       4,
		"IfPhyType_E1":                 5,
		"IfPhyType_E3":                 6,
		"IfPhyType_ETHERNET":           7,
		"IfPhyType_ETHX_TRUNK":         8,
		"IfPhyType_FABRICX_PORT":       9,
		"IfPhyType_FC":                 10,
		"IfPhyType_FCOEX_PORT":         11,
		"IfPhyType_FIBERX_CHANNEL":     12,
		"IfPhyType_FLEXE":              13,
		"IfPhyType_FLEXEX_100G":        14,
		"IfPhyType_FLEXEX_200GE":       15,
		"IfPhyType_FLEXEX_400G":        16,
		"IfPhyType_FLEXEX_50G":         17,
		"IfPhyType_FLEXEX_50X_100G":    18,
		"IfPhyType_GEBRIEF":            19,
		"IfPhyType_GIGABITETHERNET":    20,
		"IfPhyType_GLOBALX_IMAX_GROUP": 21,
		"IfPhyType_GLOBALX_MPX_GROUP":  22,
		"IfPhyType_GLOBALX_VE":         23,
		"IfPhyType_GMPLSX_UNI":         24,
		"IfPhyType_HPGE":               25,
		"IfPhyType_IMAX_GROUP":         26,
		"IfPhyType_IMETH":              27,
		"IfPhyType_INFINIBAND":         28,
		"IfPhyType_IPX_TRUNK":          29,
		"IfPhyType_LMPIF":              30,
		"IfPhyType_LOOPBACK":           31,
		"IfPhyType_METH":               32,
		"IfPhyType_MPX_GROUP":          33,
		"IfPhyType_MTUNNEL":            34,
		"IfPhyType_NULL":               35,
		"IfPhyType_NVE":                36,
		"IfPhyType_OTN":                37,
		"IfPhyType_POS":                38,
		"IfPhyType_POSX_TRUNK":         39,
		"IfPhyType_PWX_VE":             40,
		"IfPhyType_REMOTEX_AP":         41,
		"IfPhyType_SERIAL":             42,
		"IfPhyType_SERVICEIF":          43,
		"IfPhyType_SIP":                44,
		"IfPhyType_STACKX_PORT":        45,
		"IfPhyType_T1":                 46,
		"IfPhyType_T3":                 47,
		"IfPhyType_TRUNKX_SERIAL":      48,
		"IfPhyType_TUNNEL":             49,
		"IfPhyType_VBDIF":              50,
		"IfPhyType_VBRIDGE":            51,
		"IfPhyType_VC12":               52,
		"IfPhyType_VC4":                53,
		"IfPhyType_VIRTUALX_ETHERNET":  54,
		"IfPhyType_VIRTUALX_ODUK":      55,
		"IfPhyType_VIRTUALX_SERIAL":    56,
		"IfPhyType_VIRTUALX_TEMPLATE":  57,
		"IfPhyType_VLANIF":             58,
		"IfPhyType_VMETH":              59,
		"IfPhyType_VP":                 60,
		"IfPhyType_VXX_TUNNEL":         61,
		"IfPhyType_WDM":                62,
		"IfPhyType_XGIGABITETHERNET":   63,
		"IfPhyType_X_100GE":            64,
		"IfPhyType_X_10GE":             65,
		"IfPhyType_X_10X10GE":          66,
		"IfPhyType_X_200GE":            67,
		"IfPhyType_X_25GE":             68,
		"IfPhyType_X_3X40GE":           69,
		"IfPhyType_X_400GE":            70,
		"IfPhyType_X_40GE":             71,
		"IfPhyType_X_4X10GE":           72,
		"IfPhyType_X_4X25GE":           73,
		"IfPhyType_X_50GE":             74,
		"IfPhyType_X_50X_100GE":        75,
	}
)

func (x Ifm_Interfaces_Interface_IfPhyType) Enum() *Ifm_Interfaces_Interface_IfPhyType {
	p := new(Ifm_Interfaces_Interface_IfPhyType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfPhyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfPhyType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[6].Descriptor()
}

func (Ifm_Interfaces_Interface_IfPhyType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[6]
}

func (x Ifm_Interfaces_Interface_IfPhyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfPhyType.Descriptor instead.
func (Ifm_Interfaces_Interface_IfPhyType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 6}
}

type Ifm_Interfaces_Interface_IfRouterType int32

const (
	Ifm_Interfaces_Interface_IfRouterType_BROADCAST Ifm_Interfaces_Interface_IfRouterType = 0
	Ifm_Interfaces_Interface_IfRouterType_INVALID   Ifm_Interfaces_Interface_IfRouterType = 1
	Ifm_Interfaces_Interface_IfRouterType_NBMA      Ifm_Interfaces_Interface_IfRouterType = 2
	Ifm_Interfaces_Interface_IfRouterType_PTOMP     Ifm_Interfaces_Interface_IfRouterType = 3
	Ifm_Interfaces_Interface_IfRouterType_PTOP      Ifm_Interfaces_Interface_IfRouterType = 4
)

// Enum value maps for Ifm_Interfaces_Interface_IfRouterType.
var (
	Ifm_Interfaces_Interface_IfRouterType_name = map[int32]string{
		0: "IfRouterType_BROADCAST",
		1: "IfRouterType_INVALID",
		2: "IfRouterType_NBMA",
		3: "IfRouterType_PTOMP",
		4: "IfRouterType_PTOP",
	}
	Ifm_Interfaces_Interface_IfRouterType_value = map[string]int32{
		"IfRouterType_BROADCAST": 0,
		"IfRouterType_INVALID":   1,
		"IfRouterType_NBMA":      2,
		"IfRouterType_PTOMP":     3,
		"IfRouterType_PTOP":      4,
	}
)

func (x Ifm_Interfaces_Interface_IfRouterType) Enum() *Ifm_Interfaces_Interface_IfRouterType {
	p := new(Ifm_Interfaces_Interface_IfRouterType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfRouterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfRouterType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[7].Descriptor()
}

func (Ifm_Interfaces_Interface_IfRouterType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[7]
}

func (x Ifm_Interfaces_Interface_IfRouterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfRouterType.Descriptor instead.
func (Ifm_Interfaces_Interface_IfRouterType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 7}
}

type Ifm_Interfaces_Interface_IfServiceType int32

const (
	Ifm_Interfaces_Interface_IfServiceType_BUNDLEMEMBER    Ifm_Interfaces_Interface_IfServiceType = 0
	Ifm_Interfaces_Interface_IfServiceType_CPOSTRUNKMEMBER Ifm_Interfaces_Interface_IfServiceType = 1
	Ifm_Interfaces_Interface_IfServiceType_FABRICMEMBER    Ifm_Interfaces_Interface_IfServiceType = 2
	Ifm_Interfaces_Interface_IfServiceType_GLOBALIMAMEMBER Ifm_Interfaces_Interface_IfServiceType = 3
	Ifm_Interfaces_Interface_IfServiceType_GLOBALMPMEMBER  Ifm_Interfaces_Interface_IfServiceType = 4
	Ifm_Interfaces_Interface_IfServiceType_IMAMEMBER       Ifm_Interfaces_Interface_IfServiceType = 5
	Ifm_Interfaces_Interface_IfServiceType_LAGMASTERMEMBER Ifm_Interfaces_Interface_IfServiceType = 6
	Ifm_Interfaces_Interface_IfServiceType_LAGSLAVEMEMBER  Ifm_Interfaces_Interface_IfServiceType = 7
	Ifm_Interfaces_Interface_IfServiceType_MPMEMBER        Ifm_Interfaces_Interface_IfServiceType = 8
	Ifm_Interfaces_Interface_IfServiceType_NONE            Ifm_Interfaces_Interface_IfServiceType = 9
	Ifm_Interfaces_Interface_IfServiceType_POSTRUNKMEMBER  Ifm_Interfaces_Interface_IfServiceType = 10
	Ifm_Interfaces_Interface_IfServiceType_STACKMEMBER     Ifm_Interfaces_Interface_IfServiceType = 11
	Ifm_Interfaces_Interface_IfServiceType_TRUNKMEMBER     Ifm_Interfaces_Interface_IfServiceType = 12
	Ifm_Interfaces_Interface_IfServiceType_VBRIDGEMEMBER   Ifm_Interfaces_Interface_IfServiceType = 13
)

// Enum value maps for Ifm_Interfaces_Interface_IfServiceType.
var (
	Ifm_Interfaces_Interface_IfServiceType_name = map[int32]string{
		0:  "IfServiceType_BUNDLEMEMBER",
		1:  "IfServiceType_CPOSTRUNKMEMBER",
		2:  "IfServiceType_FABRICMEMBER",
		3:  "IfServiceType_GLOBALIMAMEMBER",
		4:  "IfServiceType_GLOBALMPMEMBER",
		5:  "IfServiceType_IMAMEMBER",
		6:  "IfServiceType_LAGMASTERMEMBER",
		7:  "IfServiceType_LAGSLAVEMEMBER",
		8:  "IfServiceType_MPMEMBER",
		9:  "IfServiceType_NONE",
		10: "IfServiceType_POSTRUNKMEMBER",
		11: "IfServiceType_STACKMEMBER",
		12: "IfServiceType_TRUNKMEMBER",
		13: "IfServiceType_VBRIDGEMEMBER",
	}
	Ifm_Interfaces_Interface_IfServiceType_value = map[string]int32{
		"IfServiceType_BUNDLEMEMBER":    0,
		"IfServiceType_CPOSTRUNKMEMBER": 1,
		"IfServiceType_FABRICMEMBER":    2,
		"IfServiceType_GLOBALIMAMEMBER": 3,
		"IfServiceType_GLOBALMPMEMBER":  4,
		"IfServiceType_IMAMEMBER":       5,
		"IfServiceType_LAGMASTERMEMBER": 6,
		"IfServiceType_LAGSLAVEMEMBER":  7,
		"IfServiceType_MPMEMBER":        8,
		"IfServiceType_NONE":            9,
		"IfServiceType_POSTRUNKMEMBER":  10,
		"IfServiceType_STACKMEMBER":     11,
		"IfServiceType_TRUNKMEMBER":     12,
		"IfServiceType_VBRIDGEMEMBER":   13,
	}
)

func (x Ifm_Interfaces_Interface_IfServiceType) Enum() *Ifm_Interfaces_Interface_IfServiceType {
	p := new(Ifm_Interfaces_Interface_IfServiceType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[8].Descriptor()
}

func (Ifm_Interfaces_Interface_IfServiceType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[8]
}

func (x Ifm_Interfaces_Interface_IfServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfServiceType.Descriptor instead.
func (Ifm_Interfaces_Interface_IfServiceType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 8}
}

type Ifm_Interfaces_Interface_PortMode int32

const (
	Ifm_Interfaces_Interface_PortMode_L2  Ifm_Interfaces_Interface_PortMode = 0
	Ifm_Interfaces_Interface_PortMode_L3  Ifm_Interfaces_Interface_PortMode = 1
	Ifm_Interfaces_Interface_PortMode_MIX Ifm_Interfaces_Interface_PortMode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_PortMode.
var (
	Ifm_Interfaces_Interface_PortMode_name = map[int32]string{
		0: "PortMode_L2",
		1: "PortMode_L3",
		2: "PortMode_MIX",
	}
	Ifm_Interfaces_Interface_PortMode_value = map[string]int32{
		"PortMode_L2":  0,
		"PortMode_L3":  1,
		"PortMode_MIX": 2,
	}
)

func (x Ifm_Interfaces_Interface_PortMode) Enum() *Ifm_Interfaces_Interface_PortMode {
	p := new(Ifm_Interfaces_Interface_PortMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PortMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PortMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[9].Descriptor()
}

func (Ifm_Interfaces_Interface_PortMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[9]
}

func (x Ifm_Interfaces_Interface_PortMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PortMode.Descriptor instead.
func (Ifm_Interfaces_Interface_PortMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 9}
}

type Ifm_Interfaces_Interface_StatMode int32

const (
	Ifm_Interfaces_Interface_StatMode_BASEINTERFACE Ifm_Interfaces_Interface_StatMode = 0
	Ifm_Interfaces_Interface_StatMode_BASEVLANGROUP Ifm_Interfaces_Interface_StatMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_StatMode.
var (
	Ifm_Interfaces_Interface_StatMode_name = map[int32]string{
		0: "StatMode_BASEINTERFACE",
		1: "StatMode_BASEVLANGROUP",
	}
	Ifm_Interfaces_Interface_StatMode_value = map[string]int32{
		"StatMode_BASEINTERFACE": 0,
		"StatMode_BASEVLANGROUP": 1,
	}
)

func (x Ifm_Interfaces_Interface_StatMode) Enum() *Ifm_Interfaces_Interface_StatMode {
	p := new(Ifm_Interfaces_Interface_StatMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_StatMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_StatMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[10].Descriptor()
}

func (Ifm_Interfaces_Interface_StatMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[10]
}

func (x Ifm_Interfaces_Interface_StatMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_StatMode.Descriptor instead.
func (Ifm_Interfaces_Interface_StatMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 10}
}

type Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus int32

const (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus_DOWN Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus = 0
	Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus_UP   Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus.
var (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus_name = map[int32]string{
		0: "IfOperStatus_DOWN",
		1: "IfOperStatus_UP",
	}
	Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus_value = map[string]int32{
		"IfOperStatus_DOWN": 0,
		"IfOperStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus) Enum() *Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus {
	p := new(Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[11].Descriptor()
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[11]
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

type Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade int32

const (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade_GOOD   Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade = 0
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade_HIGH   Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade = 1
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade_LOW    Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade = 2
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade_MIDDLE Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade = 3
)

// Enum value maps for Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade.
var (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade_name = map[int32]string{
		0: "IfLinkQualityGrade_GOOD",
		1: "IfLinkQualityGrade_HIGH",
		2: "IfLinkQualityGrade_LOW",
		3: "IfLinkQualityGrade_MIDDLE",
	}
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade_value = map[string]int32{
		"IfLinkQualityGrade_GOOD":   0,
		"IfLinkQualityGrade_HIGH":   1,
		"IfLinkQualityGrade_LOW":    2,
		"IfLinkQualityGrade_MIDDLE": 3,
	}
)

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade) Enum() *Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade {
	p := new(Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[12].Descriptor()
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[12]
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade.Descriptor instead.
func (Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

type Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus int32

const (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus_DOWN Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus = 0
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus_UP   Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus.
var (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus_name = map[int32]string{
		0: "IfLinkStatus_DOWN",
		1: "IfLinkStatus_UP",
	}
	Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus_value = map[string]int32{
		"IfLinkStatus_DOWN": 0,
		"IfLinkStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus) Enum() *Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus {
	p := new(Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[13].Descriptor()
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[13]
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 1, 2}
}

type Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus int32

const (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus_DOWN Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus = 0
	Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus_UP   Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus.
var (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus_name = map[int32]string{
		0: "IfPhyStatus_DOWN",
		1: "IfPhyStatus_UP",
	}
	Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus_value = map[string]int32{
		"IfPhyStatus_DOWN": 0,
		"IfPhyStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus) Enum() *Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus {
	p := new(Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[14].Descriptor()
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[14]
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 1, 3}
}

type Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State int32

const (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State_DOWN Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State = 0
	Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State_UP   Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State.
var (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State_name = map[int32]string{
		0: "IfV4State_DOWN",
		1: "IfV4State_UP",
	}
	Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State_value = map[string]int32{
		"IfV4State_DOWN": 0,
		"IfV4State_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State) Enum() *Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State {
	p := new(Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[15].Descriptor()
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[15]
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State.Descriptor instead.
func (Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 1, 4}
}

type Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State int32

const (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State_DOWN Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State = 0
	Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State_UP   Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State.
var (
	Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State_name = map[int32]string{
		0: "IfV6State_DOWN",
		1: "IfV6State_UP",
	}
	Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State_value = map[string]int32{
		"IfV6State_DOWN": 0,
		"IfV6State_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State) Enum() *Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State {
	p := new(Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[16].Descriptor()
}

func (Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[16]
}

func (x Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State.Descriptor instead.
func (Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 1, 5}
}

type Ifm_Interfaces_Interface_ForwardMode_VeForwarMode int32

const (
	Ifm_Interfaces_Interface_ForwardMode_VeForwarMode_HALFX_THROUGH Ifm_Interfaces_Interface_ForwardMode_VeForwarMode = 0
	Ifm_Interfaces_Interface_ForwardMode_VeForwarMode_INVALID       Ifm_Interfaces_Interface_ForwardMode_VeForwarMode = 1
	Ifm_Interfaces_Interface_ForwardMode_VeForwarMode_LOOPBACK      Ifm_Interfaces_Interface_ForwardMode_VeForwarMode = 2
	Ifm_Interfaces_Interface_ForwardMode_VeForwarMode_THROUGH       Ifm_Interfaces_Interface_ForwardMode_VeForwarMode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_ForwardMode_VeForwarMode.
var (
	Ifm_Interfaces_Interface_ForwardMode_VeForwarMode_name = map[int32]string{
		0: "VeForwarMode_HALFX_THROUGH",
		1: "VeForwarMode_INVALID",
		2: "VeForwarMode_LOOPBACK",
		3: "VeForwarMode_THROUGH",
	}
	Ifm_Interfaces_Interface_ForwardMode_VeForwarMode_value = map[string]int32{
		"VeForwarMode_HALFX_THROUGH": 0,
		"VeForwarMode_INVALID":       1,
		"VeForwarMode_LOOPBACK":      2,
		"VeForwarMode_THROUGH":       3,
	}
)

func (x Ifm_Interfaces_Interface_ForwardMode_VeForwarMode) Enum() *Ifm_Interfaces_Interface_ForwardMode_VeForwarMode {
	p := new(Ifm_Interfaces_Interface_ForwardMode_VeForwarMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ForwardMode_VeForwarMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ForwardMode_VeForwarMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[17].Descriptor()
}

func (Ifm_Interfaces_Interface_ForwardMode_VeForwarMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[17]
}

func (x Ifm_Interfaces_Interface_ForwardMode_VeForwarMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ForwardMode_VeForwarMode.Descriptor instead.
func (Ifm_Interfaces_Interface_ForwardMode_VeForwarMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 4, 0}
}

type Ifm_Interfaces_Interface_Fr_IfType int32

const (
	Ifm_Interfaces_Interface_Fr_IfType_DCE Ifm_Interfaces_Interface_Fr_IfType = 0
	Ifm_Interfaces_Interface_Fr_IfType_DTE Ifm_Interfaces_Interface_Fr_IfType = 1
	Ifm_Interfaces_Interface_Fr_IfType_NNI Ifm_Interfaces_Interface_Fr_IfType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Fr_IfType.
var (
	Ifm_Interfaces_Interface_Fr_IfType_name = map[int32]string{
		0: "IfType_DCE",
		1: "IfType_DTE",
		2: "IfType_NNI",
	}
	Ifm_Interfaces_Interface_Fr_IfType_value = map[string]int32{
		"IfType_DCE": 0,
		"IfType_DTE": 1,
		"IfType_NNI": 2,
	}
)

func (x Ifm_Interfaces_Interface_Fr_IfType) Enum() *Ifm_Interfaces_Interface_Fr_IfType {
	p := new(Ifm_Interfaces_Interface_Fr_IfType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Fr_IfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Fr_IfType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[18].Descriptor()
}

func (Ifm_Interfaces_Interface_Fr_IfType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[18]
}

func (x Ifm_Interfaces_Interface_Fr_IfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Fr_IfType.Descriptor instead.
func (Ifm_Interfaces_Interface_Fr_IfType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 5, 0}
}

type Ifm_Interfaces_Interface_Fr_LmiType int32

const (
	Ifm_Interfaces_Interface_Fr_LmiType_ANSI        Ifm_Interfaces_Interface_Fr_LmiType = 0
	Ifm_Interfaces_Interface_Fr_LmiType_NONSTANDARD Ifm_Interfaces_Interface_Fr_LmiType = 1
	Ifm_Interfaces_Interface_Fr_LmiType_Q933A       Ifm_Interfaces_Interface_Fr_LmiType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Fr_LmiType.
var (
	Ifm_Interfaces_Interface_Fr_LmiType_name = map[int32]string{
		0: "LmiType_ANSI",
		1: "LmiType_NONSTANDARD",
		2: "LmiType_Q933A",
	}
	Ifm_Interfaces_Interface_Fr_LmiType_value = map[string]int32{
		"LmiType_ANSI":        0,
		"LmiType_NONSTANDARD": 1,
		"LmiType_Q933A":       2,
	}
)

func (x Ifm_Interfaces_Interface_Fr_LmiType) Enum() *Ifm_Interfaces_Interface_Fr_LmiType {
	p := new(Ifm_Interfaces_Interface_Fr_LmiType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Fr_LmiType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Fr_LmiType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[19].Descriptor()
}

func (Ifm_Interfaces_Interface_Fr_LmiType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[19]
}

func (x Ifm_Interfaces_Interface_Fr_LmiType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Fr_LmiType.Descriptor instead.
func (Ifm_Interfaces_Interface_Fr_LmiType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 5, 1}
}

type Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable int32

const (
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable_DISABLE  Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable = 0
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable_ENABLE   Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable = 1
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable_INBOUND  Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable = 2
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable_OUTBOUND Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable = 3
)

// Enum value maps for Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable.
var (
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable_name = map[int32]string{
		0: "IfIpStatiEnable_DISABLE",
		1: "IfIpStatiEnable_ENABLE",
		2: "IfIpStatiEnable_INBOUND",
		3: "IfIpStatiEnable_OUTBOUND",
	}
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable_value = map[string]int32{
		"IfIpStatiEnable_DISABLE":  0,
		"IfIpStatiEnable_ENABLE":   1,
		"IfIpStatiEnable_INBOUND":  2,
		"IfIpStatiEnable_OUTBOUND": 3,
	}
)

func (x Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable) Enum() *Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable {
	p := new(Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[20].Descriptor()
}

func (Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[20]
}

func (x Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 7, 0}
}

type Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable int32

const (
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable_DISABLE  Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable = 0
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable_ENABLE   Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable = 1
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable_INBOUND  Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable = 2
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable_OUTBOUND Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable = 3
)

// Enum value maps for Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable.
var (
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable_name = map[int32]string{
		0: "IfIpStatiIpv4Enable_DISABLE",
		1: "IfIpStatiIpv4Enable_ENABLE",
		2: "IfIpStatiIpv4Enable_INBOUND",
		3: "IfIpStatiIpv4Enable_OUTBOUND",
	}
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable_value = map[string]int32{
		"IfIpStatiIpv4Enable_DISABLE":  0,
		"IfIpStatiIpv4Enable_ENABLE":   1,
		"IfIpStatiIpv4Enable_INBOUND":  2,
		"IfIpStatiIpv4Enable_OUTBOUND": 3,
	}
)

func (x Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable) Enum() *Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable {
	p := new(Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[21].Descriptor()
}

func (Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[21]
}

func (x Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable.Descriptor instead.
func (Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 7, 1}
}

type Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable int32

const (
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable_DISABLE  Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable = 0
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable_ENABLE   Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable = 1
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable_INBOUND  Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable = 2
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable_OUTBOUND Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable = 3
)

// Enum value maps for Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable.
var (
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable_name = map[int32]string{
		0: "IfIpStatiIpv6Enable_DISABLE",
		1: "IfIpStatiIpv6Enable_ENABLE",
		2: "IfIpStatiIpv6Enable_INBOUND",
		3: "IfIpStatiIpv6Enable_OUTBOUND",
	}
	Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable_value = map[string]int32{
		"IfIpStatiIpv6Enable_DISABLE":  0,
		"IfIpStatiIpv6Enable_ENABLE":   1,
		"IfIpStatiIpv6Enable_INBOUND":  2,
		"IfIpStatiIpv6Enable_OUTBOUND": 3,
	}
)

func (x Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable) Enum() *Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable {
	p := new(Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[22].Descriptor()
}

func (Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[22]
}

func (x Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable.Descriptor instead.
func (Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 7, 2}
}

type Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause int32

const (
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_AUTOX_DEFEND                       Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 0
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_BPDUX_PROTECTION                   Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 1
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_CRCX_STATISTICS                    Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 2
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_DUALX_ACTIVE                       Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 3
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_FABRICX_LINKX_FAILURE              Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 4
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_FABRICX_UPLINKX_THRESHOLD          Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 5
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_FORWARDX_ENGINEX_BUFFERX_FAILED    Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 6
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_FORWARDX_ENGINEX_INTERFACEX_FAILED Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 7
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_INVALID                            Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 8
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_L2X_LOOPX_OCCURED                  Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 9
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_LEAFX_MSTP                         Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 10
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_LINKX_FLAP                         Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 11
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_LOOPBACKX_DETECT                   Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 12
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_MACX_ADDRESSX_FLAPPING             Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 13
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_MONITORX_LINK                      Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 14
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_MX_LAG                             Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 15
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_MX_LAGX_CONSISTENCYX_CHECK         Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 16
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_NOX_STACKX_LINK                    Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 17
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_PORTSECX_REACHEDLIMIT              Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 18
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_RESOURCEX_MISMATCH                 Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 19
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_SPINEX_MEMBERX_EXCEEDX_LIMIT       Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 20
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_SPINEX_TYPEX_UNSUPPORTED           Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 21
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_STACKX_CONFIGX_CONFLICT            Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 22
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_STACKX_MEMBERX_EXCEEDX_LIMIT       Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 23
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_STACKX_PACKETX_DEFENSIVE           Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 24
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_STORMX_CONTROL                     Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 25
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_TRANSCEIVERX_POWERX_LOW            Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause = 26
)

// Enum value maps for Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause.
var (
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_name = map[int32]string{
		0:  "ErrorDownCause_AUTOX_DEFEND",
		1:  "ErrorDownCause_BPDUX_PROTECTION",
		2:  "ErrorDownCause_CRCX_STATISTICS",
		3:  "ErrorDownCause_DUALX_ACTIVE",
		4:  "ErrorDownCause_FABRICX_LINKX_FAILURE",
		5:  "ErrorDownCause_FABRICX_UPLINKX_THRESHOLD",
		6:  "ErrorDownCause_FORWARDX_ENGINEX_BUFFERX_FAILED",
		7:  "ErrorDownCause_FORWARDX_ENGINEX_INTERFACEX_FAILED",
		8:  "ErrorDownCause_INVALID",
		9:  "ErrorDownCause_L2X_LOOPX_OCCURED",
		10: "ErrorDownCause_LEAFX_MSTP",
		11: "ErrorDownCause_LINKX_FLAP",
		12: "ErrorDownCause_LOOPBACKX_DETECT",
		13: "ErrorDownCause_MACX_ADDRESSX_FLAPPING",
		14: "ErrorDownCause_MONITORX_LINK",
		15: "ErrorDownCause_MX_LAG",
		16: "ErrorDownCause_MX_LAGX_CONSISTENCYX_CHECK",
		17: "ErrorDownCause_NOX_STACKX_LINK",
		18: "ErrorDownCause_PORTSECX_REACHEDLIMIT",
		19: "ErrorDownCause_RESOURCEX_MISMATCH",
		20: "ErrorDownCause_SPINEX_MEMBERX_EXCEEDX_LIMIT",
		21: "ErrorDownCause_SPINEX_TYPEX_UNSUPPORTED",
		22: "ErrorDownCause_STACKX_CONFIGX_CONFLICT",
		23: "ErrorDownCause_STACKX_MEMBERX_EXCEEDX_LIMIT",
		24: "ErrorDownCause_STACKX_PACKETX_DEFENSIVE",
		25: "ErrorDownCause_STORMX_CONTROL",
		26: "ErrorDownCause_TRANSCEIVERX_POWERX_LOW",
	}
	Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_value = map[string]int32{
		"ErrorDownCause_AUTOX_DEFEND":                       0,
		"ErrorDownCause_BPDUX_PROTECTION":                   1,
		"ErrorDownCause_CRCX_STATISTICS":                    2,
		"ErrorDownCause_DUALX_ACTIVE":                       3,
		"ErrorDownCause_FABRICX_LINKX_FAILURE":              4,
		"ErrorDownCause_FABRICX_UPLINKX_THRESHOLD":          5,
		"ErrorDownCause_FORWARDX_ENGINEX_BUFFERX_FAILED":    6,
		"ErrorDownCause_FORWARDX_ENGINEX_INTERFACEX_FAILED": 7,
		"ErrorDownCause_INVALID":                            8,
		"ErrorDownCause_L2X_LOOPX_OCCURED":                  9,
		"ErrorDownCause_LEAFX_MSTP":                         10,
		"ErrorDownCause_LINKX_FLAP":                         11,
		"ErrorDownCause_LOOPBACKX_DETECT":                   12,
		"ErrorDownCause_MACX_ADDRESSX_FLAPPING":             13,
		"ErrorDownCause_MONITORX_LINK":                      14,
		"ErrorDownCause_MX_LAG":                             15,
		"ErrorDownCause_MX_LAGX_CONSISTENCYX_CHECK":         16,
		"ErrorDownCause_NOX_STACKX_LINK":                    17,
		"ErrorDownCause_PORTSECX_REACHEDLIMIT":              18,
		"ErrorDownCause_RESOURCEX_MISMATCH":                 19,
		"ErrorDownCause_SPINEX_MEMBERX_EXCEEDX_LIMIT":       20,
		"ErrorDownCause_SPINEX_TYPEX_UNSUPPORTED":           21,
		"ErrorDownCause_STACKX_CONFIGX_CONFLICT":            22,
		"ErrorDownCause_STACKX_MEMBERX_EXCEEDX_LIMIT":       23,
		"ErrorDownCause_STACKX_PACKETX_DEFENSIVE":           24,
		"ErrorDownCause_STORMX_CONTROL":                     25,
		"ErrorDownCause_TRANSCEIVERX_POWERX_LOW":            26,
	}
)

func (x Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause) Enum() *Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause {
	p := new(Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[23].Descriptor()
}

func (Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[23]
}

func (x Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause.Descriptor instead.
func (Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 10, 0}
}

type Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode int32

const (
	Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode_MAC     Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode = 0
	Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode_FORWARD Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode.
var (
	Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode_name = map[int32]string{
		0: "IfIpStatiMode_MAC",
		1: "IfIpStatiMode_FORWARD",
	}
	Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode_value = map[string]int32{
		"IfIpStatiMode_MAC":     0,
		"IfIpStatiMode_FORWARD": 1,
	}
)

func (x Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode) Enum() *Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode {
	p := new(Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[24].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[24]
}

func (x Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 12, 0}
}

type Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType int32

const (
	Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType_CONFIG      Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType = 0
	Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType_NEGOTIATION Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType = 1
	Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType_UNNUMBERED  Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType.
var (
	Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType_name = map[int32]string{
		0: "AddrCfgType_CONFIG",
		1: "AddrCfgType_NEGOTIATION",
		2: "AddrCfgType_UNNUMBERED",
	}
	Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType_value = map[string]int32{
		"AddrCfgType_CONFIG":      0,
		"AddrCfgType_NEGOTIATION": 1,
		"AddrCfgType_UNNUMBERED":  2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType) Enum() *Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType {
	p := new(Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[25].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[25]
}

func (x Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 19, 0}
}

type Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType int32

const (
	Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType_MAIN       Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType = 0
	Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType_NAP        Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType = 1
	Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType_NEG        Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType = 2
	Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType_NEG_REMOTE Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType = 3
	Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType_SUB        Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType = 4
	Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType_UNNUMBER   Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType = 5
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType.
var (
	Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType_name = map[int32]string{
		0: "AddrType_MAIN",
		1: "AddrType_NAP",
		2: "AddrType_NEG",
		3: "AddrType_NEG_REMOTE",
		4: "AddrType_SUB",
		5: "AddrType_UNNUMBER",
	}
	Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType_value = map[string]int32{
		"AddrType_MAIN":       0,
		"AddrType_NAP":        1,
		"AddrType_NEG":        2,
		"AddrType_NEG_REMOTE": 3,
		"AddrType_SUB":        4,
		"AddrType_UNNUMBER":   5,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType) Enum() *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType {
	p := new(Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[26].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[26]
}

func (x Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 19, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType int32

const (
	Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType_MAIN       Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType = 0
	Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType_NAP        Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType = 1
	Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType_NEG        Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType = 2
	Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType_NEG_REMOTE Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType = 3
	Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType_SUB        Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType = 4
	Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType_UNNUMBER   Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType = 5
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType.
var (
	Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType_name = map[int32]string{
		0: "AddrType_MAIN",
		1: "AddrType_NAP",
		2: "AddrType_NEG",
		3: "AddrType_NEG_REMOTE",
		4: "AddrType_SUB",
		5: "AddrType_UNNUMBER",
	}
	Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType_value = map[string]int32{
		"AddrType_MAIN":       0,
		"AddrType_NAP":        1,
		"AddrType_NEG":        2,
		"AddrType_NEG_REMOTE": 3,
		"AddrType_SUB":        4,
		"AddrType_UNNUMBER":   5,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType) Enum() *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType {
	p := new(Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[27].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[27]
}

func (x Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 20, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6 int32

const (
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6_ANYCAST   Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6 = 0
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6_EUI64     Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6 = 1
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6_GLOBAL    Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6 = 2
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6_LINKLOCAL Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6 = 3
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6_NDPREFIX  Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6 = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6.
var (
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6_name = map[int32]string{
		0: "AddrType6_ANYCAST",
		1: "AddrType6_EUI64",
		2: "AddrType6_GLOBAL",
		3: "AddrType6_LINKLOCAL",
		4: "AddrType6_NDPREFIX",
	}
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6_value = map[string]int32{
		"AddrType6_ANYCAST":   0,
		"AddrType6_EUI64":     1,
		"AddrType6_GLOBAL":    2,
		"AddrType6_LINKLOCAL": 3,
		"AddrType6_NDPREFIX":  4,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6) Enum() *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6 {
	p := new(Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[28].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[28]
}

func (x Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 21, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType int32

const (
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType_CGA   Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType = 0
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType_EUI64 Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType = 1
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType_NONE  Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType.
var (
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType_name = map[int32]string{
		0: "IfIDGenType_CGA",
		1: "IfIDGenType_EUI64",
		2: "IfIDGenType_NONE",
	}
	Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType_value = map[string]int32{
		"IfIDGenType_CGA":   0,
		"IfIDGenType_EUI64": 1,
		"IfIDGenType_NONE":  2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType) Enum() *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType {
	p := new(Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[29].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[29]
}

func (x Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 21, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6 int32

const (
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6_ANYCAST   Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6 = 0
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6_EUI64     Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6 = 1
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6_GLOBAL    Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6 = 2
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6_LINKLOCAL Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6 = 3
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6_NDPREFIX  Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6 = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6.
var (
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6_name = map[int32]string{
		0: "AddrType6_ANYCAST",
		1: "AddrType6_EUI64",
		2: "AddrType6_GLOBAL",
		3: "AddrType6_LINKLOCAL",
		4: "AddrType6_NDPREFIX",
	}
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6_value = map[string]int32{
		"AddrType6_ANYCAST":   0,
		"AddrType6_EUI64":     1,
		"AddrType6_GLOBAL":    2,
		"AddrType6_LINKLOCAL": 3,
		"AddrType6_NDPREFIX":  4,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6) Enum() *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6 {
	p := new(Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[30].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[30]
}

func (x Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 22, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType int32

const (
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType_CGA   Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType = 0
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType_EUI64 Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType = 1
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType_NONE  Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType.
var (
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType_name = map[int32]string{
		0: "IfIDGenType_CGA",
		1: "IfIDGenType_EUI64",
		2: "IfIDGenType_NONE",
	}
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType_value = map[string]int32{
		"IfIDGenType_CGA":   0,
		"IfIDGenType_EUI64": 1,
		"IfIDGenType_NONE":  2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType) Enum() *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType {
	p := new(Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[31].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[31]
}

func (x Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 22, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status int32

const (
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status_DUPLICATE    Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status = 0
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status_INACCESSIBLE Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status = 1
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status_PREFERRED    Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status = 2
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status_TENTATIVE    Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status = 3
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status_UNKNOWN      Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status.
var (
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status_name = map[int32]string{
		0: "Status_DUPLICATE",
		1: "Status_INACCESSIBLE",
		2: "Status_PREFERRED",
		3: "Status_TENTATIVE",
		4: "Status_UNKNOWN",
	}
	Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status_value = map[string]int32{
		"Status_DUPLICATE":    0,
		"Status_INACCESSIBLE": 1,
		"Status_PREFERRED":    2,
		"Status_TENTATIVE":    3,
		"Status_UNKNOWN":      4,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status) Enum() *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status {
	p := new(Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[32].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[32]
}

func (x Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 22, 0, 0, 2}
}

type Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType int32

const (
	Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType_CONFIG Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType = 0
	Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType_DELETE Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType.
var (
	Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType_name = map[int32]string{
		0: "IpAddrCfgType_CONFIG",
		1: "IpAddrCfgType_DELETE",
	}
	Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType_value = map[string]int32{
		"IpAddrCfgType_CONFIG": 0,
		"IpAddrCfgType_DELETE": 1,
	}
)

func (x Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType) Enum() *Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType {
	p := new(Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[33].Descriptor()
}

func (Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[33]
}

func (x Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType.Descriptor instead.
func (Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 23, 0}
}

type Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel int32

const (
	Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel_HEAVY  Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel = 0
	Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel_LIGHT  Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel = 1
	Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel_MANUAL Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel = 2
	Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel_MIDDLE Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel = 3
)

// Enum value maps for Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel.
var (
	Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel_name = map[int32]string{
		0: "IfDampLevel_HEAVY",
		1: "IfDampLevel_LIGHT",
		2: "IfDampLevel_MANUAL",
		3: "IfDampLevel_MIDDLE",
	}
	Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel_value = map[string]int32{
		"IfDampLevel_HEAVY":  0,
		"IfDampLevel_LIGHT":  1,
		"IfDampLevel_MANUAL": 2,
		"IfDampLevel_MIDDLE": 3,
	}
)

func (x Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel) Enum() *Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel {
	p := new(Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[34].Descriptor()
}

func (Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[34]
}

func (x Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel.Descriptor instead.
func (Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 25, 0}
}

type Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus int32

const (
	Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus_SUPPRESSED   Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus = 0
	Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus_UNSUPPRESSED Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus.
var (
	Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus_name = map[int32]string{
		0: "IfSuppressStatus_SUPPRESSED",
		1: "IfSuppressStatus_UNSUPPRESSED",
	}
	Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus_value = map[string]int32{
		"IfSuppressStatus_SUPPRESSED":   0,
		"IfSuppressStatus_UNSUPPRESSED": 1,
	}
)

func (x Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus) Enum() *Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus {
	p := new(Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[35].Descriptor()
}

func (Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[35]
}

func (x Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 26, 0}
}

type Ifm_Interfaces_Interface_Ppp_MplscpNego int32

const (
	Ifm_Interfaces_Interface_Ppp_MplscpNego_DISABLE Ifm_Interfaces_Interface_Ppp_MplscpNego = 0
	Ifm_Interfaces_Interface_Ppp_MplscpNego_ENABLE  Ifm_Interfaces_Interface_Ppp_MplscpNego = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_MplscpNego.
var (
	Ifm_Interfaces_Interface_Ppp_MplscpNego_name = map[int32]string{
		0: "MplscpNego_DISABLE",
		1: "MplscpNego_ENABLE",
	}
	Ifm_Interfaces_Interface_Ppp_MplscpNego_value = map[string]int32{
		"MplscpNego_DISABLE": 0,
		"MplscpNego_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_MplscpNego) Enum() *Ifm_Interfaces_Interface_Ppp_MplscpNego {
	p := new(Ifm_Interfaces_Interface_Ppp_MplscpNego)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_MplscpNego) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_MplscpNego) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[36].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_MplscpNego) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[36]
}

func (x Ifm_Interfaces_Interface_Ppp_MplscpNego) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_MplscpNego.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_MplscpNego) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 0}
}

type Ifm_Interfaces_Interface_Ppp_MruNegoMtd int32

const (
	Ifm_Interfaces_Interface_Ppp_MruNegoMtd_IPV4 Ifm_Interfaces_Interface_Ppp_MruNegoMtd = 0
	Ifm_Interfaces_Interface_Ppp_MruNegoMtd_IPV6 Ifm_Interfaces_Interface_Ppp_MruNegoMtd = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_MruNegoMtd.
var (
	Ifm_Interfaces_Interface_Ppp_MruNegoMtd_name = map[int32]string{
		0: "MruNegoMtd_IPV4",
		1: "MruNegoMtd_IPV6",
	}
	Ifm_Interfaces_Interface_Ppp_MruNegoMtd_value = map[string]int32{
		"MruNegoMtd_IPV4": 0,
		"MruNegoMtd_IPV6": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_MruNegoMtd) Enum() *Ifm_Interfaces_Interface_Ppp_MruNegoMtd {
	p := new(Ifm_Interfaces_Interface_Ppp_MruNegoMtd)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_MruNegoMtd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_MruNegoMtd) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[37].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_MruNegoMtd) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[37]
}

func (x Ifm_Interfaces_Interface_Ppp_MruNegoMtd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_MruNegoMtd.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_MruNegoMtd) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1}
}

type Ifm_Interfaces_Interface_Ppp_OsicpNego int32

const (
	Ifm_Interfaces_Interface_Ppp_OsicpNego_DISABLE Ifm_Interfaces_Interface_Ppp_OsicpNego = 0
	Ifm_Interfaces_Interface_Ppp_OsicpNego_ENABLE  Ifm_Interfaces_Interface_Ppp_OsicpNego = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_OsicpNego.
var (
	Ifm_Interfaces_Interface_Ppp_OsicpNego_name = map[int32]string{
		0: "OsicpNego_DISABLE",
		1: "OsicpNego_ENABLE",
	}
	Ifm_Interfaces_Interface_Ppp_OsicpNego_value = map[string]int32{
		"OsicpNego_DISABLE": 0,
		"OsicpNego_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_OsicpNego) Enum() *Ifm_Interfaces_Interface_Ppp_OsicpNego {
	p := new(Ifm_Interfaces_Interface_Ppp_OsicpNego)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_OsicpNego) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_OsicpNego) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[38].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_OsicpNego) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[38]
}

func (x Ifm_Interfaces_Interface_Ppp_OsicpNego) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_OsicpNego.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_OsicpNego) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 2}
}

type Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit int32

const (
	Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit_X_16 Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit = 0
	Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit_X_32 Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit.
var (
	Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit_name = map[int32]string{
		0: "CrcBit_X_16",
		1: "CrcBit_X_32",
	}
	Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit_value = map[string]int32{
		"CrcBit_X_16": 0,
		"CrcBit_X_32": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit) Enum() *Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit {
	p := new(Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[39].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[39]
}

func (x Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 0, 0}
}

type Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType int32

const (
	Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType_BITERRRATIO Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType = 0
	Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType_DEFAULT     Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType = 1
	Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType_HIGHLOW     Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType = 2
	Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType_PKTERRRATIO Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType.
var (
	Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType_name = map[int32]string{
		0: "ErrType_BITERRRATIO",
		1: "ErrType_DEFAULT",
		2: "ErrType_HIGHLOW",
		3: "ErrType_PKTERRRATIO",
	}
	Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType_value = map[string]int32{
		"ErrType_BITERRRATIO": 0,
		"ErrType_DEFAULT":     1,
		"ErrType_HIGHLOW":     2,
		"ErrType_PKTERRRATIO": 3,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType) Enum() *Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType {
	p := new(Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[40].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[40]
}

func (x Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 0, 1}
}

type Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState int32

const (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_ACKRCVD  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 0
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_ACKSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 1
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_CLOSED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 2
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_CLOSING  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 3
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_INITIAL  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 4
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_NONE     Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 5
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_OPENED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 6
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_REQSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 7
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_STARTING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 8
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_STOPPED  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 9
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_STOPPING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState = 10
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState.
var (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_name = map[int32]string{
		0:  "Ip6CpState_ACKRCVD",
		1:  "Ip6CpState_ACKSENT",
		2:  "Ip6CpState_CLOSED",
		3:  "Ip6CpState_CLOSING",
		4:  "Ip6CpState_INITIAL",
		5:  "Ip6CpState_NONE",
		6:  "Ip6CpState_OPENED",
		7:  "Ip6CpState_REQSENT",
		8:  "Ip6CpState_STARTING",
		9:  "Ip6CpState_STOPPED",
		10: "Ip6CpState_STOPPING",
	}
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_value = map[string]int32{
		"Ip6CpState_ACKRCVD":  0,
		"Ip6CpState_ACKSENT":  1,
		"Ip6CpState_CLOSED":   2,
		"Ip6CpState_CLOSING":  3,
		"Ip6CpState_INITIAL":  4,
		"Ip6CpState_NONE":     5,
		"Ip6CpState_OPENED":   6,
		"Ip6CpState_REQSENT":  7,
		"Ip6CpState_STARTING": 8,
		"Ip6CpState_STOPPED":  9,
		"Ip6CpState_STOPPING": 10,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState) Enum() *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState {
	p := new(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[41].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[41]
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1, 0}
}

type Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState int32

const (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_ACKRCVD  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 0
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_ACKSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 1
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_CLOSED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 2
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_CLOSING  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 3
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_INITIAL  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 4
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_NONE     Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 5
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_OPENED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 6
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_REQSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 7
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_STARTING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 8
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_STOPPED  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 9
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_STOPPING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState = 10
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState.
var (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_name = map[int32]string{
		0:  "IpcpState_ACKRCVD",
		1:  "IpcpState_ACKSENT",
		2:  "IpcpState_CLOSED",
		3:  "IpcpState_CLOSING",
		4:  "IpcpState_INITIAL",
		5:  "IpcpState_NONE",
		6:  "IpcpState_OPENED",
		7:  "IpcpState_REQSENT",
		8:  "IpcpState_STARTING",
		9:  "IpcpState_STOPPED",
		10: "IpcpState_STOPPING",
	}
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_value = map[string]int32{
		"IpcpState_ACKRCVD":  0,
		"IpcpState_ACKSENT":  1,
		"IpcpState_CLOSED":   2,
		"IpcpState_CLOSING":  3,
		"IpcpState_INITIAL":  4,
		"IpcpState_NONE":     5,
		"IpcpState_OPENED":   6,
		"IpcpState_REQSENT":  7,
		"IpcpState_STARTING": 8,
		"IpcpState_STOPPED":  9,
		"IpcpState_STOPPING": 10,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState) Enum() *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState {
	p := new(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[42].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[42]
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1, 1}
}

type Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState int32

const (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_ACKRCVD  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 0
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_ACKSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 1
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_CLOSED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 2
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_CLOSING  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 3
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_INITIAL  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 4
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_NONE     Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 5
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_OPENED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 6
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_REQSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 7
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_STARTING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 8
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_STOPPED  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 9
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_STOPPING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState = 10
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState.
var (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_name = map[int32]string{
		0:  "LcpState_ACKRCVD",
		1:  "LcpState_ACKSENT",
		2:  "LcpState_CLOSED",
		3:  "LcpState_CLOSING",
		4:  "LcpState_INITIAL",
		5:  "LcpState_NONE",
		6:  "LcpState_OPENED",
		7:  "LcpState_REQSENT",
		8:  "LcpState_STARTING",
		9:  "LcpState_STOPPED",
		10: "LcpState_STOPPING",
	}
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_value = map[string]int32{
		"LcpState_ACKRCVD":  0,
		"LcpState_ACKSENT":  1,
		"LcpState_CLOSED":   2,
		"LcpState_CLOSING":  3,
		"LcpState_INITIAL":  4,
		"LcpState_NONE":     5,
		"LcpState_OPENED":   6,
		"LcpState_REQSENT":  7,
		"LcpState_STARTING": 8,
		"LcpState_STOPPED":  9,
		"LcpState_STOPPING": 10,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState) Enum() *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState {
	p := new(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[43].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[43]
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1, 2}
}

type Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState int32

const (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_ACKRCVD  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 0
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_ACKSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 1
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_CLOSED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 2
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_CLOSING  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 3
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_INITIAL  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 4
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_NONE     Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 5
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_OPENED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 6
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_REQSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 7
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_STARTING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 8
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_STOPPED  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 9
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_STOPPING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState = 10
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState.
var (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_name = map[int32]string{
		0:  "MplscpState_ACKRCVD",
		1:  "MplscpState_ACKSENT",
		2:  "MplscpState_CLOSED",
		3:  "MplscpState_CLOSING",
		4:  "MplscpState_INITIAL",
		5:  "MplscpState_NONE",
		6:  "MplscpState_OPENED",
		7:  "MplscpState_REQSENT",
		8:  "MplscpState_STARTING",
		9:  "MplscpState_STOPPED",
		10: "MplscpState_STOPPING",
	}
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_value = map[string]int32{
		"MplscpState_ACKRCVD":  0,
		"MplscpState_ACKSENT":  1,
		"MplscpState_CLOSED":   2,
		"MplscpState_CLOSING":  3,
		"MplscpState_INITIAL":  4,
		"MplscpState_NONE":     5,
		"MplscpState_OPENED":   6,
		"MplscpState_REQSENT":  7,
		"MplscpState_STARTING": 8,
		"MplscpState_STOPPED":  9,
		"MplscpState_STOPPING": 10,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState) Enum() *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState {
	p := new(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[44].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[44]
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1, 3}
}

type Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState int32

const (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_ACKRCVD  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 0
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_ACKSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 1
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_CLOSED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 2
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_CLOSING  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 3
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_INITIAL  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 4
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_NONE     Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 5
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_OPENED   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 6
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_REQSENT  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 7
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_STARTING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 8
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_STOPPED  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 9
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_STOPPING Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState = 10
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState.
var (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_name = map[int32]string{
		0:  "OsicpState_ACKRCVD",
		1:  "OsicpState_ACKSENT",
		2:  "OsicpState_CLOSED",
		3:  "OsicpState_CLOSING",
		4:  "OsicpState_INITIAL",
		5:  "OsicpState_NONE",
		6:  "OsicpState_OPENED",
		7:  "OsicpState_REQSENT",
		8:  "OsicpState_STARTING",
		9:  "OsicpState_STOPPED",
		10: "OsicpState_STOPPING",
	}
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_value = map[string]int32{
		"OsicpState_ACKRCVD":  0,
		"OsicpState_ACKSENT":  1,
		"OsicpState_CLOSED":   2,
		"OsicpState_CLOSING":  3,
		"OsicpState_INITIAL":  4,
		"OsicpState_NONE":     5,
		"OsicpState_OPENED":   6,
		"OsicpState_REQSENT":  7,
		"OsicpState_STARTING": 8,
		"OsicpState_STOPPED":  9,
		"OsicpState_STOPPING": 10,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState) Enum() *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState {
	p := new(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[45].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[45]
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1, 4}
}

type Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType int32

const (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType_IPCP Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType = 0
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType_LCP  Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType.
var (
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType_name = map[int32]string{
		0: "LinkType_IPCP",
		1: "LinkType_LCP",
	}
	Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType_value = map[string]int32{
		"LinkType_IPCP": 0,
		"LinkType_LCP":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType) Enum() *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType {
	p := new(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[46].Descriptor()
}

func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[46]
}

func (x Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_TransAlarmDown_Oof int32

const (
	Ifm_Interfaces_Interface_TransAlarmDown_Oof_DISABLE Ifm_Interfaces_Interface_TransAlarmDown_Oof = 0
	Ifm_Interfaces_Interface_TransAlarmDown_Oof_ENABLE  Ifm_Interfaces_Interface_TransAlarmDown_Oof = 1
)

// Enum value maps for Ifm_Interfaces_Interface_TransAlarmDown_Oof.
var (
	Ifm_Interfaces_Interface_TransAlarmDown_Oof_name = map[int32]string{
		0: "Oof_DISABLE",
		1: "Oof_ENABLE",
	}
	Ifm_Interfaces_Interface_TransAlarmDown_Oof_value = map[string]int32{
		"Oof_DISABLE": 0,
		"Oof_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_TransAlarmDown_Oof) Enum() *Ifm_Interfaces_Interface_TransAlarmDown_Oof {
	p := new(Ifm_Interfaces_Interface_TransAlarmDown_Oof)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TransAlarmDown_Oof) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TransAlarmDown_Oof) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[47].Descriptor()
}

func (Ifm_Interfaces_Interface_TransAlarmDown_Oof) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[47]
}

func (x Ifm_Interfaces_Interface_TransAlarmDown_Oof) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TransAlarmDown_Oof.Descriptor instead.
func (Ifm_Interfaces_Interface_TransAlarmDown_Oof) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 30, 0}
}

type Ifm_Interfaces_Interface_TransAlarmDown_Pais int32

const (
	Ifm_Interfaces_Interface_TransAlarmDown_Pais_DISABLE Ifm_Interfaces_Interface_TransAlarmDown_Pais = 0
	Ifm_Interfaces_Interface_TransAlarmDown_Pais_ENABLE  Ifm_Interfaces_Interface_TransAlarmDown_Pais = 1
)

// Enum value maps for Ifm_Interfaces_Interface_TransAlarmDown_Pais.
var (
	Ifm_Interfaces_Interface_TransAlarmDown_Pais_name = map[int32]string{
		0: "Pais_DISABLE",
		1: "Pais_ENABLE",
	}
	Ifm_Interfaces_Interface_TransAlarmDown_Pais_value = map[string]int32{
		"Pais_DISABLE": 0,
		"Pais_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_TransAlarmDown_Pais) Enum() *Ifm_Interfaces_Interface_TransAlarmDown_Pais {
	p := new(Ifm_Interfaces_Interface_TransAlarmDown_Pais)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TransAlarmDown_Pais) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TransAlarmDown_Pais) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[48].Descriptor()
}

func (Ifm_Interfaces_Interface_TransAlarmDown_Pais) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[48]
}

func (x Ifm_Interfaces_Interface_TransAlarmDown_Pais) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TransAlarmDown_Pais.Descriptor instead.
func (Ifm_Interfaces_Interface_TransAlarmDown_Pais) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 30, 1}
}

type Ifm_Interfaces_Interface_TransAlarmDown_Prdi int32

const (
	Ifm_Interfaces_Interface_TransAlarmDown_Prdi_DISABLE Ifm_Interfaces_Interface_TransAlarmDown_Prdi = 0
	Ifm_Interfaces_Interface_TransAlarmDown_Prdi_ENABLE  Ifm_Interfaces_Interface_TransAlarmDown_Prdi = 1
)

// Enum value maps for Ifm_Interfaces_Interface_TransAlarmDown_Prdi.
var (
	Ifm_Interfaces_Interface_TransAlarmDown_Prdi_name = map[int32]string{
		0: "Prdi_DISABLE",
		1: "Prdi_ENABLE",
	}
	Ifm_Interfaces_Interface_TransAlarmDown_Prdi_value = map[string]int32{
		"Prdi_DISABLE": 0,
		"Prdi_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_TransAlarmDown_Prdi) Enum() *Ifm_Interfaces_Interface_TransAlarmDown_Prdi {
	p := new(Ifm_Interfaces_Interface_TransAlarmDown_Prdi)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TransAlarmDown_Prdi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TransAlarmDown_Prdi) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[49].Descriptor()
}

func (Ifm_Interfaces_Interface_TransAlarmDown_Prdi) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[49]
}

func (x Ifm_Interfaces_Interface_TransAlarmDown_Prdi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TransAlarmDown_Prdi.Descriptor instead.
func (Ifm_Interfaces_Interface_TransAlarmDown_Prdi) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 30, 2}
}

type Ifm_Interfaces_Interface_VeGroup_VeIfType int32

const (
	Ifm_Interfaces_Interface_VeGroup_VeIfType_INVALID     Ifm_Interfaces_Interface_VeGroup_VeIfType = 0
	Ifm_Interfaces_Interface_VeGroup_VeIfType_L2VE        Ifm_Interfaces_Interface_VeGroup_VeIfType = 1
	Ifm_Interfaces_Interface_VeGroup_VeIfType_L3VE        Ifm_Interfaces_Interface_VeGroup_VeIfType = 2
	Ifm_Interfaces_Interface_VeGroup_VeIfType_TERMINATEVE Ifm_Interfaces_Interface_VeGroup_VeIfType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_VeGroup_VeIfType.
var (
	Ifm_Interfaces_Interface_VeGroup_VeIfType_name = map[int32]string{
		0: "VeIfType_INVALID",
		1: "VeIfType_L2VE",
		2: "VeIfType_L3VE",
		3: "VeIfType_TERMINATEVE",
	}
	Ifm_Interfaces_Interface_VeGroup_VeIfType_value = map[string]int32{
		"VeIfType_INVALID":     0,
		"VeIfType_L2VE":        1,
		"VeIfType_L3VE":        2,
		"VeIfType_TERMINATEVE": 3,
	}
)

func (x Ifm_Interfaces_Interface_VeGroup_VeIfType) Enum() *Ifm_Interfaces_Interface_VeGroup_VeIfType {
	p := new(Ifm_Interfaces_Interface_VeGroup_VeIfType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_VeGroup_VeIfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_VeGroup_VeIfType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[50].Descriptor()
}

func (Ifm_Interfaces_Interface_VeGroup_VeIfType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[50]
}

func (x Ifm_Interfaces_Interface_VeGroup_VeIfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VeGroup_VeIfType.Descriptor instead.
func (Ifm_Interfaces_Interface_VeGroup_VeIfType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 33, 0}
}

type Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType int32

const (
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_AUTOX_DEFEND                       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 0
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_BPDUX_PROTECTION                   Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 1
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_CRCX_STATISTICS                    Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 2
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_DUALX_ACTIVE                       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 3
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FABRICX_LINKX_FAILURE              Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 4
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FABRICX_UPLINKX_THRESHOLD          Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 5
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED    Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 6
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 7
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_INVALID                            Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 8
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_L2X_LOOPX_OCCURED                  Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 9
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_LEAFX_MSTP                         Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 10
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_LINKX_FLAP                         Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 11
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_LOOPBACKX_DETECT                   Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 12
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MACX_ADDRESSX_FLAPPING             Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 13
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MONITORX_LINK                      Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 14
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MX_LAG                             Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 15
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK         Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 16
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_NOX_STACKX_LINK                    Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 17
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_PORTSECX_REACHEDLIMIT              Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 18
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_RESOURCEX_MISMATCH                 Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 19
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 20
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_SPINEX_TYPEX_UNSUPPORTED           Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 21
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STACKX_CONFIGX_CONFLICT            Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 22
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 23
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STACKX_PACKETX_DEFENSIVE           Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 24
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STORMX_CONTROL                     Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 25
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_TRANSCEIVERX_POWERX_LOW            Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 26
)

// Enum value maps for Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType.
var (
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_name = map[int32]string{
		0:  "ErrorDownType_AUTOX_DEFEND",
		1:  "ErrorDownType_BPDUX_PROTECTION",
		2:  "ErrorDownType_CRCX_STATISTICS",
		3:  "ErrorDownType_DUALX_ACTIVE",
		4:  "ErrorDownType_FABRICX_LINKX_FAILURE",
		5:  "ErrorDownType_FABRICX_UPLINKX_THRESHOLD",
		6:  "ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED",
		7:  "ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED",
		8:  "ErrorDownType_INVALID",
		9:  "ErrorDownType_L2X_LOOPX_OCCURED",
		10: "ErrorDownType_LEAFX_MSTP",
		11: "ErrorDownType_LINKX_FLAP",
		12: "ErrorDownType_LOOPBACKX_DETECT",
		13: "ErrorDownType_MACX_ADDRESSX_FLAPPING",
		14: "ErrorDownType_MONITORX_LINK",
		15: "ErrorDownType_MX_LAG",
		16: "ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK",
		17: "ErrorDownType_NOX_STACKX_LINK",
		18: "ErrorDownType_PORTSECX_REACHEDLIMIT",
		19: "ErrorDownType_RESOURCEX_MISMATCH",
		20: "ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT",
		21: "ErrorDownType_SPINEX_TYPEX_UNSUPPORTED",
		22: "ErrorDownType_STACKX_CONFIGX_CONFLICT",
		23: "ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT",
		24: "ErrorDownType_STACKX_PACKETX_DEFENSIVE",
		25: "ErrorDownType_STORMX_CONTROL",
		26: "ErrorDownType_TRANSCEIVERX_POWERX_LOW",
	}
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_value = map[string]int32{
		"ErrorDownType_AUTOX_DEFEND":                       0,
		"ErrorDownType_BPDUX_PROTECTION":                   1,
		"ErrorDownType_CRCX_STATISTICS":                    2,
		"ErrorDownType_DUALX_ACTIVE":                       3,
		"ErrorDownType_FABRICX_LINKX_FAILURE":              4,
		"ErrorDownType_FABRICX_UPLINKX_THRESHOLD":          5,
		"ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED":    6,
		"ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED": 7,
		"ErrorDownType_INVALID":                            8,
		"ErrorDownType_L2X_LOOPX_OCCURED":                  9,
		"ErrorDownType_LEAFX_MSTP":                         10,
		"ErrorDownType_LINKX_FLAP":                         11,
		"ErrorDownType_LOOPBACKX_DETECT":                   12,
		"ErrorDownType_MACX_ADDRESSX_FLAPPING":             13,
		"ErrorDownType_MONITORX_LINK":                      14,
		"ErrorDownType_MX_LAG":                             15,
		"ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK":         16,
		"ErrorDownType_NOX_STACKX_LINK":                    17,
		"ErrorDownType_PORTSECX_REACHEDLIMIT":              18,
		"ErrorDownType_RESOURCEX_MISMATCH":                 19,
		"ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT":       20,
		"ErrorDownType_SPINEX_TYPEX_UNSUPPORTED":           21,
		"ErrorDownType_STACKX_CONFIGX_CONFLICT":            22,
		"ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT":       23,
		"ErrorDownType_STACKX_PACKETX_DEFENSIVE":           24,
		"ErrorDownType_STORMX_CONTROL":                     25,
		"ErrorDownType_TRANSCEIVERX_POWERX_LOW":            26,
	}
)

func (x Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Enum() *Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType {
	p := new(Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType)
	*p = x
	return p
}

func (x Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[51].Descriptor()
}

func (Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[51]
}

func (x Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType.Descriptor instead.
func (Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Ifm_GlobalConfig_Ipv4IgnorePrimarySub int32

const (
	Ifm_GlobalConfig_Ipv4IgnorePrimarySub_DISABLE Ifm_GlobalConfig_Ipv4IgnorePrimarySub = 0
	Ifm_GlobalConfig_Ipv4IgnorePrimarySub_ENABLE  Ifm_GlobalConfig_Ipv4IgnorePrimarySub = 1
)

// Enum value maps for Ifm_GlobalConfig_Ipv4IgnorePrimarySub.
var (
	Ifm_GlobalConfig_Ipv4IgnorePrimarySub_name = map[int32]string{
		0: "Ipv4IgnorePrimarySub_DISABLE",
		1: "Ipv4IgnorePrimarySub_ENABLE",
	}
	Ifm_GlobalConfig_Ipv4IgnorePrimarySub_value = map[string]int32{
		"Ipv4IgnorePrimarySub_DISABLE": 0,
		"Ipv4IgnorePrimarySub_ENABLE":  1,
	}
)

func (x Ifm_GlobalConfig_Ipv4IgnorePrimarySub) Enum() *Ifm_GlobalConfig_Ipv4IgnorePrimarySub {
	p := new(Ifm_GlobalConfig_Ipv4IgnorePrimarySub)
	*p = x
	return p
}

func (x Ifm_GlobalConfig_Ipv4IgnorePrimarySub) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_GlobalConfig_Ipv4IgnorePrimarySub) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[52].Descriptor()
}

func (Ifm_GlobalConfig_Ipv4IgnorePrimarySub) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[52]
}

func (x Ifm_GlobalConfig_Ipv4IgnorePrimarySub) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_GlobalConfig_Ipv4IgnorePrimarySub.Descriptor instead.
func (Ifm_GlobalConfig_Ipv4IgnorePrimarySub) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 2, 0}
}

type Ifm_GlobalConfig_SysAttriControlMtu int32

const (
	Ifm_GlobalConfig_SysAttriControlMtu_X_1450 Ifm_GlobalConfig_SysAttriControlMtu = 0
	Ifm_GlobalConfig_SysAttriControlMtu_X_1500 Ifm_GlobalConfig_SysAttriControlMtu = 1
)

// Enum value maps for Ifm_GlobalConfig_SysAttriControlMtu.
var (
	Ifm_GlobalConfig_SysAttriControlMtu_name = map[int32]string{
		0: "SysAttriControlMtu_X_1450",
		1: "SysAttriControlMtu_X_1500",
	}
	Ifm_GlobalConfig_SysAttriControlMtu_value = map[string]int32{
		"SysAttriControlMtu_X_1450": 0,
		"SysAttriControlMtu_X_1500": 1,
	}
)

func (x Ifm_GlobalConfig_SysAttriControlMtu) Enum() *Ifm_GlobalConfig_SysAttriControlMtu {
	p := new(Ifm_GlobalConfig_SysAttriControlMtu)
	*p = x
	return p
}

func (x Ifm_GlobalConfig_SysAttriControlMtu) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_GlobalConfig_SysAttriControlMtu) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[53].Descriptor()
}

func (Ifm_GlobalConfig_SysAttriControlMtu) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[53]
}

func (x Ifm_GlobalConfig_SysAttriControlMtu) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_GlobalConfig_SysAttriControlMtu.Descriptor instead.
func (Ifm_GlobalConfig_SysAttriControlMtu) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 2, 1}
}

type Ifm_HdlcDamp_HdlcDampLevel int32

const (
	Ifm_HdlcDamp_HdlcDampLevel_HEAVY  Ifm_HdlcDamp_HdlcDampLevel = 0
	Ifm_HdlcDamp_HdlcDampLevel_LIGHT  Ifm_HdlcDamp_HdlcDampLevel = 1
	Ifm_HdlcDamp_HdlcDampLevel_MANUAL Ifm_HdlcDamp_HdlcDampLevel = 2
	Ifm_HdlcDamp_HdlcDampLevel_MIDDLE Ifm_HdlcDamp_HdlcDampLevel = 3
)

// Enum value maps for Ifm_HdlcDamp_HdlcDampLevel.
var (
	Ifm_HdlcDamp_HdlcDampLevel_name = map[int32]string{
		0: "HdlcDampLevel_HEAVY",
		1: "HdlcDampLevel_LIGHT",
		2: "HdlcDampLevel_MANUAL",
		3: "HdlcDampLevel_MIDDLE",
	}
	Ifm_HdlcDamp_HdlcDampLevel_value = map[string]int32{
		"HdlcDampLevel_HEAVY":  0,
		"HdlcDampLevel_LIGHT":  1,
		"HdlcDampLevel_MANUAL": 2,
		"HdlcDampLevel_MIDDLE": 3,
	}
)

func (x Ifm_HdlcDamp_HdlcDampLevel) Enum() *Ifm_HdlcDamp_HdlcDampLevel {
	p := new(Ifm_HdlcDamp_HdlcDampLevel)
	*p = x
	return p
}

func (x Ifm_HdlcDamp_HdlcDampLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_HdlcDamp_HdlcDampLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[54].Descriptor()
}

func (Ifm_HdlcDamp_HdlcDampLevel) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[54]
}

func (x Ifm_HdlcDamp_HdlcDampLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_HdlcDamp_HdlcDampLevel.Descriptor instead.
func (Ifm_HdlcDamp_HdlcDampLevel) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 3, 0}
}

type Ifm_IfDamp_IfDampLevel int32

const (
	Ifm_IfDamp_IfDampLevel_HEAVY  Ifm_IfDamp_IfDampLevel = 0
	Ifm_IfDamp_IfDampLevel_LIGHT  Ifm_IfDamp_IfDampLevel = 1
	Ifm_IfDamp_IfDampLevel_MANUAL Ifm_IfDamp_IfDampLevel = 2
	Ifm_IfDamp_IfDampLevel_MIDDLE Ifm_IfDamp_IfDampLevel = 3
)

// Enum value maps for Ifm_IfDamp_IfDampLevel.
var (
	Ifm_IfDamp_IfDampLevel_name = map[int32]string{
		0: "IfDampLevel_HEAVY",
		1: "IfDampLevel_LIGHT",
		2: "IfDampLevel_MANUAL",
		3: "IfDampLevel_MIDDLE",
	}
	Ifm_IfDamp_IfDampLevel_value = map[string]int32{
		"IfDampLevel_HEAVY":  0,
		"IfDampLevel_LIGHT":  1,
		"IfDampLevel_MANUAL": 2,
		"IfDampLevel_MIDDLE": 3,
	}
)

func (x Ifm_IfDamp_IfDampLevel) Enum() *Ifm_IfDamp_IfDampLevel {
	p := new(Ifm_IfDamp_IfDampLevel)
	*p = x
	return p
}

func (x Ifm_IfDamp_IfDampLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_IfDamp_IfDampLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[55].Descriptor()
}

func (Ifm_IfDamp_IfDampLevel) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[55]
}

func (x Ifm_IfDamp_IfDampLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_IfDamp_IfDampLevel.Descriptor instead.
func (Ifm_IfDamp_IfDampLevel) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 4, 0}
}

type Ifm_InterfaceCounts_InterfaceCount_IfClass int32

const (
	Ifm_InterfaceCounts_InterfaceCount_IfClass_MAININTERFACE Ifm_InterfaceCounts_InterfaceCount_IfClass = 0
	Ifm_InterfaceCounts_InterfaceCount_IfClass_SUBINTERFACE  Ifm_InterfaceCounts_InterfaceCount_IfClass = 1
)

// Enum value maps for Ifm_InterfaceCounts_InterfaceCount_IfClass.
var (
	Ifm_InterfaceCounts_InterfaceCount_IfClass_name = map[int32]string{
		0: "IfClass_MAININTERFACE",
		1: "IfClass_SUBINTERFACE",
	}
	Ifm_InterfaceCounts_InterfaceCount_IfClass_value = map[string]int32{
		"IfClass_MAININTERFACE": 0,
		"IfClass_SUBINTERFACE":  1,
	}
)

func (x Ifm_InterfaceCounts_InterfaceCount_IfClass) Enum() *Ifm_InterfaceCounts_InterfaceCount_IfClass {
	p := new(Ifm_InterfaceCounts_InterfaceCount_IfClass)
	*p = x
	return p
}

func (x Ifm_InterfaceCounts_InterfaceCount_IfClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_InterfaceCounts_InterfaceCount_IfClass) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[56].Descriptor()
}

func (Ifm_InterfaceCounts_InterfaceCount_IfClass) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[56]
}

func (x Ifm_InterfaceCounts_InterfaceCount_IfClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_InterfaceCounts_InterfaceCount_IfClass.Descriptor instead.
func (Ifm_InterfaceCounts_InterfaceCount_IfClass) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

type Ifm_InterfaceCounts_InterfaceCount_IfPhyType int32

const (
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_ATM                Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 0
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_ATMX_BUNDLE        Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 1
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_CPOS               Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 2
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_CPOSX_TRUNK        Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 3
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_DCNINTERFACE       Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 4
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_E1                 Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 5
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_E3                 Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 6
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_ETHERNET           Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 7
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_ETHX_TRUNK         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 8
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FABRICX_PORT       Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 9
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FC                 Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 10
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FCOEX_PORT         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 11
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FIBERX_CHANNEL     Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 12
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FLEXE              Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 13
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FLEXEX_100G        Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 14
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FLEXEX_200GE       Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 15
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FLEXEX_400G        Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 16
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FLEXEX_50G         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 17
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_FLEXEX_50X_100G    Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 18
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_GEBRIEF            Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 19
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_GIGABITETHERNET    Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 20
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_GLOBALX_IMAX_GROUP Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 21
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_GLOBALX_MPX_GROUP  Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 22
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_GLOBALX_VE         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 23
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_GMPLSX_UNI         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 24
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_HPGE               Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 25
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_IMAX_GROUP         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 26
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_IMETH              Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 27
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_INFINIBAND         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 28
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_IPX_TRUNK          Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 29
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_LMPIF              Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 30
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_LOOPBACK           Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 31
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_METH               Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 32
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_MPX_GROUP          Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 33
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_MTUNNEL            Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 34
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_NULL               Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 35
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_NVE                Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 36
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_OTN                Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 37
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_POS                Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 38
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_POSX_TRUNK         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 39
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_PWX_VE             Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 40
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_REMOTEX_AP         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 41
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_SERIAL             Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 42
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_SERVICEIF          Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 43
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_SIP                Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 44
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_STACKX_PORT        Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 45
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_T1                 Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 46
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_T3                 Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 47
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_TRUNKX_SERIAL      Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 48
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_TUNNEL             Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 49
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VBDIF              Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 50
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VBRIDGE            Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 51
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VC12               Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 52
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VC4                Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 53
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VIRTUALX_ETHERNET  Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 54
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VIRTUALX_ODUK      Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 55
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VIRTUALX_SERIAL    Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 56
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VIRTUALX_TEMPLATE  Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 57
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VLANIF             Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 58
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VMETH              Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 59
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VP                 Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 60
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_VXX_TUNNEL         Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 61
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_WDM                Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 62
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_XGIGABITETHERNET   Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 63
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_100GE            Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 64
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_10GE             Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 65
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_10X10GE          Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 66
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_200GE            Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 67
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_25GE             Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 68
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_3X40GE           Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 69
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_400GE            Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 70
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_40GE             Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 71
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_4X10GE           Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 72
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_4X25GE           Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 73
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_50GE             Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 74
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_X_50X_100GE        Ifm_InterfaceCounts_InterfaceCount_IfPhyType = 75
)

// Enum value maps for Ifm_InterfaceCounts_InterfaceCount_IfPhyType.
var (
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_name = map[int32]string{
		0:  "IfPhyType_ATM",
		1:  "IfPhyType_ATMX_BUNDLE",
		2:  "IfPhyType_CPOS",
		3:  "IfPhyType_CPOSX_TRUNK",
		4:  "IfPhyType_DCNINTERFACE",
		5:  "IfPhyType_E1",
		6:  "IfPhyType_E3",
		7:  "IfPhyType_ETHERNET",
		8:  "IfPhyType_ETHX_TRUNK",
		9:  "IfPhyType_FABRICX_PORT",
		10: "IfPhyType_FC",
		11: "IfPhyType_FCOEX_PORT",
		12: "IfPhyType_FIBERX_CHANNEL",
		13: "IfPhyType_FLEXE",
		14: "IfPhyType_FLEXEX_100G",
		15: "IfPhyType_FLEXEX_200GE",
		16: "IfPhyType_FLEXEX_400G",
		17: "IfPhyType_FLEXEX_50G",
		18: "IfPhyType_FLEXEX_50X_100G",
		19: "IfPhyType_GEBRIEF",
		20: "IfPhyType_GIGABITETHERNET",
		21: "IfPhyType_GLOBALX_IMAX_GROUP",
		22: "IfPhyType_GLOBALX_MPX_GROUP",
		23: "IfPhyType_GLOBALX_VE",
		24: "IfPhyType_GMPLSX_UNI",
		25: "IfPhyType_HPGE",
		26: "IfPhyType_IMAX_GROUP",
		27: "IfPhyType_IMETH",
		28: "IfPhyType_INFINIBAND",
		29: "IfPhyType_IPX_TRUNK",
		30: "IfPhyType_LMPIF",
		31: "IfPhyType_LOOPBACK",
		32: "IfPhyType_METH",
		33: "IfPhyType_MPX_GROUP",
		34: "IfPhyType_MTUNNEL",
		35: "IfPhyType_NULL",
		36: "IfPhyType_NVE",
		37: "IfPhyType_OTN",
		38: "IfPhyType_POS",
		39: "IfPhyType_POSX_TRUNK",
		40: "IfPhyType_PWX_VE",
		41: "IfPhyType_REMOTEX_AP",
		42: "IfPhyType_SERIAL",
		43: "IfPhyType_SERVICEIF",
		44: "IfPhyType_SIP",
		45: "IfPhyType_STACKX_PORT",
		46: "IfPhyType_T1",
		47: "IfPhyType_T3",
		48: "IfPhyType_TRUNKX_SERIAL",
		49: "IfPhyType_TUNNEL",
		50: "IfPhyType_VBDIF",
		51: "IfPhyType_VBRIDGE",
		52: "IfPhyType_VC12",
		53: "IfPhyType_VC4",
		54: "IfPhyType_VIRTUALX_ETHERNET",
		55: "IfPhyType_VIRTUALX_ODUK",
		56: "IfPhyType_VIRTUALX_SERIAL",
		57: "IfPhyType_VIRTUALX_TEMPLATE",
		58: "IfPhyType_VLANIF",
		59: "IfPhyType_VMETH",
		60: "IfPhyType_VP",
		61: "IfPhyType_VXX_TUNNEL",
		62: "IfPhyType_WDM",
		63: "IfPhyType_XGIGABITETHERNET",
		64: "IfPhyType_X_100GE",
		65: "IfPhyType_X_10GE",
		66: "IfPhyType_X_10X10GE",
		67: "IfPhyType_X_200GE",
		68: "IfPhyType_X_25GE",
		69: "IfPhyType_X_3X40GE",
		70: "IfPhyType_X_400GE",
		71: "IfPhyType_X_40GE",
		72: "IfPhyType_X_4X10GE",
		73: "IfPhyType_X_4X25GE",
		74: "IfPhyType_X_50GE",
		75: "IfPhyType_X_50X_100GE",
	}
	Ifm_InterfaceCounts_InterfaceCount_IfPhyType_value = map[string]int32{
		"IfPhyType_ATM":                0,
		"IfPhyType_ATMX_BUNDLE":        1,
		"IfPhyType_CPOS":               2,
		"IfPhyType_CPOSX_TRUNK":        3,
		"IfPhyType_DCNINTERFACE":       4,
		"IfPhyType_E1":                 5,
		"IfPhyType_E3":                 6,
		"IfPhyType_ETHERNET":           7,
		"IfPhyType_ETHX_TRUNK":         8,
		"IfPhyType_FABRICX_PORT":       9,
		"IfPhyType_FC":                 10,
		"IfPhyType_FCOEX_PORT":         11,
		"IfPhyType_FIBERX_CHANNEL":     12,
		"IfPhyType_FLEXE":              13,
		"IfPhyType_FLEXEX_100G":        14,
		"IfPhyType_FLEXEX_200GE":       15,
		"IfPhyType_FLEXEX_400G":        16,
		"IfPhyType_FLEXEX_50G":         17,
		"IfPhyType_FLEXEX_50X_100G":    18,
		"IfPhyType_GEBRIEF":            19,
		"IfPhyType_GIGABITETHERNET":    20,
		"IfPhyType_GLOBALX_IMAX_GROUP": 21,
		"IfPhyType_GLOBALX_MPX_GROUP":  22,
		"IfPhyType_GLOBALX_VE":         23,
		"IfPhyType_GMPLSX_UNI":         24,
		"IfPhyType_HPGE":               25,
		"IfPhyType_IMAX_GROUP":         26,
		"IfPhyType_IMETH":              27,
		"IfPhyType_INFINIBAND":         28,
		"IfPhyType_IPX_TRUNK":          29,
		"IfPhyType_LMPIF":              30,
		"IfPhyType_LOOPBACK":           31,
		"IfPhyType_METH":               32,
		"IfPhyType_MPX_GROUP":          33,
		"IfPhyType_MTUNNEL":            34,
		"IfPhyType_NULL":               35,
		"IfPhyType_NVE":                36,
		"IfPhyType_OTN":                37,
		"IfPhyType_POS":                38,
		"IfPhyType_POSX_TRUNK":         39,
		"IfPhyType_PWX_VE":             40,
		"IfPhyType_REMOTEX_AP":         41,
		"IfPhyType_SERIAL":             42,
		"IfPhyType_SERVICEIF":          43,
		"IfPhyType_SIP":                44,
		"IfPhyType_STACKX_PORT":        45,
		"IfPhyType_T1":                 46,
		"IfPhyType_T3":                 47,
		"IfPhyType_TRUNKX_SERIAL":      48,
		"IfPhyType_TUNNEL":             49,
		"IfPhyType_VBDIF":              50,
		"IfPhyType_VBRIDGE":            51,
		"IfPhyType_VC12":               52,
		"IfPhyType_VC4":                53,
		"IfPhyType_VIRTUALX_ETHERNET":  54,
		"IfPhyType_VIRTUALX_ODUK":      55,
		"IfPhyType_VIRTUALX_SERIAL":    56,
		"IfPhyType_VIRTUALX_TEMPLATE":  57,
		"IfPhyType_VLANIF":             58,
		"IfPhyType_VMETH":              59,
		"IfPhyType_VP":                 60,
		"IfPhyType_VXX_TUNNEL":         61,
		"IfPhyType_WDM":                62,
		"IfPhyType_XGIGABITETHERNET":   63,
		"IfPhyType_X_100GE":            64,
		"IfPhyType_X_10GE":             65,
		"IfPhyType_X_10X10GE":          66,
		"IfPhyType_X_200GE":            67,
		"IfPhyType_X_25GE":             68,
		"IfPhyType_X_3X40GE":           69,
		"IfPhyType_X_400GE":            70,
		"IfPhyType_X_40GE":             71,
		"IfPhyType_X_4X10GE":           72,
		"IfPhyType_X_4X25GE":           73,
		"IfPhyType_X_50GE":             74,
		"IfPhyType_X_50X_100GE":        75,
	}
)

func (x Ifm_InterfaceCounts_InterfaceCount_IfPhyType) Enum() *Ifm_InterfaceCounts_InterfaceCount_IfPhyType {
	p := new(Ifm_InterfaceCounts_InterfaceCount_IfPhyType)
	*p = x
	return p
}

func (x Ifm_InterfaceCounts_InterfaceCount_IfPhyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_InterfaceCounts_InterfaceCount_IfPhyType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[57].Descriptor()
}

func (Ifm_InterfaceCounts_InterfaceCount_IfPhyType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[57]
}

func (x Ifm_InterfaceCounts_InterfaceCount_IfPhyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_InterfaceCounts_InterfaceCount_IfPhyType.Descriptor instead.
func (Ifm_InterfaceCounts_InterfaceCount_IfPhyType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 5, 0, 1}
}

type Ifm_IpConflictConfig_IpConflictCheck int32

const (
	Ifm_IpConflictConfig_IpConflictCheck_DISABLE Ifm_IpConflictConfig_IpConflictCheck = 0
	Ifm_IpConflictConfig_IpConflictCheck_ENABLE  Ifm_IpConflictConfig_IpConflictCheck = 1
)

// Enum value maps for Ifm_IpConflictConfig_IpConflictCheck.
var (
	Ifm_IpConflictConfig_IpConflictCheck_name = map[int32]string{
		0: "IpConflictCheck_DISABLE",
		1: "IpConflictCheck_ENABLE",
	}
	Ifm_IpConflictConfig_IpConflictCheck_value = map[string]int32{
		"IpConflictCheck_DISABLE": 0,
		"IpConflictCheck_ENABLE":  1,
	}
)

func (x Ifm_IpConflictConfig_IpConflictCheck) Enum() *Ifm_IpConflictConfig_IpConflictCheck {
	p := new(Ifm_IpConflictConfig_IpConflictCheck)
	*p = x
	return p
}

func (x Ifm_IpConflictConfig_IpConflictCheck) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_IpConflictConfig_IpConflictCheck) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[58].Descriptor()
}

func (Ifm_IpConflictConfig_IpConflictCheck) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[58]
}

func (x Ifm_IpConflictConfig_IpConflictCheck) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_IpConflictConfig_IpConflictCheck.Descriptor instead.
func (Ifm_IpConflictConfig_IpConflictCheck) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 6, 0}
}

type Ifm_IpConflictConfig_IpConflictPreempt int32

const (
	Ifm_IpConflictConfig_IpConflictPreempt_DISABLE Ifm_IpConflictConfig_IpConflictPreempt = 0
	Ifm_IpConflictConfig_IpConflictPreempt_ENABLE  Ifm_IpConflictConfig_IpConflictPreempt = 1
)

// Enum value maps for Ifm_IpConflictConfig_IpConflictPreempt.
var (
	Ifm_IpConflictConfig_IpConflictPreempt_name = map[int32]string{
		0: "IpConflictPreempt_DISABLE",
		1: "IpConflictPreempt_ENABLE",
	}
	Ifm_IpConflictConfig_IpConflictPreempt_value = map[string]int32{
		"IpConflictPreempt_DISABLE": 0,
		"IpConflictPreempt_ENABLE":  1,
	}
)

func (x Ifm_IpConflictConfig_IpConflictPreempt) Enum() *Ifm_IpConflictConfig_IpConflictPreempt {
	p := new(Ifm_IpConflictConfig_IpConflictPreempt)
	*p = x
	return p
}

func (x Ifm_IpConflictConfig_IpConflictPreempt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_IpConflictConfig_IpConflictPreempt) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[59].Descriptor()
}

func (Ifm_IpConflictConfig_IpConflictPreempt) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[59]
}

func (x Ifm_IpConflictConfig_IpConflictPreempt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_IpConflictConfig_IpConflictPreempt.Descriptor instead.
func (Ifm_IpConflictConfig_IpConflictPreempt) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 6, 1}
}

type Ifm_IpConflictConfig_Ipv6ConflictCheck int32

const (
	Ifm_IpConflictConfig_Ipv6ConflictCheck_DISABLE Ifm_IpConflictConfig_Ipv6ConflictCheck = 0
	Ifm_IpConflictConfig_Ipv6ConflictCheck_ENABLE  Ifm_IpConflictConfig_Ipv6ConflictCheck = 1
)

// Enum value maps for Ifm_IpConflictConfig_Ipv6ConflictCheck.
var (
	Ifm_IpConflictConfig_Ipv6ConflictCheck_name = map[int32]string{
		0: "Ipv6ConflictCheck_DISABLE",
		1: "Ipv6ConflictCheck_ENABLE",
	}
	Ifm_IpConflictConfig_Ipv6ConflictCheck_value = map[string]int32{
		"Ipv6ConflictCheck_DISABLE": 0,
		"Ipv6ConflictCheck_ENABLE":  1,
	}
)

func (x Ifm_IpConflictConfig_Ipv6ConflictCheck) Enum() *Ifm_IpConflictConfig_Ipv6ConflictCheck {
	p := new(Ifm_IpConflictConfig_Ipv6ConflictCheck)
	*p = x
	return p
}

func (x Ifm_IpConflictConfig_Ipv6ConflictCheck) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_IpConflictConfig_Ipv6ConflictCheck) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[60].Descriptor()
}

func (Ifm_IpConflictConfig_Ipv6ConflictCheck) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[60]
}

func (x Ifm_IpConflictConfig_Ipv6ConflictCheck) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_IpConflictConfig_Ipv6ConflictCheck.Descriptor instead.
func (Ifm_IpConflictConfig_Ipv6ConflictCheck) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 6, 2}
}

type Ifm_IpConflictConfig_Ipv6ConflictPreempt int32

const (
	Ifm_IpConflictConfig_Ipv6ConflictPreempt_DISABLE Ifm_IpConflictConfig_Ipv6ConflictPreempt = 0
	Ifm_IpConflictConfig_Ipv6ConflictPreempt_ENABLE  Ifm_IpConflictConfig_Ipv6ConflictPreempt = 1
)

// Enum value maps for Ifm_IpConflictConfig_Ipv6ConflictPreempt.
var (
	Ifm_IpConflictConfig_Ipv6ConflictPreempt_name = map[int32]string{
		0: "Ipv6ConflictPreempt_DISABLE",
		1: "Ipv6ConflictPreempt_ENABLE",
	}
	Ifm_IpConflictConfig_Ipv6ConflictPreempt_value = map[string]int32{
		"Ipv6ConflictPreempt_DISABLE": 0,
		"Ipv6ConflictPreempt_ENABLE":  1,
	}
)

func (x Ifm_IpConflictConfig_Ipv6ConflictPreempt) Enum() *Ifm_IpConflictConfig_Ipv6ConflictPreempt {
	p := new(Ifm_IpConflictConfig_Ipv6ConflictPreempt)
	*p = x
	return p
}

func (x Ifm_IpConflictConfig_Ipv6ConflictPreempt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_IpConflictConfig_Ipv6ConflictPreempt) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[61].Descriptor()
}

func (Ifm_IpConflictConfig_Ipv6ConflictPreempt) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[61]
}

func (x Ifm_IpConflictConfig_Ipv6ConflictPreempt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_IpConflictConfig_Ipv6ConflictPreempt.Descriptor instead.
func (Ifm_IpConflictConfig_Ipv6ConflictPreempt) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 6, 3}
}

type Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType int32

const (
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_ATM                Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 0
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_ATMX_BUNDLE        Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 1
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_CPOS               Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 2
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_CPOSX_TRUNK        Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 3
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_DCNINTERFACE       Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 4
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_E1                 Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 5
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_E3                 Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 6
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_ETHERNET           Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 7
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_ETHX_TRUNK         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 8
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FABRICX_PORT       Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 9
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FC                 Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 10
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FCOEX_PORT         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 11
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FIBERX_CHANNEL     Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 12
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FLEXE              Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 13
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FLEXEX_100G        Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 14
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FLEXEX_200GE       Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 15
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FLEXEX_400G        Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 16
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FLEXEX_50G         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 17
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_FLEXEX_50X_100G    Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 18
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_GEBRIEF            Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 19
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_GIGABITETHERNET    Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 20
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_GLOBALX_IMAX_GROUP Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 21
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_GLOBALX_MPX_GROUP  Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 22
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_GLOBALX_VE         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 23
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_GMPLSX_UNI         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 24
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_HPGE               Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 25
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_IMAX_GROUP         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 26
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_IMETH              Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 27
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_INFINIBAND         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 28
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_IPX_TRUNK          Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 29
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_LMPIF              Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 30
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_LOOPBACK           Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 31
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_METH               Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 32
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_MPX_GROUP          Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 33
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_MTUNNEL            Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 34
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_NULL               Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 35
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_NVE                Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 36
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_OTN                Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 37
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_POS                Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 38
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_POSX_TRUNK         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 39
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_PWX_VE             Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 40
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_REMOTEX_AP         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 41
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_SERIAL             Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 42
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_SERVICEIF          Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 43
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_SIP                Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 44
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_STACKX_PORT        Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 45
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_T1                 Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 46
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_T3                 Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 47
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_TRUNKX_SERIAL      Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 48
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_TUNNEL             Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 49
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VBDIF              Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 50
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VBRIDGE            Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 51
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VC12               Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 52
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VC4                Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 53
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VIRTUALX_ETHERNET  Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 54
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VIRTUALX_ODUK      Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 55
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VIRTUALX_SERIAL    Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 56
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VIRTUALX_TEMPLATE  Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 57
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VLANIF             Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 58
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VMETH              Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 59
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VP                 Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 60
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_VXX_TUNNEL         Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 61
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_WDM                Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 62
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_XGIGABITETHERNET   Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 63
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_100GE            Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 64
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_10GE             Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 65
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_10X10GE          Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 66
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_200GE            Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 67
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_25GE             Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 68
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_3X40GE           Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 69
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_400GE            Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 70
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_40GE             Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 71
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_4X10GE           Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 72
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_4X25GE           Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 73
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_50GE             Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 74
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_X_50X_100GE        Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType = 75
)

// Enum value maps for Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType.
var (
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_name = map[int32]string{
		0:  "IfPhyType_ATM",
		1:  "IfPhyType_ATMX_BUNDLE",
		2:  "IfPhyType_CPOS",
		3:  "IfPhyType_CPOSX_TRUNK",
		4:  "IfPhyType_DCNINTERFACE",
		5:  "IfPhyType_E1",
		6:  "IfPhyType_E3",
		7:  "IfPhyType_ETHERNET",
		8:  "IfPhyType_ETHX_TRUNK",
		9:  "IfPhyType_FABRICX_PORT",
		10: "IfPhyType_FC",
		11: "IfPhyType_FCOEX_PORT",
		12: "IfPhyType_FIBERX_CHANNEL",
		13: "IfPhyType_FLEXE",
		14: "IfPhyType_FLEXEX_100G",
		15: "IfPhyType_FLEXEX_200GE",
		16: "IfPhyType_FLEXEX_400G",
		17: "IfPhyType_FLEXEX_50G",
		18: "IfPhyType_FLEXEX_50X_100G",
		19: "IfPhyType_GEBRIEF",
		20: "IfPhyType_GIGABITETHERNET",
		21: "IfPhyType_GLOBALX_IMAX_GROUP",
		22: "IfPhyType_GLOBALX_MPX_GROUP",
		23: "IfPhyType_GLOBALX_VE",
		24: "IfPhyType_GMPLSX_UNI",
		25: "IfPhyType_HPGE",
		26: "IfPhyType_IMAX_GROUP",
		27: "IfPhyType_IMETH",
		28: "IfPhyType_INFINIBAND",
		29: "IfPhyType_IPX_TRUNK",
		30: "IfPhyType_LMPIF",
		31: "IfPhyType_LOOPBACK",
		32: "IfPhyType_METH",
		33: "IfPhyType_MPX_GROUP",
		34: "IfPhyType_MTUNNEL",
		35: "IfPhyType_NULL",
		36: "IfPhyType_NVE",
		37: "IfPhyType_OTN",
		38: "IfPhyType_POS",
		39: "IfPhyType_POSX_TRUNK",
		40: "IfPhyType_PWX_VE",
		41: "IfPhyType_REMOTEX_AP",
		42: "IfPhyType_SERIAL",
		43: "IfPhyType_SERVICEIF",
		44: "IfPhyType_SIP",
		45: "IfPhyType_STACKX_PORT",
		46: "IfPhyType_T1",
		47: "IfPhyType_T3",
		48: "IfPhyType_TRUNKX_SERIAL",
		49: "IfPhyType_TUNNEL",
		50: "IfPhyType_VBDIF",
		51: "IfPhyType_VBRIDGE",
		52: "IfPhyType_VC12",
		53: "IfPhyType_VC4",
		54: "IfPhyType_VIRTUALX_ETHERNET",
		55: "IfPhyType_VIRTUALX_ODUK",
		56: "IfPhyType_VIRTUALX_SERIAL",
		57: "IfPhyType_VIRTUALX_TEMPLATE",
		58: "IfPhyType_VLANIF",
		59: "IfPhyType_VMETH",
		60: "IfPhyType_VP",
		61: "IfPhyType_VXX_TUNNEL",
		62: "IfPhyType_WDM",
		63: "IfPhyType_XGIGABITETHERNET",
		64: "IfPhyType_X_100GE",
		65: "IfPhyType_X_10GE",
		66: "IfPhyType_X_10X10GE",
		67: "IfPhyType_X_200GE",
		68: "IfPhyType_X_25GE",
		69: "IfPhyType_X_3X40GE",
		70: "IfPhyType_X_400GE",
		71: "IfPhyType_X_40GE",
		72: "IfPhyType_X_4X10GE",
		73: "IfPhyType_X_4X25GE",
		74: "IfPhyType_X_50GE",
		75: "IfPhyType_X_50X_100GE",
	}
	Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_value = map[string]int32{
		"IfPhyType_ATM":                0,
		"IfPhyType_ATMX_BUNDLE":        1,
		"IfPhyType_CPOS":               2,
		"IfPhyType_CPOSX_TRUNK":        3,
		"IfPhyType_DCNINTERFACE":       4,
		"IfPhyType_E1":                 5,
		"IfPhyType_E3":                 6,
		"IfPhyType_ETHERNET":           7,
		"IfPhyType_ETHX_TRUNK":         8,
		"IfPhyType_FABRICX_PORT":       9,
		"IfPhyType_FC":                 10,
		"IfPhyType_FCOEX_PORT":         11,
		"IfPhyType_FIBERX_CHANNEL":     12,
		"IfPhyType_FLEXE":              13,
		"IfPhyType_FLEXEX_100G":        14,
		"IfPhyType_FLEXEX_200GE":       15,
		"IfPhyType_FLEXEX_400G":        16,
		"IfPhyType_FLEXEX_50G":         17,
		"IfPhyType_FLEXEX_50X_100G":    18,
		"IfPhyType_GEBRIEF":            19,
		"IfPhyType_GIGABITETHERNET":    20,
		"IfPhyType_GLOBALX_IMAX_GROUP": 21,
		"IfPhyType_GLOBALX_MPX_GROUP":  22,
		"IfPhyType_GLOBALX_VE":         23,
		"IfPhyType_GMPLSX_UNI":         24,
		"IfPhyType_HPGE":               25,
		"IfPhyType_IMAX_GROUP":         26,
		"IfPhyType_IMETH":              27,
		"IfPhyType_INFINIBAND":         28,
		"IfPhyType_IPX_TRUNK":          29,
		"IfPhyType_LMPIF":              30,
		"IfPhyType_LOOPBACK":           31,
		"IfPhyType_METH":               32,
		"IfPhyType_MPX_GROUP":          33,
		"IfPhyType_MTUNNEL":            34,
		"IfPhyType_NULL":               35,
		"IfPhyType_NVE":                36,
		"IfPhyType_OTN":                37,
		"IfPhyType_POS":                38,
		"IfPhyType_POSX_TRUNK":         39,
		"IfPhyType_PWX_VE":             40,
		"IfPhyType_REMOTEX_AP":         41,
		"IfPhyType_SERIAL":             42,
		"IfPhyType_SERVICEIF":          43,
		"IfPhyType_SIP":                44,
		"IfPhyType_STACKX_PORT":        45,
		"IfPhyType_T1":                 46,
		"IfPhyType_T3":                 47,
		"IfPhyType_TRUNKX_SERIAL":      48,
		"IfPhyType_TUNNEL":             49,
		"IfPhyType_VBDIF":              50,
		"IfPhyType_VBRIDGE":            51,
		"IfPhyType_VC12":               52,
		"IfPhyType_VC4":                53,
		"IfPhyType_VIRTUALX_ETHERNET":  54,
		"IfPhyType_VIRTUALX_ODUK":      55,
		"IfPhyType_VIRTUALX_SERIAL":    56,
		"IfPhyType_VIRTUALX_TEMPLATE":  57,
		"IfPhyType_VLANIF":             58,
		"IfPhyType_VMETH":              59,
		"IfPhyType_VP":                 60,
		"IfPhyType_VXX_TUNNEL":         61,
		"IfPhyType_WDM":                62,
		"IfPhyType_XGIGABITETHERNET":   63,
		"IfPhyType_X_100GE":            64,
		"IfPhyType_X_10GE":             65,
		"IfPhyType_X_10X10GE":          66,
		"IfPhyType_X_200GE":            67,
		"IfPhyType_X_25GE":             68,
		"IfPhyType_X_3X40GE":           69,
		"IfPhyType_X_400GE":            70,
		"IfPhyType_X_40GE":             71,
		"IfPhyType_X_4X10GE":           72,
		"IfPhyType_X_4X25GE":           73,
		"IfPhyType_X_50GE":             74,
		"IfPhyType_X_50X_100GE":        75,
	}
)

func (x Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType) Enum() *Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType {
	p := new(Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType)
	*p = x
	return p
}

func (x Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[62].Descriptor()
}

func (Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[62]
}

func (x Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType.Descriptor instead.
func (Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 7, 0, 0, 0}
}

type Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType int32

const (
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_ATM                Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 0
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_ATMX_BUNDLE        Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 1
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_CPOS               Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 2
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_CPOSX_TRUNK        Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 3
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_DCNINTERFACE       Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 4
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_E1                 Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 5
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_E3                 Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 6
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_ETHERNET           Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 7
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_ETHX_TRUNK         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 8
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FABRICX_PORT       Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 9
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FC                 Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 10
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FCOEX_PORT         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 11
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FIBERX_CHANNEL     Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 12
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FLEXE              Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 13
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FLEXEX_100G        Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 14
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FLEXEX_200GE       Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 15
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FLEXEX_400G        Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 16
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FLEXEX_50G         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 17
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_FLEXEX_50X_100G    Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 18
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_GEBRIEF            Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 19
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_GIGABITETHERNET    Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 20
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_GLOBALX_IMAX_GROUP Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 21
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_GLOBALX_MPX_GROUP  Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 22
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_GLOBALX_VE         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 23
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_GMPLSX_UNI         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 24
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_HPGE               Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 25
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_IMAX_GROUP         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 26
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_IMETH              Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 27
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_INFINIBAND         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 28
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_IPX_TRUNK          Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 29
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_LMPIF              Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 30
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_LOOPBACK           Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 31
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_METH               Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 32
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_MPX_GROUP          Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 33
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_MTUNNEL            Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 34
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_NULL               Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 35
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_NVE                Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 36
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_OTN                Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 37
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_POS                Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 38
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_POSX_TRUNK         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 39
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_PWX_VE             Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 40
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_REMOTEX_AP         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 41
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_SERIAL             Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 42
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_SERVICEIF          Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 43
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_SIP                Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 44
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_STACKX_PORT        Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 45
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_T1                 Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 46
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_T3                 Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 47
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_TRUNKX_SERIAL      Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 48
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_TUNNEL             Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 49
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VBDIF              Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 50
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VBRIDGE            Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 51
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VC12               Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 52
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VC4                Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 53
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VIRTUALX_ETHERNET  Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 54
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VIRTUALX_ODUK      Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 55
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VIRTUALX_SERIAL    Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 56
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VIRTUALX_TEMPLATE  Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 57
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VLANIF             Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 58
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VMETH              Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 59
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VP                 Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 60
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_VXX_TUNNEL         Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 61
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_WDM                Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 62
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_XGIGABITETHERNET   Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 63
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_100GE            Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 64
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_10GE             Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 65
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_10X10GE          Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 66
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_200GE            Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 67
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_25GE             Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 68
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_3X40GE           Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 69
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_400GE            Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 70
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_40GE             Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 71
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_4X10GE           Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 72
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_4X25GE           Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 73
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_50GE             Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 74
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_X_50X_100GE        Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType = 75
)

// Enum value maps for Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType.
var (
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_name = map[int32]string{
		0:  "IfPhyType_ATM",
		1:  "IfPhyType_ATMX_BUNDLE",
		2:  "IfPhyType_CPOS",
		3:  "IfPhyType_CPOSX_TRUNK",
		4:  "IfPhyType_DCNINTERFACE",
		5:  "IfPhyType_E1",
		6:  "IfPhyType_E3",
		7:  "IfPhyType_ETHERNET",
		8:  "IfPhyType_ETHX_TRUNK",
		9:  "IfPhyType_FABRICX_PORT",
		10: "IfPhyType_FC",
		11: "IfPhyType_FCOEX_PORT",
		12: "IfPhyType_FIBERX_CHANNEL",
		13: "IfPhyType_FLEXE",
		14: "IfPhyType_FLEXEX_100G",
		15: "IfPhyType_FLEXEX_200GE",
		16: "IfPhyType_FLEXEX_400G",
		17: "IfPhyType_FLEXEX_50G",
		18: "IfPhyType_FLEXEX_50X_100G",
		19: "IfPhyType_GEBRIEF",
		20: "IfPhyType_GIGABITETHERNET",
		21: "IfPhyType_GLOBALX_IMAX_GROUP",
		22: "IfPhyType_GLOBALX_MPX_GROUP",
		23: "IfPhyType_GLOBALX_VE",
		24: "IfPhyType_GMPLSX_UNI",
		25: "IfPhyType_HPGE",
		26: "IfPhyType_IMAX_GROUP",
		27: "IfPhyType_IMETH",
		28: "IfPhyType_INFINIBAND",
		29: "IfPhyType_IPX_TRUNK",
		30: "IfPhyType_LMPIF",
		31: "IfPhyType_LOOPBACK",
		32: "IfPhyType_METH",
		33: "IfPhyType_MPX_GROUP",
		34: "IfPhyType_MTUNNEL",
		35: "IfPhyType_NULL",
		36: "IfPhyType_NVE",
		37: "IfPhyType_OTN",
		38: "IfPhyType_POS",
		39: "IfPhyType_POSX_TRUNK",
		40: "IfPhyType_PWX_VE",
		41: "IfPhyType_REMOTEX_AP",
		42: "IfPhyType_SERIAL",
		43: "IfPhyType_SERVICEIF",
		44: "IfPhyType_SIP",
		45: "IfPhyType_STACKX_PORT",
		46: "IfPhyType_T1",
		47: "IfPhyType_T3",
		48: "IfPhyType_TRUNKX_SERIAL",
		49: "IfPhyType_TUNNEL",
		50: "IfPhyType_VBDIF",
		51: "IfPhyType_VBRIDGE",
		52: "IfPhyType_VC12",
		53: "IfPhyType_VC4",
		54: "IfPhyType_VIRTUALX_ETHERNET",
		55: "IfPhyType_VIRTUALX_ODUK",
		56: "IfPhyType_VIRTUALX_SERIAL",
		57: "IfPhyType_VIRTUALX_TEMPLATE",
		58: "IfPhyType_VLANIF",
		59: "IfPhyType_VMETH",
		60: "IfPhyType_VP",
		61: "IfPhyType_VXX_TUNNEL",
		62: "IfPhyType_WDM",
		63: "IfPhyType_XGIGABITETHERNET",
		64: "IfPhyType_X_100GE",
		65: "IfPhyType_X_10GE",
		66: "IfPhyType_X_10X10GE",
		67: "IfPhyType_X_200GE",
		68: "IfPhyType_X_25GE",
		69: "IfPhyType_X_3X40GE",
		70: "IfPhyType_X_400GE",
		71: "IfPhyType_X_40GE",
		72: "IfPhyType_X_4X10GE",
		73: "IfPhyType_X_4X25GE",
		74: "IfPhyType_X_50GE",
		75: "IfPhyType_X_50X_100GE",
	}
	Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_value = map[string]int32{
		"IfPhyType_ATM":                0,
		"IfPhyType_ATMX_BUNDLE":        1,
		"IfPhyType_CPOS":               2,
		"IfPhyType_CPOSX_TRUNK":        3,
		"IfPhyType_DCNINTERFACE":       4,
		"IfPhyType_E1":                 5,
		"IfPhyType_E3":                 6,
		"IfPhyType_ETHERNET":           7,
		"IfPhyType_ETHX_TRUNK":         8,
		"IfPhyType_FABRICX_PORT":       9,
		"IfPhyType_FC":                 10,
		"IfPhyType_FCOEX_PORT":         11,
		"IfPhyType_FIBERX_CHANNEL":     12,
		"IfPhyType_FLEXE":              13,
		"IfPhyType_FLEXEX_100G":        14,
		"IfPhyType_FLEXEX_200GE":       15,
		"IfPhyType_FLEXEX_400G":        16,
		"IfPhyType_FLEXEX_50G":         17,
		"IfPhyType_FLEXEX_50X_100G":    18,
		"IfPhyType_GEBRIEF":            19,
		"IfPhyType_GIGABITETHERNET":    20,
		"IfPhyType_GLOBALX_IMAX_GROUP": 21,
		"IfPhyType_GLOBALX_MPX_GROUP":  22,
		"IfPhyType_GLOBALX_VE":         23,
		"IfPhyType_GMPLSX_UNI":         24,
		"IfPhyType_HPGE":               25,
		"IfPhyType_IMAX_GROUP":         26,
		"IfPhyType_IMETH":              27,
		"IfPhyType_INFINIBAND":         28,
		"IfPhyType_IPX_TRUNK":          29,
		"IfPhyType_LMPIF":              30,
		"IfPhyType_LOOPBACK":           31,
		"IfPhyType_METH":               32,
		"IfPhyType_MPX_GROUP":          33,
		"IfPhyType_MTUNNEL":            34,
		"IfPhyType_NULL":               35,
		"IfPhyType_NVE":                36,
		"IfPhyType_OTN":                37,
		"IfPhyType_POS":                38,
		"IfPhyType_POSX_TRUNK":         39,
		"IfPhyType_PWX_VE":             40,
		"IfPhyType_REMOTEX_AP":         41,
		"IfPhyType_SERIAL":             42,
		"IfPhyType_SERVICEIF":          43,
		"IfPhyType_SIP":                44,
		"IfPhyType_STACKX_PORT":        45,
		"IfPhyType_T1":                 46,
		"IfPhyType_T3":                 47,
		"IfPhyType_TRUNKX_SERIAL":      48,
		"IfPhyType_TUNNEL":             49,
		"IfPhyType_VBDIF":              50,
		"IfPhyType_VBRIDGE":            51,
		"IfPhyType_VC12":               52,
		"IfPhyType_VC4":                53,
		"IfPhyType_VIRTUALX_ETHERNET":  54,
		"IfPhyType_VIRTUALX_ODUK":      55,
		"IfPhyType_VIRTUALX_SERIAL":    56,
		"IfPhyType_VIRTUALX_TEMPLATE":  57,
		"IfPhyType_VLANIF":             58,
		"IfPhyType_VMETH":              59,
		"IfPhyType_VP":                 60,
		"IfPhyType_VXX_TUNNEL":         61,
		"IfPhyType_WDM":                62,
		"IfPhyType_XGIGABITETHERNET":   63,
		"IfPhyType_X_100GE":            64,
		"IfPhyType_X_10GE":             65,
		"IfPhyType_X_10X10GE":          66,
		"IfPhyType_X_200GE":            67,
		"IfPhyType_X_25GE":             68,
		"IfPhyType_X_3X40GE":           69,
		"IfPhyType_X_400GE":            70,
		"IfPhyType_X_40GE":             71,
		"IfPhyType_X_4X10GE":           72,
		"IfPhyType_X_4X25GE":           73,
		"IfPhyType_X_50GE":             74,
		"IfPhyType_X_50X_100GE":        75,
	}
)

func (x Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType) Enum() *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType {
	p := new(Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType)
	*p = x
	return p
}

func (x Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[63].Descriptor()
}

func (Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[63]
}

func (x Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType.Descriptor instead.
func (Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 8, 0, 0, 0}
}

type Ifm_PppDamp_PppDampLevel int32

const (
	Ifm_PppDamp_PppDampLevel_HEAVY  Ifm_PppDamp_PppDampLevel = 0
	Ifm_PppDamp_PppDampLevel_LIGHT  Ifm_PppDamp_PppDampLevel = 1
	Ifm_PppDamp_PppDampLevel_MANUAL Ifm_PppDamp_PppDampLevel = 2
	Ifm_PppDamp_PppDampLevel_MIDDLE Ifm_PppDamp_PppDampLevel = 3
)

// Enum value maps for Ifm_PppDamp_PppDampLevel.
var (
	Ifm_PppDamp_PppDampLevel_name = map[int32]string{
		0: "PppDampLevel_HEAVY",
		1: "PppDampLevel_LIGHT",
		2: "PppDampLevel_MANUAL",
		3: "PppDampLevel_MIDDLE",
	}
	Ifm_PppDamp_PppDampLevel_value = map[string]int32{
		"PppDampLevel_HEAVY":  0,
		"PppDampLevel_LIGHT":  1,
		"PppDampLevel_MANUAL": 2,
		"PppDampLevel_MIDDLE": 3,
	}
)

func (x Ifm_PppDamp_PppDampLevel) Enum() *Ifm_PppDamp_PppDampLevel {
	p := new(Ifm_PppDamp_PppDampLevel)
	*p = x
	return p
}

func (x Ifm_PppDamp_PppDampLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_PppDamp_PppDampLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[64].Descriptor()
}

func (Ifm_PppDamp_PppDampLevel) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[64]
}

func (x Ifm_PppDamp_PppDampLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_PppDamp_PppDampLevel.Descriptor instead.
func (Ifm_PppDamp_PppDampLevel) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 9, 0}
}

type Ifm_StaticDimRanges_StaticDimRange_IfPhyType int32

const (
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_ATM                Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 0
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_ATMX_BUNDLE        Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 1
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_CPOS               Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 2
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_CPOSX_TRUNK        Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 3
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_DCNINTERFACE       Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 4
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_E1                 Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 5
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_E3                 Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 6
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_ETHERNET           Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 7
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_ETHX_TRUNK         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 8
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FABRICX_PORT       Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 9
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FC                 Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 10
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FCOEX_PORT         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 11
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FIBERX_CHANNEL     Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 12
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FLEXE              Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 13
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FLEXEX_100G        Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 14
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FLEXEX_200GE       Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 15
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FLEXEX_400G        Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 16
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FLEXEX_50G         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 17
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_FLEXEX_50X_100G    Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 18
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_GEBRIEF            Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 19
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_GIGABITETHERNET    Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 20
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_GLOBALX_IMAX_GROUP Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 21
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_GLOBALX_MPX_GROUP  Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 22
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_GLOBALX_VE         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 23
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_GMPLSX_UNI         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 24
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_HPGE               Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 25
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_IMAX_GROUP         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 26
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_IMETH              Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 27
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_INFINIBAND         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 28
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_IPX_TRUNK          Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 29
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_LMPIF              Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 30
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_LOOPBACK           Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 31
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_METH               Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 32
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_MPX_GROUP          Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 33
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_MTUNNEL            Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 34
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_NULL               Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 35
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_NVE                Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 36
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_OTN                Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 37
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_POS                Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 38
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_POSX_TRUNK         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 39
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_PWX_VE             Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 40
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_REMOTEX_AP         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 41
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_SERIAL             Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 42
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_SERVICEIF          Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 43
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_SIP                Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 44
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_STACKX_PORT        Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 45
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_T1                 Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 46
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_T3                 Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 47
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_TRUNKX_SERIAL      Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 48
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_TUNNEL             Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 49
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VBDIF              Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 50
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VBRIDGE            Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 51
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VC12               Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 52
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VC4                Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 53
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VIRTUALX_ETHERNET  Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 54
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VIRTUALX_ODUK      Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 55
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VIRTUALX_SERIAL    Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 56
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VIRTUALX_TEMPLATE  Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 57
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VLANIF             Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 58
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VMETH              Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 59
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VP                 Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 60
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_VXX_TUNNEL         Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 61
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_WDM                Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 62
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_XGIGABITETHERNET   Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 63
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_100GE            Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 64
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_10GE             Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 65
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_10X10GE          Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 66
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_200GE            Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 67
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_25GE             Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 68
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_3X40GE           Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 69
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_400GE            Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 70
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_40GE             Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 71
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_4X10GE           Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 72
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_4X25GE           Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 73
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_50GE             Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 74
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_X_50X_100GE        Ifm_StaticDimRanges_StaticDimRange_IfPhyType = 75
)

// Enum value maps for Ifm_StaticDimRanges_StaticDimRange_IfPhyType.
var (
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_name = map[int32]string{
		0:  "IfPhyType_ATM",
		1:  "IfPhyType_ATMX_BUNDLE",
		2:  "IfPhyType_CPOS",
		3:  "IfPhyType_CPOSX_TRUNK",
		4:  "IfPhyType_DCNINTERFACE",
		5:  "IfPhyType_E1",
		6:  "IfPhyType_E3",
		7:  "IfPhyType_ETHERNET",
		8:  "IfPhyType_ETHX_TRUNK",
		9:  "IfPhyType_FABRICX_PORT",
		10: "IfPhyType_FC",
		11: "IfPhyType_FCOEX_PORT",
		12: "IfPhyType_FIBERX_CHANNEL",
		13: "IfPhyType_FLEXE",
		14: "IfPhyType_FLEXEX_100G",
		15: "IfPhyType_FLEXEX_200GE",
		16: "IfPhyType_FLEXEX_400G",
		17: "IfPhyType_FLEXEX_50G",
		18: "IfPhyType_FLEXEX_50X_100G",
		19: "IfPhyType_GEBRIEF",
		20: "IfPhyType_GIGABITETHERNET",
		21: "IfPhyType_GLOBALX_IMAX_GROUP",
		22: "IfPhyType_GLOBALX_MPX_GROUP",
		23: "IfPhyType_GLOBALX_VE",
		24: "IfPhyType_GMPLSX_UNI",
		25: "IfPhyType_HPGE",
		26: "IfPhyType_IMAX_GROUP",
		27: "IfPhyType_IMETH",
		28: "IfPhyType_INFINIBAND",
		29: "IfPhyType_IPX_TRUNK",
		30: "IfPhyType_LMPIF",
		31: "IfPhyType_LOOPBACK",
		32: "IfPhyType_METH",
		33: "IfPhyType_MPX_GROUP",
		34: "IfPhyType_MTUNNEL",
		35: "IfPhyType_NULL",
		36: "IfPhyType_NVE",
		37: "IfPhyType_OTN",
		38: "IfPhyType_POS",
		39: "IfPhyType_POSX_TRUNK",
		40: "IfPhyType_PWX_VE",
		41: "IfPhyType_REMOTEX_AP",
		42: "IfPhyType_SERIAL",
		43: "IfPhyType_SERVICEIF",
		44: "IfPhyType_SIP",
		45: "IfPhyType_STACKX_PORT",
		46: "IfPhyType_T1",
		47: "IfPhyType_T3",
		48: "IfPhyType_TRUNKX_SERIAL",
		49: "IfPhyType_TUNNEL",
		50: "IfPhyType_VBDIF",
		51: "IfPhyType_VBRIDGE",
		52: "IfPhyType_VC12",
		53: "IfPhyType_VC4",
		54: "IfPhyType_VIRTUALX_ETHERNET",
		55: "IfPhyType_VIRTUALX_ODUK",
		56: "IfPhyType_VIRTUALX_SERIAL",
		57: "IfPhyType_VIRTUALX_TEMPLATE",
		58: "IfPhyType_VLANIF",
		59: "IfPhyType_VMETH",
		60: "IfPhyType_VP",
		61: "IfPhyType_VXX_TUNNEL",
		62: "IfPhyType_WDM",
		63: "IfPhyType_XGIGABITETHERNET",
		64: "IfPhyType_X_100GE",
		65: "IfPhyType_X_10GE",
		66: "IfPhyType_X_10X10GE",
		67: "IfPhyType_X_200GE",
		68: "IfPhyType_X_25GE",
		69: "IfPhyType_X_3X40GE",
		70: "IfPhyType_X_400GE",
		71: "IfPhyType_X_40GE",
		72: "IfPhyType_X_4X10GE",
		73: "IfPhyType_X_4X25GE",
		74: "IfPhyType_X_50GE",
		75: "IfPhyType_X_50X_100GE",
	}
	Ifm_StaticDimRanges_StaticDimRange_IfPhyType_value = map[string]int32{
		"IfPhyType_ATM":                0,
		"IfPhyType_ATMX_BUNDLE":        1,
		"IfPhyType_CPOS":               2,
		"IfPhyType_CPOSX_TRUNK":        3,
		"IfPhyType_DCNINTERFACE":       4,
		"IfPhyType_E1":                 5,
		"IfPhyType_E3":                 6,
		"IfPhyType_ETHERNET":           7,
		"IfPhyType_ETHX_TRUNK":         8,
		"IfPhyType_FABRICX_PORT":       9,
		"IfPhyType_FC":                 10,
		"IfPhyType_FCOEX_PORT":         11,
		"IfPhyType_FIBERX_CHANNEL":     12,
		"IfPhyType_FLEXE":              13,
		"IfPhyType_FLEXEX_100G":        14,
		"IfPhyType_FLEXEX_200GE":       15,
		"IfPhyType_FLEXEX_400G":        16,
		"IfPhyType_FLEXEX_50G":         17,
		"IfPhyType_FLEXEX_50X_100G":    18,
		"IfPhyType_GEBRIEF":            19,
		"IfPhyType_GIGABITETHERNET":    20,
		"IfPhyType_GLOBALX_IMAX_GROUP": 21,
		"IfPhyType_GLOBALX_MPX_GROUP":  22,
		"IfPhyType_GLOBALX_VE":         23,
		"IfPhyType_GMPLSX_UNI":         24,
		"IfPhyType_HPGE":               25,
		"IfPhyType_IMAX_GROUP":         26,
		"IfPhyType_IMETH":              27,
		"IfPhyType_INFINIBAND":         28,
		"IfPhyType_IPX_TRUNK":          29,
		"IfPhyType_LMPIF":              30,
		"IfPhyType_LOOPBACK":           31,
		"IfPhyType_METH":               32,
		"IfPhyType_MPX_GROUP":          33,
		"IfPhyType_MTUNNEL":            34,
		"IfPhyType_NULL":               35,
		"IfPhyType_NVE":                36,
		"IfPhyType_OTN":                37,
		"IfPhyType_POS":                38,
		"IfPhyType_POSX_TRUNK":         39,
		"IfPhyType_PWX_VE":             40,
		"IfPhyType_REMOTEX_AP":         41,
		"IfPhyType_SERIAL":             42,
		"IfPhyType_SERVICEIF":          43,
		"IfPhyType_SIP":                44,
		"IfPhyType_STACKX_PORT":        45,
		"IfPhyType_T1":                 46,
		"IfPhyType_T3":                 47,
		"IfPhyType_TRUNKX_SERIAL":      48,
		"IfPhyType_TUNNEL":             49,
		"IfPhyType_VBDIF":              50,
		"IfPhyType_VBRIDGE":            51,
		"IfPhyType_VC12":               52,
		"IfPhyType_VC4":                53,
		"IfPhyType_VIRTUALX_ETHERNET":  54,
		"IfPhyType_VIRTUALX_ODUK":      55,
		"IfPhyType_VIRTUALX_SERIAL":    56,
		"IfPhyType_VIRTUALX_TEMPLATE":  57,
		"IfPhyType_VLANIF":             58,
		"IfPhyType_VMETH":              59,
		"IfPhyType_VP":                 60,
		"IfPhyType_VXX_TUNNEL":         61,
		"IfPhyType_WDM":                62,
		"IfPhyType_XGIGABITETHERNET":   63,
		"IfPhyType_X_100GE":            64,
		"IfPhyType_X_10GE":             65,
		"IfPhyType_X_10X10GE":          66,
		"IfPhyType_X_200GE":            67,
		"IfPhyType_X_25GE":             68,
		"IfPhyType_X_3X40GE":           69,
		"IfPhyType_X_400GE":            70,
		"IfPhyType_X_40GE":             71,
		"IfPhyType_X_4X10GE":           72,
		"IfPhyType_X_4X25GE":           73,
		"IfPhyType_X_50GE":             74,
		"IfPhyType_X_50X_100GE":        75,
	}
)

func (x Ifm_StaticDimRanges_StaticDimRange_IfPhyType) Enum() *Ifm_StaticDimRanges_StaticDimRange_IfPhyType {
	p := new(Ifm_StaticDimRanges_StaticDimRange_IfPhyType)
	*p = x
	return p
}

func (x Ifm_StaticDimRanges_StaticDimRange_IfPhyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_StaticDimRanges_StaticDimRange_IfPhyType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[65].Descriptor()
}

func (Ifm_StaticDimRanges_StaticDimRange_IfPhyType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[65]
}

func (x Ifm_StaticDimRanges_StaticDimRange_IfPhyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ifm_StaticDimRanges_StaticDimRange_IfPhyType.Descriptor instead.
func (Ifm_StaticDimRanges_StaticDimRange_IfPhyType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 11, 0, 0}
}

type Ifm struct {
	state                  protoimpl.MessageState      `protogen:"open.v1"`
	Interfaces             *Ifm_Interfaces             `protobuf:"bytes,5,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	AutoRecoveryTimes      *Ifm_AutoRecoveryTimes      `protobuf:"bytes,6,opt,name=autoRecoveryTimes,proto3" json:"autoRecoveryTimes,omitempty"`
	GlobalConfig           *Ifm_GlobalConfig           `protobuf:"bytes,7,opt,name=globalConfig,proto3" json:"globalConfig,omitempty"`
	HdlcDamp               *Ifm_HdlcDamp               `protobuf:"bytes,8,opt,name=hdlcDamp,proto3" json:"hdlcDamp,omitempty"`
	IfDamp                 *Ifm_IfDamp                 `protobuf:"bytes,9,opt,name=ifDamp,proto3" json:"ifDamp,omitempty"`
	InterfaceCounts        *Ifm_InterfaceCounts        `protobuf:"bytes,10,opt,name=interfaceCounts,proto3" json:"interfaceCounts,omitempty"`
	IpConflictConfig       *Ifm_IpConflictConfig       `protobuf:"bytes,11,opt,name=ipConflictConfig,proto3" json:"ipConflictConfig,omitempty"`
	IpInterfaceCountOper   *Ifm_IpInterfaceCountOper   `protobuf:"bytes,12,opt,name=ipInterfaceCountOper,proto3" json:"ipInterfaceCountOper,omitempty"`
	Ipv6InterfaceCountOper *Ifm_Ipv6InterfaceCountOper `protobuf:"bytes,13,opt,name=ipv6InterfaceCountOper,proto3" json:"ipv6InterfaceCountOper,omitempty"`
	PppDamp                *Ifm_PppDamp                `protobuf:"bytes,14,opt,name=pppDamp,proto3" json:"pppDamp,omitempty"`
	RemoteInterfaces       *Ifm_RemoteInterfaces       `protobuf:"bytes,15,opt,name=remoteInterfaces,proto3" json:"remoteInterfaces,omitempty"`
	StaticDimRanges        *Ifm_StaticDimRanges        `protobuf:"bytes,16,opt,name=staticDimRanges,proto3" json:"staticDimRanges,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Ifm) Reset() {
	*x = Ifm{}
	mi := &file_huawei_ifm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm) ProtoMessage() {}

func (x *Ifm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm.ProtoReflect.Descriptor instead.
func (*Ifm) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0}
}

func (x *Ifm) GetInterfaces() *Ifm_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Ifm) GetAutoRecoveryTimes() *Ifm_AutoRecoveryTimes {
	if x != nil {
		return x.AutoRecoveryTimes
	}
	return nil
}

func (x *Ifm) GetGlobalConfig() *Ifm_GlobalConfig {
	if x != nil {
		return x.GlobalConfig
	}
	return nil
}

func (x *Ifm) GetHdlcDamp() *Ifm_HdlcDamp {
	if x != nil {
		return x.HdlcDamp
	}
	return nil
}

func (x *Ifm) GetIfDamp() *Ifm_IfDamp {
	if x != nil {
		return x.IfDamp
	}
	return nil
}

func (x *Ifm) GetInterfaceCounts() *Ifm_InterfaceCounts {
	if x != nil {
		return x.InterfaceCounts
	}
	return nil
}

func (x *Ifm) GetIpConflictConfig() *Ifm_IpConflictConfig {
	if x != nil {
		return x.IpConflictConfig
	}
	return nil
}

func (x *Ifm) GetIpInterfaceCountOper() *Ifm_IpInterfaceCountOper {
	if x != nil {
		return x.IpInterfaceCountOper
	}
	return nil
}

func (x *Ifm) GetIpv6InterfaceCountOper() *Ifm_Ipv6InterfaceCountOper {
	if x != nil {
		return x.Ipv6InterfaceCountOper
	}
	return nil
}

func (x *Ifm) GetPppDamp() *Ifm_PppDamp {
	if x != nil {
		return x.PppDamp
	}
	return nil
}

func (x *Ifm) GetRemoteInterfaces() *Ifm_RemoteInterfaces {
	if x != nil {
		return x.RemoteInterfaces
	}
	return nil
}

func (x *Ifm) GetStaticDimRanges() *Ifm_StaticDimRanges {
	if x != nil {
		return x.StaticDimRanges
	}
	return nil
}

type HwErrordown struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cause         string                 `protobuf:"bytes,1,opt,name=Cause,proto3" json:"Cause,omitempty"`
	IfIndex       uint32                 `protobuf:"varint,2,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,3,opt,name=IfName,proto3" json:"IfName,omitempty"`
	RecoveryType  string                 `protobuf:"bytes,4,opt,name=RecoveryType,proto3" json:"RecoveryType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HwErrordown) Reset() {
	*x = HwErrordown{}
	mi := &file_huawei_ifm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwErrordown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwErrordown) ProtoMessage() {}

func (x *HwErrordown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwErrordown.ProtoReflect.Descriptor instead.
func (*HwErrordown) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{1}
}

func (x *HwErrordown) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *HwErrordown) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwErrordown) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *HwErrordown) GetRecoveryType() string {
	if x != nil {
		return x.RecoveryType
	}
	return ""
}

type HwErrordownRecovery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cause         string                 `protobuf:"bytes,1,opt,name=Cause,proto3" json:"Cause,omitempty"`
	IfIndex       uint32                 `protobuf:"varint,2,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,3,opt,name=IfName,proto3" json:"IfName,omitempty"`
	RecoveryType  string                 `protobuf:"bytes,4,opt,name=RecoveryType,proto3" json:"RecoveryType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HwErrordownRecovery) Reset() {
	*x = HwErrordownRecovery{}
	mi := &file_huawei_ifm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwErrordownRecovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwErrordownRecovery) ProtoMessage() {}

func (x *HwErrordownRecovery) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwErrordownRecovery.ProtoReflect.Descriptor instead.
func (*HwErrordownRecovery) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{2}
}

func (x *HwErrordownRecovery) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *HwErrordownRecovery) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwErrordownRecovery) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *HwErrordownRecovery) GetRecoveryType() string {
	if x != nil {
		return x.RecoveryType
	}
	return ""
}

type HwHdlcLoopbackDetResume struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InterfaceIndex int32                  `protobuf:"varint,1,opt,name=InterfaceIndex,proto3" json:"InterfaceIndex,omitempty"`
	InterfaceName  string                 `protobuf:"bytes,2,opt,name=InterfaceName,proto3" json:"InterfaceName,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HwHdlcLoopbackDetResume) Reset() {
	*x = HwHdlcLoopbackDetResume{}
	mi := &file_huawei_ifm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwHdlcLoopbackDetResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwHdlcLoopbackDetResume) ProtoMessage() {}

func (x *HwHdlcLoopbackDetResume) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwHdlcLoopbackDetResume.ProtoReflect.Descriptor instead.
func (*HwHdlcLoopbackDetResume) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{3}
}

func (x *HwHdlcLoopbackDetResume) GetInterfaceIndex() int32 {
	if x != nil {
		return x.InterfaceIndex
	}
	return 0
}

func (x *HwHdlcLoopbackDetResume) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type HwHdlcLoopbackDetect struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InterfaceIndex int32                  `protobuf:"varint,1,opt,name=InterfaceIndex,proto3" json:"InterfaceIndex,omitempty"`
	InterfaceName  string                 `protobuf:"bytes,2,opt,name=InterfaceName,proto3" json:"InterfaceName,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HwHdlcLoopbackDetect) Reset() {
	*x = HwHdlcLoopbackDetect{}
	mi := &file_huawei_ifm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwHdlcLoopbackDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwHdlcLoopbackDetect) ProtoMessage() {}

func (x *HwHdlcLoopbackDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwHdlcLoopbackDetect.ProtoReflect.Descriptor instead.
func (*HwHdlcLoopbackDetect) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{4}
}

func (x *HwHdlcLoopbackDetect) GetInterfaceIndex() int32 {
	if x != nil {
		return x.InterfaceIndex
	}
	return 0
}

func (x *HwHdlcLoopbackDetect) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type HwIfControlFlapResume struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InterfaceExtIndex uint32                 `protobuf:"varint,1,opt,name=InterfaceExtIndex,proto3" json:"InterfaceExtIndex,omitempty"`
	InterfaceIndex    uint32                 `protobuf:"varint,2,opt,name=InterfaceIndex,proto3" json:"InterfaceIndex,omitempty"`
	InterfaceName     string                 `protobuf:"bytes,3,opt,name=InterfaceName,proto3" json:"InterfaceName,omitempty"`
	SuppressState     uint32                 `protobuf:"varint,4,opt,name=SuppressState,proto3" json:"SuppressState,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HwIfControlFlapResume) Reset() {
	*x = HwIfControlFlapResume{}
	mi := &file_huawei_ifm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwIfControlFlapResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwIfControlFlapResume) ProtoMessage() {}

func (x *HwIfControlFlapResume) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwIfControlFlapResume.ProtoReflect.Descriptor instead.
func (*HwIfControlFlapResume) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{5}
}

func (x *HwIfControlFlapResume) GetInterfaceExtIndex() uint32 {
	if x != nil {
		return x.InterfaceExtIndex
	}
	return 0
}

func (x *HwIfControlFlapResume) GetInterfaceIndex() uint32 {
	if x != nil {
		return x.InterfaceIndex
	}
	return 0
}

func (x *HwIfControlFlapResume) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *HwIfControlFlapResume) GetSuppressState() uint32 {
	if x != nil {
		return x.SuppressState
	}
	return 0
}

type HwIfControlFlapSuppress struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InterfaceExtIndex uint32                 `protobuf:"varint,1,opt,name=InterfaceExtIndex,proto3" json:"InterfaceExtIndex,omitempty"`
	InterfaceIndex    uint32                 `protobuf:"varint,2,opt,name=InterfaceIndex,proto3" json:"InterfaceIndex,omitempty"`
	InterfaceName     string                 `protobuf:"bytes,3,opt,name=InterfaceName,proto3" json:"InterfaceName,omitempty"`
	SuppressState     uint32                 `protobuf:"varint,4,opt,name=SuppressState,proto3" json:"SuppressState,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HwIfControlFlapSuppress) Reset() {
	*x = HwIfControlFlapSuppress{}
	mi := &file_huawei_ifm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwIfControlFlapSuppress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwIfControlFlapSuppress) ProtoMessage() {}

func (x *HwIfControlFlapSuppress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwIfControlFlapSuppress.ProtoReflect.Descriptor instead.
func (*HwIfControlFlapSuppress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{6}
}

func (x *HwIfControlFlapSuppress) GetInterfaceExtIndex() uint32 {
	if x != nil {
		return x.InterfaceExtIndex
	}
	return 0
}

func (x *HwIfControlFlapSuppress) GetInterfaceIndex() uint32 {
	if x != nil {
		return x.InterfaceIndex
	}
	return 0
}

func (x *HwIfControlFlapSuppress) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *HwIfControlFlapSuppress) GetSuppressState() uint32 {
	if x != nil {
		return x.SuppressState
	}
	return 0
}

type HwLcpNegotiateFailed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IfIndex       uint32                 `protobuf:"varint,1,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,2,opt,name=ifName,proto3" json:"ifName,omitempty"`
	ReasonCode    string                 `protobuf:"bytes,3,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HwLcpNegotiateFailed) Reset() {
	*x = HwLcpNegotiateFailed{}
	mi := &file_huawei_ifm_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwLcpNegotiateFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwLcpNegotiateFailed) ProtoMessage() {}

func (x *HwLcpNegotiateFailed) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwLcpNegotiateFailed.ProtoReflect.Descriptor instead.
func (*HwLcpNegotiateFailed) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{7}
}

func (x *HwLcpNegotiateFailed) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwLcpNegotiateFailed) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *HwLcpNegotiateFailed) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type HwLcpNegotiateResumed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IfIndex       uint32                 `protobuf:"varint,1,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,2,opt,name=ifName,proto3" json:"ifName,omitempty"`
	ReasonCode    string                 `protobuf:"bytes,3,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HwLcpNegotiateResumed) Reset() {
	*x = HwLcpNegotiateResumed{}
	mi := &file_huawei_ifm_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwLcpNegotiateResumed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwLcpNegotiateResumed) ProtoMessage() {}

func (x *HwLcpNegotiateResumed) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwLcpNegotiateResumed.ProtoReflect.Descriptor instead.
func (*HwLcpNegotiateResumed) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{8}
}

func (x *HwLcpNegotiateResumed) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwLcpNegotiateResumed) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *HwLcpNegotiateResumed) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type HwMpDown struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IfIndex       uint32                 `protobuf:"varint,1,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,2,opt,name=IfName,proto3" json:"IfName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HwMpDown) Reset() {
	*x = HwMpDown{}
	mi := &file_huawei_ifm_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwMpDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwMpDown) ProtoMessage() {}

func (x *HwMpDown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwMpDown.ProtoReflect.Descriptor instead.
func (*HwMpDown) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{9}
}

func (x *HwMpDown) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwMpDown) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type HwMpSonChannelDampingDetect struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MpIfIndex       uint32                 `protobuf:"varint,1,opt,name=MpIfIndex,proto3" json:"MpIfIndex,omitempty"`
	MpIfName        string                 `protobuf:"bytes,2,opt,name=MpIfName,proto3" json:"MpIfName,omitempty"`
	MpMemberIfIndex uint32                 `protobuf:"varint,3,opt,name=MpMemberIfIndex,proto3" json:"MpMemberIfIndex,omitempty"`
	MpMemberIfName  string                 `protobuf:"bytes,4,opt,name=MpMemberIfName,proto3" json:"MpMemberIfName,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HwMpSonChannelDampingDetect) Reset() {
	*x = HwMpSonChannelDampingDetect{}
	mi := &file_huawei_ifm_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwMpSonChannelDampingDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwMpSonChannelDampingDetect) ProtoMessage() {}

func (x *HwMpSonChannelDampingDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwMpSonChannelDampingDetect.ProtoReflect.Descriptor instead.
func (*HwMpSonChannelDampingDetect) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{10}
}

func (x *HwMpSonChannelDampingDetect) GetMpIfIndex() uint32 {
	if x != nil {
		return x.MpIfIndex
	}
	return 0
}

func (x *HwMpSonChannelDampingDetect) GetMpIfName() string {
	if x != nil {
		return x.MpIfName
	}
	return ""
}

func (x *HwMpSonChannelDampingDetect) GetMpMemberIfIndex() uint32 {
	if x != nil {
		return x.MpMemberIfIndex
	}
	return 0
}

func (x *HwMpSonChannelDampingDetect) GetMpMemberIfName() string {
	if x != nil {
		return x.MpMemberIfName
	}
	return ""
}

type HwMpSonChannelDampingResume struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MpIfIndex       uint32                 `protobuf:"varint,1,opt,name=MpIfIndex,proto3" json:"MpIfIndex,omitempty"`
	MpIfName        string                 `protobuf:"bytes,2,opt,name=MpIfName,proto3" json:"MpIfName,omitempty"`
	MpMemberIfIndex uint32                 `protobuf:"varint,3,opt,name=MpMemberIfIndex,proto3" json:"MpMemberIfIndex,omitempty"`
	MpMemberIfName  string                 `protobuf:"bytes,4,opt,name=MpMemberIfName,proto3" json:"MpMemberIfName,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HwMpSonChannelDampingResume) Reset() {
	*x = HwMpSonChannelDampingResume{}
	mi := &file_huawei_ifm_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwMpSonChannelDampingResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwMpSonChannelDampingResume) ProtoMessage() {}

func (x *HwMpSonChannelDampingResume) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwMpSonChannelDampingResume.ProtoReflect.Descriptor instead.
func (*HwMpSonChannelDampingResume) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{11}
}

func (x *HwMpSonChannelDampingResume) GetMpIfIndex() uint32 {
	if x != nil {
		return x.MpIfIndex
	}
	return 0
}

func (x *HwMpSonChannelDampingResume) GetMpIfName() string {
	if x != nil {
		return x.MpIfName
	}
	return ""
}

func (x *HwMpSonChannelDampingResume) GetMpMemberIfIndex() uint32 {
	if x != nil {
		return x.MpMemberIfIndex
	}
	return 0
}

func (x *HwMpSonChannelDampingResume) GetMpMemberIfName() string {
	if x != nil {
		return x.MpMemberIfName
	}
	return ""
}

type HwMpUp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IfIndex       uint32                 `protobuf:"varint,1,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,2,opt,name=IfName,proto3" json:"IfName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HwMpUp) Reset() {
	*x = HwMpUp{}
	mi := &file_huawei_ifm_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwMpUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwMpUp) ProtoMessage() {}

func (x *HwMpUp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwMpUp.ProtoReflect.Descriptor instead.
func (*HwMpUp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{12}
}

func (x *HwMpUp) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwMpUp) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type HwNcpNegotiateFailed struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	HwPppNcpName               string                 `protobuf:"bytes,1,opt,name=hwPppNcpName,proto3" json:"hwPppNcpName,omitempty"`
	HwPppNegotiationFailReason string                 `protobuf:"bytes,2,opt,name=hwPppNegotiationFailReason,proto3" json:"hwPppNegotiationFailReason,omitempty"`
	IfIndex                    uint32                 `protobuf:"varint,3,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName                     string                 `protobuf:"bytes,4,opt,name=ifName,proto3" json:"ifName,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *HwNcpNegotiateFailed) Reset() {
	*x = HwNcpNegotiateFailed{}
	mi := &file_huawei_ifm_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwNcpNegotiateFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwNcpNegotiateFailed) ProtoMessage() {}

func (x *HwNcpNegotiateFailed) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwNcpNegotiateFailed.ProtoReflect.Descriptor instead.
func (*HwNcpNegotiateFailed) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{13}
}

func (x *HwNcpNegotiateFailed) GetHwPppNcpName() string {
	if x != nil {
		return x.HwPppNcpName
	}
	return ""
}

func (x *HwNcpNegotiateFailed) GetHwPppNegotiationFailReason() string {
	if x != nil {
		return x.HwPppNegotiationFailReason
	}
	return ""
}

func (x *HwNcpNegotiateFailed) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwNcpNegotiateFailed) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type HwNcpNegotiateResumed struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	HwPppNcpName               string                 `protobuf:"bytes,1,opt,name=hwPppNcpName,proto3" json:"hwPppNcpName,omitempty"`
	HwPppNegotiationFailReason string                 `protobuf:"bytes,2,opt,name=hwPppNegotiationFailReason,proto3" json:"hwPppNegotiationFailReason,omitempty"`
	IfIndex                    uint32                 `protobuf:"varint,3,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName                     string                 `protobuf:"bytes,4,opt,name=ifName,proto3" json:"ifName,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *HwNcpNegotiateResumed) Reset() {
	*x = HwNcpNegotiateResumed{}
	mi := &file_huawei_ifm_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwNcpNegotiateResumed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwNcpNegotiateResumed) ProtoMessage() {}

func (x *HwNcpNegotiateResumed) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwNcpNegotiateResumed.ProtoReflect.Descriptor instead.
func (*HwNcpNegotiateResumed) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{14}
}

func (x *HwNcpNegotiateResumed) GetHwPppNcpName() string {
	if x != nil {
		return x.HwPppNcpName
	}
	return ""
}

func (x *HwNcpNegotiateResumed) GetHwPppNegotiationFailReason() string {
	if x != nil {
		return x.HwPppNegotiationFailReason
	}
	return ""
}

func (x *HwNcpNegotiateResumed) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwNcpNegotiateResumed) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type HwPhysicalAdminIfDown struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IfIndex       uint32                 `protobuf:"varint,1,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,2,opt,name=ifName,proto3" json:"ifName,omitempty"`
	IfOperStatus  string                 `protobuf:"bytes,3,opt,name=ifOperStatus,proto3" json:"ifOperStatus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HwPhysicalAdminIfDown) Reset() {
	*x = HwPhysicalAdminIfDown{}
	mi := &file_huawei_ifm_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwPhysicalAdminIfDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwPhysicalAdminIfDown) ProtoMessage() {}

func (x *HwPhysicalAdminIfDown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwPhysicalAdminIfDown.ProtoReflect.Descriptor instead.
func (*HwPhysicalAdminIfDown) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{15}
}

func (x *HwPhysicalAdminIfDown) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwPhysicalAdminIfDown) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *HwPhysicalAdminIfDown) GetIfOperStatus() string {
	if x != nil {
		return x.IfOperStatus
	}
	return ""
}

type HwPhysicalAdminIfUp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IfIndex       uint32                 `protobuf:"varint,1,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,2,opt,name=ifName,proto3" json:"ifName,omitempty"`
	IfOperStatus  string                 `protobuf:"bytes,3,opt,name=ifOperStatus,proto3" json:"ifOperStatus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HwPhysicalAdminIfUp) Reset() {
	*x = HwPhysicalAdminIfUp{}
	mi := &file_huawei_ifm_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwPhysicalAdminIfUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwPhysicalAdminIfUp) ProtoMessage() {}

func (x *HwPhysicalAdminIfUp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwPhysicalAdminIfUp.ProtoReflect.Descriptor instead.
func (*HwPhysicalAdminIfUp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{16}
}

func (x *HwPhysicalAdminIfUp) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwPhysicalAdminIfUp) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *HwPhysicalAdminIfUp) GetIfOperStatus() string {
	if x != nil {
		return x.IfOperStatus
	}
	return ""
}

type HwPppLoopbackDetResume struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	HwBaseTrapEventType     uint32                 `protobuf:"varint,1,opt,name=HwBaseTrapEventType,proto3" json:"HwBaseTrapEventType,omitempty"`
	HwBaseTrapProbableCause uint32                 `protobuf:"varint,2,opt,name=HwBaseTrapProbableCause,proto3" json:"HwBaseTrapProbableCause,omitempty"`
	HwBaseTrapSeverity      uint32                 `protobuf:"varint,3,opt,name=HwBaseTrapSeverity,proto3" json:"HwBaseTrapSeverity,omitempty"`
	IfIndex                 uint32                 `protobuf:"varint,4,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	IfName                  string                 `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *HwPppLoopbackDetResume) Reset() {
	*x = HwPppLoopbackDetResume{}
	mi := &file_huawei_ifm_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwPppLoopbackDetResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwPppLoopbackDetResume) ProtoMessage() {}

func (x *HwPppLoopbackDetResume) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwPppLoopbackDetResume.ProtoReflect.Descriptor instead.
func (*HwPppLoopbackDetResume) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{17}
}

func (x *HwPppLoopbackDetResume) GetHwBaseTrapEventType() uint32 {
	if x != nil {
		return x.HwBaseTrapEventType
	}
	return 0
}

func (x *HwPppLoopbackDetResume) GetHwBaseTrapProbableCause() uint32 {
	if x != nil {
		return x.HwBaseTrapProbableCause
	}
	return 0
}

func (x *HwPppLoopbackDetResume) GetHwBaseTrapSeverity() uint32 {
	if x != nil {
		return x.HwBaseTrapSeverity
	}
	return 0
}

func (x *HwPppLoopbackDetResume) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwPppLoopbackDetResume) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type HwPppLoopbackDetect struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	HwBaseTrapEventType     uint32                 `protobuf:"varint,1,opt,name=HwBaseTrapEventType,proto3" json:"HwBaseTrapEventType,omitempty"`
	HwBaseTrapProbableCause uint32                 `protobuf:"varint,2,opt,name=HwBaseTrapProbableCause,proto3" json:"HwBaseTrapProbableCause,omitempty"`
	HwBaseTrapSeverity      uint32                 `protobuf:"varint,3,opt,name=HwBaseTrapSeverity,proto3" json:"HwBaseTrapSeverity,omitempty"`
	IfIndex                 uint32                 `protobuf:"varint,4,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	IfName                  string                 `protobuf:"bytes,5,opt,name=IfName,proto3" json:"IfName,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *HwPppLoopbackDetect) Reset() {
	*x = HwPppLoopbackDetect{}
	mi := &file_huawei_ifm_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HwPppLoopbackDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwPppLoopbackDetect) ProtoMessage() {}

func (x *HwPppLoopbackDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwPppLoopbackDetect.ProtoReflect.Descriptor instead.
func (*HwPppLoopbackDetect) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{18}
}

func (x *HwPppLoopbackDetect) GetHwBaseTrapEventType() uint32 {
	if x != nil {
		return x.HwBaseTrapEventType
	}
	return 0
}

func (x *HwPppLoopbackDetect) GetHwBaseTrapProbableCause() uint32 {
	if x != nil {
		return x.HwBaseTrapProbableCause
	}
	return 0
}

func (x *HwPppLoopbackDetect) GetHwBaseTrapSeverity() uint32 {
	if x != nil {
		return x.HwBaseTrapSeverity
	}
	return 0
}

func (x *HwPppLoopbackDetect) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *HwPppLoopbackDetect) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type Hwifflowdown struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	HwIFExtFlowStatus uint32                 `protobuf:"varint,1,opt,name=hwIFExtFlowStatus,proto3" json:"hwIFExtFlowStatus,omitempty"`
	HwIFExtIndex      uint32                 `protobuf:"varint,2,opt,name=hwIFExtIndex,proto3" json:"hwIFExtIndex,omitempty"`
	IfIndex           uint32                 `protobuf:"varint,3,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName            string                 `protobuf:"bytes,4,opt,name=ifName,proto3" json:"ifName,omitempty"`
	SysUpTime         uint32                 `protobuf:"varint,5,opt,name=sysUpTime,proto3" json:"sysUpTime,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Hwifflowdown) Reset() {
	*x = Hwifflowdown{}
	mi := &file_huawei_ifm_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hwifflowdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hwifflowdown) ProtoMessage() {}

func (x *Hwifflowdown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hwifflowdown.ProtoReflect.Descriptor instead.
func (*Hwifflowdown) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{19}
}

func (x *Hwifflowdown) GetHwIFExtFlowStatus() uint32 {
	if x != nil {
		return x.HwIFExtFlowStatus
	}
	return 0
}

func (x *Hwifflowdown) GetHwIFExtIndex() uint32 {
	if x != nil {
		return x.HwIFExtIndex
	}
	return 0
}

func (x *Hwifflowdown) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Hwifflowdown) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Hwifflowdown) GetSysUpTime() uint32 {
	if x != nil {
		return x.SysUpTime
	}
	return 0
}

type Hwifflowup struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	HwIFExtFlowStatus uint32                 `protobuf:"varint,1,opt,name=hwIFExtFlowStatus,proto3" json:"hwIFExtFlowStatus,omitempty"`
	HwIFExtIndex      uint32                 `protobuf:"varint,2,opt,name=hwIFExtIndex,proto3" json:"hwIFExtIndex,omitempty"`
	IfIndex           uint32                 `protobuf:"varint,3,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName            string                 `protobuf:"bytes,4,opt,name=ifName,proto3" json:"ifName,omitempty"`
	SysUpTime         uint32                 `protobuf:"varint,5,opt,name=sysUpTime,proto3" json:"sysUpTime,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Hwifflowup) Reset() {
	*x = Hwifflowup{}
	mi := &file_huawei_ifm_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hwifflowup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hwifflowup) ProtoMessage() {}

func (x *Hwifflowup) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hwifflowup.ProtoReflect.Descriptor instead.
func (*Hwifflowup) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{20}
}

func (x *Hwifflowup) GetHwIFExtFlowStatus() uint32 {
	if x != nil {
		return x.HwIFExtFlowStatus
	}
	return 0
}

func (x *Hwifflowup) GetHwIFExtIndex() uint32 {
	if x != nil {
		return x.HwIFExtIndex
	}
	return 0
}

func (x *Hwifflowup) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Hwifflowup) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Hwifflowup) GetSysUpTime() uint32 {
	if x != nil {
		return x.SysUpTime
	}
	return 0
}

type Ipv6IfStateChange struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Reason            []byte                 `protobuf:"bytes,1,opt,name=Reason,proto3" json:"Reason,omitempty"`
	ReasonCode        uint32                 `protobuf:"varint,2,opt,name=ReasonCode,proto3" json:"ReasonCode,omitempty"`
	Ipv6IfAdminStatus string                 `protobuf:"bytes,3,opt,name=ipv6IfAdminStatus,proto3" json:"ipv6IfAdminStatus,omitempty"`
	Ipv6IfDescr       string                 `protobuf:"bytes,4,opt,name=ipv6IfDescr,proto3" json:"ipv6IfDescr,omitempty"`
	Ipv6IfIndex       uint32                 `protobuf:"varint,5,opt,name=ipv6IfIndex,proto3" json:"ipv6IfIndex,omitempty"`
	Ipv6IfOperStatus  string                 `protobuf:"bytes,6,opt,name=ipv6IfOperStatus,proto3" json:"ipv6IfOperStatus,omitempty"`
	Ipv6MainIf        string                 `protobuf:"bytes,7,opt,name=ipv6MainIf,proto3" json:"ipv6MainIf,omitempty"`
	RootIndex         uint32                 `protobuf:"varint,8,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Ipv6IfStateChange) Reset() {
	*x = Ipv6IfStateChange{}
	mi := &file_huawei_ifm_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ipv6IfStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6IfStateChange) ProtoMessage() {}

func (x *Ipv6IfStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6IfStateChange.ProtoReflect.Descriptor instead.
func (*Ipv6IfStateChange) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{21}
}

func (x *Ipv6IfStateChange) GetReason() []byte {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Ipv6IfStateChange) GetReasonCode() uint32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *Ipv6IfStateChange) GetIpv6IfAdminStatus() string {
	if x != nil {
		return x.Ipv6IfAdminStatus
	}
	return ""
}

func (x *Ipv6IfStateChange) GetIpv6IfDescr() string {
	if x != nil {
		return x.Ipv6IfDescr
	}
	return ""
}

func (x *Ipv6IfStateChange) GetIpv6IfIndex() uint32 {
	if x != nil {
		return x.Ipv6IfIndex
	}
	return 0
}

func (x *Ipv6IfStateChange) GetIpv6IfOperStatus() string {
	if x != nil {
		return x.Ipv6IfOperStatus
	}
	return ""
}

func (x *Ipv6IfStateChange) GetIpv6MainIf() string {
	if x != nil {
		return x.Ipv6MainIf
	}
	return ""
}

func (x *Ipv6IfStateChange) GetRootIndex() uint32 {
	if x != nil {
		return x.RootIndex
	}
	return 0
}

type Linkdown struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PhysicalIndex uint32                 `protobuf:"varint,1,opt,name=PhysicalIndex,proto3" json:"PhysicalIndex,omitempty"`
	Reason        []byte                 `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	IfAdminStatus string                 `protobuf:"bytes,3,opt,name=ifAdminStatus,proto3" json:"ifAdminStatus,omitempty"`
	IfIndex       uint32                 `protobuf:"varint,4,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,5,opt,name=ifName,proto3" json:"ifName,omitempty"`
	IfOperStatus  string                 `protobuf:"bytes,6,opt,name=ifOperStatus,proto3" json:"ifOperStatus,omitempty"`
	MainIf        string                 `protobuf:"bytes,7,opt,name=mainIf,proto3" json:"mainIf,omitempty"`
	ReasonCode    uint32                 `protobuf:"varint,8,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	RootIndex     uint32                 `protobuf:"varint,9,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Linkdown) Reset() {
	*x = Linkdown{}
	mi := &file_huawei_ifm_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Linkdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Linkdown) ProtoMessage() {}

func (x *Linkdown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Linkdown.ProtoReflect.Descriptor instead.
func (*Linkdown) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{22}
}

func (x *Linkdown) GetPhysicalIndex() uint32 {
	if x != nil {
		return x.PhysicalIndex
	}
	return 0
}

func (x *Linkdown) GetReason() []byte {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Linkdown) GetIfAdminStatus() string {
	if x != nil {
		return x.IfAdminStatus
	}
	return ""
}

func (x *Linkdown) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Linkdown) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Linkdown) GetIfOperStatus() string {
	if x != nil {
		return x.IfOperStatus
	}
	return ""
}

func (x *Linkdown) GetMainIf() string {
	if x != nil {
		return x.MainIf
	}
	return ""
}

func (x *Linkdown) GetReasonCode() uint32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *Linkdown) GetRootIndex() uint32 {
	if x != nil {
		return x.RootIndex
	}
	return 0
}

type Linkup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PhysicalIndex uint32                 `protobuf:"varint,1,opt,name=PhysicalIndex,proto3" json:"PhysicalIndex,omitempty"`
	Reason        []byte                 `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	IfAdminStatus string                 `protobuf:"bytes,3,opt,name=ifAdminStatus,proto3" json:"ifAdminStatus,omitempty"`
	IfIndex       uint32                 `protobuf:"varint,4,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName        string                 `protobuf:"bytes,5,opt,name=ifName,proto3" json:"ifName,omitempty"`
	IfOperStatus  string                 `protobuf:"bytes,6,opt,name=ifOperStatus,proto3" json:"ifOperStatus,omitempty"`
	MainIf        string                 `protobuf:"bytes,7,opt,name=mainIf,proto3" json:"mainIf,omitempty"`
	ReasonCode    uint32                 `protobuf:"varint,8,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	RootIndex     uint32                 `protobuf:"varint,9,opt,name=rootIndex,proto3" json:"rootIndex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Linkup) Reset() {
	*x = Linkup{}
	mi := &file_huawei_ifm_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Linkup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Linkup) ProtoMessage() {}

func (x *Linkup) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Linkup.ProtoReflect.Descriptor instead.
func (*Linkup) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{23}
}

func (x *Linkup) GetPhysicalIndex() uint32 {
	if x != nil {
		return x.PhysicalIndex
	}
	return 0
}

func (x *Linkup) GetReason() []byte {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Linkup) GetIfAdminStatus() string {
	if x != nil {
		return x.IfAdminStatus
	}
	return ""
}

func (x *Linkup) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Linkup) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Linkup) GetIfOperStatus() string {
	if x != nil {
		return x.IfOperStatus
	}
	return ""
}

func (x *Linkup) GetMainIf() string {
	if x != nil {
		return x.MainIf
	}
	return ""
}

func (x *Linkup) GetReasonCode() uint32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *Linkup) GetRootIndex() uint32 {
	if x != nil {
		return x.RootIndex
	}
	return 0
}

type Ifm_Interfaces struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Interface     []*Ifm_Interfaces_Interface `protobuf:"bytes,1,rep,name=interface,proto3" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces) Reset() {
	*x = Ifm_Interfaces{}
	mi := &file_huawei_ifm_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces) ProtoMessage() {}

func (x *Ifm_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ifm_Interfaces) GetInterface() []*Ifm_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Ifm_AutoRecoveryTimes struct {
	state            protoimpl.MessageState                    `protogen:"open.v1"`
	AutoRecoveryTime []*Ifm_AutoRecoveryTimes_AutoRecoveryTime `protobuf:"bytes,1,rep,name=autoRecoveryTime,proto3" json:"autoRecoveryTime,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Ifm_AutoRecoveryTimes) Reset() {
	*x = Ifm_AutoRecoveryTimes{}
	mi := &file_huawei_ifm_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_AutoRecoveryTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_AutoRecoveryTimes) ProtoMessage() {}

func (x *Ifm_AutoRecoveryTimes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_AutoRecoveryTimes.ProtoReflect.Descriptor instead.
func (*Ifm_AutoRecoveryTimes) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ifm_AutoRecoveryTimes) GetAutoRecoveryTime() []*Ifm_AutoRecoveryTimes_AutoRecoveryTime {
	if x != nil {
		return x.AutoRecoveryTime
	}
	return nil
}

type Ifm_GlobalConfig struct {
	state                   protoimpl.MessageState                `protogen:"open.v1"`
	DualStat                *Ifm_GlobalConfig_DualStat            `protobuf:"bytes,1,opt,name=dualStat,proto3" json:"dualStat,omitempty"`
	GlobalStatItvl          uint32                                `protobuf:"varint,2,opt,name=globalStatItvl,proto3" json:"globalStatItvl,omitempty"`
	Ipv4IgnorePrimarySub    Ifm_GlobalConfig_Ipv4IgnorePrimarySub `protobuf:"varint,3,opt,name=ipv4IgnorePrimarySub,proto3,enum=huawei_ifm.Ifm_GlobalConfig_Ipv4IgnorePrimarySub" json:"ipv4IgnorePrimarySub,omitempty"`
	SubIfLinkDownTrapEnable bool                                  `protobuf:"varint,4,opt,name=subIfLinkDownTrapEnable,proto3" json:"subIfLinkDownTrapEnable,omitempty"`
	SysAttriControlMtu      Ifm_GlobalConfig_SysAttriControlMtu   `protobuf:"varint,5,opt,name=sysAttriControlMtu,proto3,enum=huawei_ifm.Ifm_GlobalConfig_SysAttriControlMtu" json:"sysAttriControlMtu,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Ifm_GlobalConfig) Reset() {
	*x = Ifm_GlobalConfig{}
	mi := &file_huawei_ifm_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_GlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_GlobalConfig) ProtoMessage() {}

func (x *Ifm_GlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_GlobalConfig.ProtoReflect.Descriptor instead.
func (*Ifm_GlobalConfig) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Ifm_GlobalConfig) GetDualStat() *Ifm_GlobalConfig_DualStat {
	if x != nil {
		return x.DualStat
	}
	return nil
}

func (x *Ifm_GlobalConfig) GetGlobalStatItvl() uint32 {
	if x != nil {
		return x.GlobalStatItvl
	}
	return 0
}

func (x *Ifm_GlobalConfig) GetIpv4IgnorePrimarySub() Ifm_GlobalConfig_Ipv4IgnorePrimarySub {
	if x != nil {
		return x.Ipv4IgnorePrimarySub
	}
	return Ifm_GlobalConfig_Ipv4IgnorePrimarySub_DISABLE
}

func (x *Ifm_GlobalConfig) GetSubIfLinkDownTrapEnable() bool {
	if x != nil {
		return x.SubIfLinkDownTrapEnable
	}
	return false
}

func (x *Ifm_GlobalConfig) GetSysAttriControlMtu() Ifm_GlobalConfig_SysAttriControlMtu {
	if x != nil {
		return x.SysAttriControlMtu
	}
	return Ifm_GlobalConfig_SysAttriControlMtu_X_1450
}

type Ifm_HdlcDamp struct {
	state               protoimpl.MessageState     `protogen:"open.v1"`
	HdlcDampEnable      bool                       `protobuf:"varint,1,opt,name=hdlcDampEnable,proto3" json:"hdlcDampEnable,omitempty"`
	HdlcDampLevel       Ifm_HdlcDamp_HdlcDampLevel `protobuf:"varint,2,opt,name=hdlcDampLevel,proto3,enum=huawei_ifm.Ifm_HdlcDamp_HdlcDampLevel" json:"hdlcDampLevel,omitempty"`
	HdlcHalfLifePeriod  uint32                     `protobuf:"varint,3,opt,name=hdlcHalfLifePeriod,proto3" json:"hdlcHalfLifePeriod,omitempty"`
	HdlcMaxSuppressTime uint32                     `protobuf:"varint,4,opt,name=hdlcMaxSuppressTime,proto3" json:"hdlcMaxSuppressTime,omitempty"`
	HdlcReuse           uint32                     `protobuf:"varint,5,opt,name=hdlcReuse,proto3" json:"hdlcReuse,omitempty"`
	HdlcSuppress        uint32                     `protobuf:"varint,6,opt,name=hdlcSuppress,proto3" json:"hdlcSuppress,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ifm_HdlcDamp) Reset() {
	*x = Ifm_HdlcDamp{}
	mi := &file_huawei_ifm_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_HdlcDamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_HdlcDamp) ProtoMessage() {}

func (x *Ifm_HdlcDamp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_HdlcDamp.ProtoReflect.Descriptor instead.
func (*Ifm_HdlcDamp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Ifm_HdlcDamp) GetHdlcDampEnable() bool {
	if x != nil {
		return x.HdlcDampEnable
	}
	return false
}

func (x *Ifm_HdlcDamp) GetHdlcDampLevel() Ifm_HdlcDamp_HdlcDampLevel {
	if x != nil {
		return x.HdlcDampLevel
	}
	return Ifm_HdlcDamp_HdlcDampLevel_HEAVY
}

func (x *Ifm_HdlcDamp) GetHdlcHalfLifePeriod() uint32 {
	if x != nil {
		return x.HdlcHalfLifePeriod
	}
	return 0
}

func (x *Ifm_HdlcDamp) GetHdlcMaxSuppressTime() uint32 {
	if x != nil {
		return x.HdlcMaxSuppressTime
	}
	return 0
}

func (x *Ifm_HdlcDamp) GetHdlcReuse() uint32 {
	if x != nil {
		return x.HdlcReuse
	}
	return 0
}

func (x *Ifm_HdlcDamp) GetHdlcSuppress() uint32 {
	if x != nil {
		return x.HdlcSuppress
	}
	return 0
}

type Ifm_IfDamp struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	IfDampEnable      bool                   `protobuf:"varint,1,opt,name=ifDampEnable,proto3" json:"ifDampEnable,omitempty"`
	IfDampLevel       Ifm_IfDamp_IfDampLevel `protobuf:"varint,2,opt,name=ifDampLevel,proto3,enum=huawei_ifm.Ifm_IfDamp_IfDampLevel" json:"ifDampLevel,omitempty"`
	IfDampTxOff       bool                   `protobuf:"varint,3,opt,name=ifDampTxOff,proto3" json:"ifDampTxOff,omitempty"`
	IfHalfLifePeriod  uint32                 `protobuf:"varint,4,opt,name=ifHalfLifePeriod,proto3" json:"ifHalfLifePeriod,omitempty"`
	IfMaxSuppressTime uint32                 `protobuf:"varint,5,opt,name=ifMaxSuppressTime,proto3" json:"ifMaxSuppressTime,omitempty"`
	IfReuse           uint32                 `protobuf:"varint,6,opt,name=ifReuse,proto3" json:"ifReuse,omitempty"`
	IfSuppress        uint32                 `protobuf:"varint,7,opt,name=ifSuppress,proto3" json:"ifSuppress,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Ifm_IfDamp) Reset() {
	*x = Ifm_IfDamp{}
	mi := &file_huawei_ifm_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_IfDamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_IfDamp) ProtoMessage() {}

func (x *Ifm_IfDamp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_IfDamp.ProtoReflect.Descriptor instead.
func (*Ifm_IfDamp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Ifm_IfDamp) GetIfDampEnable() bool {
	if x != nil {
		return x.IfDampEnable
	}
	return false
}

func (x *Ifm_IfDamp) GetIfDampLevel() Ifm_IfDamp_IfDampLevel {
	if x != nil {
		return x.IfDampLevel
	}
	return Ifm_IfDamp_IfDampLevel_HEAVY
}

func (x *Ifm_IfDamp) GetIfDampTxOff() bool {
	if x != nil {
		return x.IfDampTxOff
	}
	return false
}

func (x *Ifm_IfDamp) GetIfHalfLifePeriod() uint32 {
	if x != nil {
		return x.IfHalfLifePeriod
	}
	return 0
}

func (x *Ifm_IfDamp) GetIfMaxSuppressTime() uint32 {
	if x != nil {
		return x.IfMaxSuppressTime
	}
	return 0
}

func (x *Ifm_IfDamp) GetIfReuse() uint32 {
	if x != nil {
		return x.IfReuse
	}
	return 0
}

func (x *Ifm_IfDamp) GetIfSuppress() uint32 {
	if x != nil {
		return x.IfSuppress
	}
	return 0
}

type Ifm_InterfaceCounts struct {
	state          protoimpl.MessageState                `protogen:"open.v1"`
	InterfaceCount []*Ifm_InterfaceCounts_InterfaceCount `protobuf:"bytes,1,rep,name=interfaceCount,proto3" json:"interfaceCount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_InterfaceCounts) Reset() {
	*x = Ifm_InterfaceCounts{}
	mi := &file_huawei_ifm_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_InterfaceCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_InterfaceCounts) ProtoMessage() {}

func (x *Ifm_InterfaceCounts) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_InterfaceCounts.ProtoReflect.Descriptor instead.
func (*Ifm_InterfaceCounts) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Ifm_InterfaceCounts) GetInterfaceCount() []*Ifm_InterfaceCounts_InterfaceCount {
	if x != nil {
		return x.InterfaceCount
	}
	return nil
}

type Ifm_IpConflictConfig struct {
	state               protoimpl.MessageState                   `protogen:"open.v1"`
	IpConflictCheck     Ifm_IpConflictConfig_IpConflictCheck     `protobuf:"varint,1,opt,name=ipConflictCheck,proto3,enum=huawei_ifm.Ifm_IpConflictConfig_IpConflictCheck" json:"ipConflictCheck,omitempty"`
	IpConflictPreempt   Ifm_IpConflictConfig_IpConflictPreempt   `protobuf:"varint,2,opt,name=ipConflictPreempt,proto3,enum=huawei_ifm.Ifm_IpConflictConfig_IpConflictPreempt" json:"ipConflictPreempt,omitempty"`
	Ipv6ConflictCheck   Ifm_IpConflictConfig_Ipv6ConflictCheck   `protobuf:"varint,3,opt,name=ipv6ConflictCheck,proto3,enum=huawei_ifm.Ifm_IpConflictConfig_Ipv6ConflictCheck" json:"ipv6ConflictCheck,omitempty"`
	Ipv6ConflictPreempt Ifm_IpConflictConfig_Ipv6ConflictPreempt `protobuf:"varint,4,opt,name=ipv6ConflictPreempt,proto3,enum=huawei_ifm.Ifm_IpConflictConfig_Ipv6ConflictPreempt" json:"ipv6ConflictPreempt,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ifm_IpConflictConfig) Reset() {
	*x = Ifm_IpConflictConfig{}
	mi := &file_huawei_ifm_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_IpConflictConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_IpConflictConfig) ProtoMessage() {}

func (x *Ifm_IpConflictConfig) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_IpConflictConfig.ProtoReflect.Descriptor instead.
func (*Ifm_IpConflictConfig) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Ifm_IpConflictConfig) GetIpConflictCheck() Ifm_IpConflictConfig_IpConflictCheck {
	if x != nil {
		return x.IpConflictCheck
	}
	return Ifm_IpConflictConfig_IpConflictCheck_DISABLE
}

func (x *Ifm_IpConflictConfig) GetIpConflictPreempt() Ifm_IpConflictConfig_IpConflictPreempt {
	if x != nil {
		return x.IpConflictPreempt
	}
	return Ifm_IpConflictConfig_IpConflictPreempt_DISABLE
}

func (x *Ifm_IpConflictConfig) GetIpv6ConflictCheck() Ifm_IpConflictConfig_Ipv6ConflictCheck {
	if x != nil {
		return x.Ipv6ConflictCheck
	}
	return Ifm_IpConflictConfig_Ipv6ConflictCheck_DISABLE
}

func (x *Ifm_IpConflictConfig) GetIpv6ConflictPreempt() Ifm_IpConflictConfig_Ipv6ConflictPreempt {
	if x != nil {
		return x.Ipv6ConflictPreempt
	}
	return Ifm_IpConflictConfig_Ipv6ConflictPreempt_DISABLE
}

type Ifm_IpInterfaceCountOper struct {
	state             protoimpl.MessageState                      `protogen:"open.v1"`
	IfPhyDownCount    uint32                                      `protobuf:"varint,1,opt,name=ifPhyDownCount,proto3" json:"ifPhyDownCount,omitempty"`
	IfPhyUpCount      uint32                                      `protobuf:"varint,2,opt,name=ifPhyUpCount,proto3" json:"ifPhyUpCount,omitempty"`
	IfV4DownCount     uint32                                      `protobuf:"varint,3,opt,name=ifV4DownCount,proto3" json:"ifV4DownCount,omitempty"`
	IfV4UpCount       uint32                                      `protobuf:"varint,4,opt,name=ifV4UpCount,proto3" json:"ifV4UpCount,omitempty"`
	IpInterfaceCounts *Ifm_IpInterfaceCountOper_IpInterfaceCounts `protobuf:"bytes,5,opt,name=ipInterfaceCounts,proto3" json:"ipInterfaceCounts,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Ifm_IpInterfaceCountOper) Reset() {
	*x = Ifm_IpInterfaceCountOper{}
	mi := &file_huawei_ifm_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_IpInterfaceCountOper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_IpInterfaceCountOper) ProtoMessage() {}

func (x *Ifm_IpInterfaceCountOper) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_IpInterfaceCountOper.ProtoReflect.Descriptor instead.
func (*Ifm_IpInterfaceCountOper) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Ifm_IpInterfaceCountOper) GetIfPhyDownCount() uint32 {
	if x != nil {
		return x.IfPhyDownCount
	}
	return 0
}

func (x *Ifm_IpInterfaceCountOper) GetIfPhyUpCount() uint32 {
	if x != nil {
		return x.IfPhyUpCount
	}
	return 0
}

func (x *Ifm_IpInterfaceCountOper) GetIfV4DownCount() uint32 {
	if x != nil {
		return x.IfV4DownCount
	}
	return 0
}

func (x *Ifm_IpInterfaceCountOper) GetIfV4UpCount() uint32 {
	if x != nil {
		return x.IfV4UpCount
	}
	return 0
}

func (x *Ifm_IpInterfaceCountOper) GetIpInterfaceCounts() *Ifm_IpInterfaceCountOper_IpInterfaceCounts {
	if x != nil {
		return x.IpInterfaceCounts
	}
	return nil
}

type Ifm_Ipv6InterfaceCountOper struct {
	state               protoimpl.MessageState                          `protogen:"open.v1"`
	IfPhyDownCount      uint32                                          `protobuf:"varint,1,opt,name=ifPhyDownCount,proto3" json:"ifPhyDownCount,omitempty"`
	IfPhyUpCount        uint32                                          `protobuf:"varint,2,opt,name=ifPhyUpCount,proto3" json:"ifPhyUpCount,omitempty"`
	IfV6DownCount       uint32                                          `protobuf:"varint,3,opt,name=ifV6DownCount,proto3" json:"ifV6DownCount,omitempty"`
	IfV6UpCount         uint32                                          `protobuf:"varint,4,opt,name=ifV6UpCount,proto3" json:"ifV6UpCount,omitempty"`
	Ipv6InterfaceCounts *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts `protobuf:"bytes,5,opt,name=ipv6InterfaceCounts,proto3" json:"ipv6InterfaceCounts,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ifm_Ipv6InterfaceCountOper) Reset() {
	*x = Ifm_Ipv6InterfaceCountOper{}
	mi := &file_huawei_ifm_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Ipv6InterfaceCountOper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Ipv6InterfaceCountOper) ProtoMessage() {}

func (x *Ifm_Ipv6InterfaceCountOper) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Ipv6InterfaceCountOper.ProtoReflect.Descriptor instead.
func (*Ifm_Ipv6InterfaceCountOper) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Ifm_Ipv6InterfaceCountOper) GetIfPhyDownCount() uint32 {
	if x != nil {
		return x.IfPhyDownCount
	}
	return 0
}

func (x *Ifm_Ipv6InterfaceCountOper) GetIfPhyUpCount() uint32 {
	if x != nil {
		return x.IfPhyUpCount
	}
	return 0
}

func (x *Ifm_Ipv6InterfaceCountOper) GetIfV6DownCount() uint32 {
	if x != nil {
		return x.IfV6DownCount
	}
	return 0
}

func (x *Ifm_Ipv6InterfaceCountOper) GetIfV6UpCount() uint32 {
	if x != nil {
		return x.IfV6UpCount
	}
	return 0
}

func (x *Ifm_Ipv6InterfaceCountOper) GetIpv6InterfaceCounts() *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts {
	if x != nil {
		return x.Ipv6InterfaceCounts
	}
	return nil
}

type Ifm_PppDamp struct {
	state              protoimpl.MessageState   `protogen:"open.v1"`
	PppDampEnable      bool                     `protobuf:"varint,1,opt,name=pppDampEnable,proto3" json:"pppDampEnable,omitempty"`
	PppDampLevel       Ifm_PppDamp_PppDampLevel `protobuf:"varint,2,opt,name=pppDampLevel,proto3,enum=huawei_ifm.Ifm_PppDamp_PppDampLevel" json:"pppDampLevel,omitempty"`
	PppHalfLifePeriod  uint32                   `protobuf:"varint,3,opt,name=pppHalfLifePeriod,proto3" json:"pppHalfLifePeriod,omitempty"`
	PppMaxSuppressTime uint32                   `protobuf:"varint,4,opt,name=pppMaxSuppressTime,proto3" json:"pppMaxSuppressTime,omitempty"`
	PppReuse           uint32                   `protobuf:"varint,5,opt,name=pppReuse,proto3" json:"pppReuse,omitempty"`
	PppSuppress        uint32                   `protobuf:"varint,6,opt,name=pppSuppress,proto3" json:"pppSuppress,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Ifm_PppDamp) Reset() {
	*x = Ifm_PppDamp{}
	mi := &file_huawei_ifm_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_PppDamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_PppDamp) ProtoMessage() {}

func (x *Ifm_PppDamp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_PppDamp.ProtoReflect.Descriptor instead.
func (*Ifm_PppDamp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Ifm_PppDamp) GetPppDampEnable() bool {
	if x != nil {
		return x.PppDampEnable
	}
	return false
}

func (x *Ifm_PppDamp) GetPppDampLevel() Ifm_PppDamp_PppDampLevel {
	if x != nil {
		return x.PppDampLevel
	}
	return Ifm_PppDamp_PppDampLevel_HEAVY
}

func (x *Ifm_PppDamp) GetPppHalfLifePeriod() uint32 {
	if x != nil {
		return x.PppHalfLifePeriod
	}
	return 0
}

func (x *Ifm_PppDamp) GetPppMaxSuppressTime() uint32 {
	if x != nil {
		return x.PppMaxSuppressTime
	}
	return 0
}

func (x *Ifm_PppDamp) GetPppReuse() uint32 {
	if x != nil {
		return x.PppReuse
	}
	return 0
}

func (x *Ifm_PppDamp) GetPppSuppress() uint32 {
	if x != nil {
		return x.PppSuppress
	}
	return 0
}

type Ifm_RemoteInterfaces struct {
	state           protoimpl.MessageState                  `protogen:"open.v1"`
	RemoteInterface []*Ifm_RemoteInterfaces_RemoteInterface `protobuf:"bytes,1,rep,name=remoteInterface,proto3" json:"remoteInterface,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Ifm_RemoteInterfaces) Reset() {
	*x = Ifm_RemoteInterfaces{}
	mi := &file_huawei_ifm_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_RemoteInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_RemoteInterfaces) ProtoMessage() {}

func (x *Ifm_RemoteInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_RemoteInterfaces.ProtoReflect.Descriptor instead.
func (*Ifm_RemoteInterfaces) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Ifm_RemoteInterfaces) GetRemoteInterface() []*Ifm_RemoteInterfaces_RemoteInterface {
	if x != nil {
		return x.RemoteInterface
	}
	return nil
}

type Ifm_StaticDimRanges struct {
	state          protoimpl.MessageState                `protogen:"open.v1"`
	StaticDimRange []*Ifm_StaticDimRanges_StaticDimRange `protobuf:"bytes,1,rep,name=staticDimRange,proto3" json:"staticDimRange,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_StaticDimRanges) Reset() {
	*x = Ifm_StaticDimRanges{}
	mi := &file_huawei_ifm_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_StaticDimRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_StaticDimRanges) ProtoMessage() {}

func (x *Ifm_StaticDimRanges) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_StaticDimRanges.ProtoReflect.Descriptor instead.
func (*Ifm_StaticDimRanges) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Ifm_StaticDimRanges) GetStaticDimRange() []*Ifm_StaticDimRanges_StaticDimRange {
	if x != nil {
		return x.StaticDimRange
	}
	return nil
}

type Ifm_Interfaces_Interface struct {
	state                protoimpl.MessageState                         `protogen:"open.v1"`
	IfAdminStatus        Ifm_Interfaces_Interface_IfAdminStatus         `protobuf:"varint,5,opt,name=ifAdminStatus,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfAdminStatus" json:"ifAdminStatus,omitempty"`
	IfClearedStat        *Ifm_Interfaces_Interface_IfClearedStat        `protobuf:"bytes,9,opt,name=ifClearedStat,proto3" json:"ifClearedStat,omitempty"`
	IfDynamicInfo        *Ifm_Interfaces_Interface_IfDynamicInfo        `protobuf:"bytes,13,opt,name=ifDynamicInfo,proto3" json:"ifDynamicInfo,omitempty"`
	IfIndex              uint32                                         `protobuf:"varint,16,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName               string                                         `protobuf:"bytes,25,opt,name=ifName,proto3" json:"ifName,omitempty"`
	IfStatistics         *Ifm_Interfaces_Interface_IfStatistics         `protobuf:"bytes,35,opt,name=ifStatistics,proto3" json:"ifStatistics,omitempty"`
	DownDelayTime        uint32                                         `protobuf:"varint,36,opt,name=downDelayTime,proto3" json:"downDelayTime,omitempty"`
	FlowAlarm            *Ifm_Interfaces_Interface_FlowAlarm            `protobuf:"bytes,37,opt,name=flowAlarm,proto3" json:"flowAlarm,omitempty"`
	ForwardMode          *Ifm_Interfaces_Interface_ForwardMode          `protobuf:"bytes,38,opt,name=forwardMode,proto3" json:"forwardMode,omitempty"`
	Fr                   *Ifm_Interfaces_Interface_Fr                   `protobuf:"bytes,39,opt,name=fr,proto3" json:"fr,omitempty"`
	Hdlc                 *Ifm_Interfaces_Interface_Hdlc                 `protobuf:"bytes,40,opt,name=hdlc,proto3" json:"hdlc,omitempty"`
	IfBandwidth          uint32                                         `protobuf:"varint,41,opt,name=ifBandwidth,proto3" json:"ifBandwidth,omitempty"`
	IfCeIpStatiEnable    *Ifm_Interfaces_Interface_IfCeIpStatiEnable    `protobuf:"bytes,42,opt,name=ifCeIpStatiEnable,proto3" json:"ifCeIpStatiEnable,omitempty"`
	IfCeIpStatisticsInfo *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo `protobuf:"bytes,43,opt,name=ifCeIpStatisticsInfo,proto3" json:"ifCeIpStatisticsInfo,omitempty"`
	IfCfgEncapType       Ifm_Interfaces_Interface_IfCfgEncapType        `protobuf:"varint,44,opt,name=ifCfgEncapType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfCfgEncapType" json:"ifCfgEncapType,omitempty"`
	IfCfgMac             string                                         `protobuf:"bytes,45,opt,name=ifCfgMac,proto3" json:"ifCfgMac,omitempty"`
	IfClass              Ifm_Interfaces_Interface_IfClass               `protobuf:"varint,46,opt,name=ifClass,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfClass" json:"ifClass,omitempty"`
	IfControlFlap        *Ifm_Interfaces_Interface_IfControlFlap        `protobuf:"bytes,47,opt,name=ifControlFlap,proto3" json:"ifControlFlap,omitempty"`
	IfDescr              string                                         `protobuf:"bytes,48,opt,name=ifDescr,proto3" json:"ifDescr,omitempty"`
	IfDf                 bool                                           `protobuf:"varint,49,opt,name=ifDf,proto3" json:"ifDf,omitempty"`
	IfErrorDown          *Ifm_Interfaces_Interface_IfErrorDown          `protobuf:"bytes,50,opt,name=ifErrorDown,proto3" json:"ifErrorDown,omitempty"`
	IfIpIcmpStatistics   *Ifm_Interfaces_Interface_IfIpIcmpStatistics   `protobuf:"bytes,51,opt,name=ifIpIcmpStatistics,proto3" json:"ifIpIcmpStatistics,omitempty"`
	IfIpStatiCfg         *Ifm_Interfaces_Interface_IfIpStatiCfg         `protobuf:"bytes,52,opt,name=ifIpStatiCfg,proto3" json:"ifIpStatiCfg,omitempty"`
	IfLinkProtocol       Ifm_Interfaces_Interface_IfLinkProtocol        `protobuf:"varint,53,opt,name=ifLinkProtocol,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfLinkProtocol" json:"ifLinkProtocol,omitempty"`
	IfMainIfDescr        string                                         `protobuf:"bytes,54,opt,name=ifMainIfDescr,proto3" json:"ifMainIfDescr,omitempty"`
	IfMru                *Ifm_Interfaces_Interface_IfMru                `protobuf:"bytes,55,opt,name=ifMru,proto3" json:"ifMru,omitempty"`
	IfMruDiscardStat     *Ifm_Interfaces_Interface_IfMruDiscardStat     `protobuf:"bytes,56,opt,name=ifMruDiscardStat,proto3" json:"ifMruDiscardStat,omitempty"`
	IfMruStatEnable      *Ifm_Interfaces_Interface_IfMruStatEnable      `protobuf:"bytes,57,opt,name=ifMruStatEnable,proto3" json:"ifMruStatEnable,omitempty"`
	IfMtu                uint32                                         `protobuf:"varint,58,opt,name=ifMtu,proto3" json:"ifMtu,omitempty"`
	IfNetworkLayerStatus Ifm_Interfaces_Interface_IfNetworkLayerStatus  `protobuf:"varint,59,opt,name=ifNetworkLayerStatus,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfNetworkLayerStatus" json:"ifNetworkLayerStatus,omitempty"`
	IfNumber             string                                         `protobuf:"bytes,60,opt,name=ifNumber,proto3" json:"ifNumber,omitempty"`
	IfOperEncapType      Ifm_Interfaces_Interface_IfOperEncapType       `protobuf:"varint,61,opt,name=ifOperEncapType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfOperEncapType" json:"ifOperEncapType,omitempty"`
	IfParentIfName       string                                         `protobuf:"bytes,62,opt,name=ifParentIfName,proto3" json:"ifParentIfName,omitempty"`
	IfPhyType            Ifm_Interfaces_Interface_IfPhyType             `protobuf:"varint,63,opt,name=ifPhyType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfPhyType" json:"ifPhyType,omitempty"`
	IfPosition           string                                         `protobuf:"bytes,64,opt,name=ifPosition,proto3" json:"ifPosition,omitempty"`
	IfRouterType         Ifm_Interfaces_Interface_IfRouterType          `protobuf:"varint,65,opt,name=ifRouterType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfRouterType" json:"ifRouterType,omitempty"`
	IfServiceType        Ifm_Interfaces_Interface_IfServiceType         `protobuf:"varint,66,opt,name=ifServiceType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfServiceType" json:"ifServiceType,omitempty"`
	IfStatItvl           uint32                                         `protobuf:"varint,67,opt,name=ifStatItvl,proto3" json:"ifStatItvl,omitempty"`
	IfStatiEnable        bool                                           `protobuf:"varint,68,opt,name=ifStatiEnable,proto3" json:"ifStatiEnable,omitempty"`
	IfTcpMss             *Ifm_Interfaces_Interface_IfTcpMss             `protobuf:"bytes,69,opt,name=ifTcpMss,proto3" json:"ifTcpMss,omitempty"`
	IfTrackRtMtg         *Ifm_Interfaces_Interface_IfTrackRtMtg         `protobuf:"bytes,70,opt,name=ifTrackRtMtg,proto3" json:"ifTrackRtMtg,omitempty"`
	IfTrapEnable         bool                                           `protobuf:"varint,71,opt,name=ifTrapEnable,proto3" json:"ifTrapEnable,omitempty"`
	IfTrapThreshold      *Ifm_Interfaces_Interface_IfTrapThreshold      `protobuf:"bytes,72,opt,name=ifTrapThreshold,proto3" json:"ifTrapThreshold,omitempty"`
	IfTrunkIfName        string                                         `protobuf:"bytes,73,opt,name=ifTrunkIfName,proto3" json:"ifTrunkIfName,omitempty"`
	Ipv4Config           *Ifm_Interfaces_Interface_Ipv4Config           `protobuf:"bytes,74,opt,name=ipv4Config,proto3" json:"ipv4Config,omitempty"`
	Ipv4Oper             *Ifm_Interfaces_Interface_Ipv4Oper             `protobuf:"bytes,75,opt,name=ipv4Oper,proto3" json:"ipv4Oper,omitempty"`
	Ipv6Config           *Ifm_Interfaces_Interface_Ipv6Config           `protobuf:"bytes,76,opt,name=ipv6Config,proto3" json:"ipv6Config,omitempty"`
	Ipv6Oper             *Ifm_Interfaces_Interface_Ipv6Oper             `protobuf:"bytes,77,opt,name=ipv6Oper,proto3" json:"ipv6Oper,omitempty"`
	IsActorBearSrv       bool                                           `protobuf:"varint,78,opt,name=isActorBearSrv,proto3" json:"isActorBearSrv,omitempty"`
	IsAvailable          bool                                           `protobuf:"varint,79,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`
	IsL2SwitchPort       bool                                           `protobuf:"varint,80,opt,name=isL2SwitchPort,proto3" json:"isL2SwitchPort,omitempty"`
	L2SubIfFlag          bool                                           `protobuf:"varint,81,opt,name=l2SubIfFlag,proto3" json:"l2SubIfFlag,omitempty"`
	L2SwitchPortIndex    uint32                                         `protobuf:"varint,82,opt,name=l2SwitchPortIndex,proto3" json:"l2SwitchPortIndex,omitempty"`
	MainIpAddr           *Ifm_Interfaces_Interface_MainIpAddr           `protobuf:"bytes,83,opt,name=mainIpAddr,proto3" json:"mainIpAddr,omitempty"`
	NetSlices            *Ifm_Interfaces_Interface_NetSlices            `protobuf:"bytes,84,opt,name=netSlices,proto3" json:"netSlices,omitempty"`
	PhyDampIfCfg         *Ifm_Interfaces_Interface_PhyDampIfCfg         `protobuf:"bytes,85,opt,name=phyDampIfCfg,proto3" json:"phyDampIfCfg,omitempty"`
	PhyDampIfOper        *Ifm_Interfaces_Interface_PhyDampIfOper        `protobuf:"bytes,86,opt,name=phyDampIfOper,proto3" json:"phyDampIfOper,omitempty"`
	PhyIfMacStat         *Ifm_Interfaces_Interface_PhyIfMacStat         `protobuf:"bytes,87,opt,name=phyIfMacStat,proto3" json:"phyIfMacStat,omitempty"`
	PortMode             Ifm_Interfaces_Interface_PortMode              `protobuf:"varint,88,opt,name=portMode,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_PortMode" json:"portMode,omitempty"`
	Ppp                  *Ifm_Interfaces_Interface_Ppp                  `protobuf:"bytes,89,opt,name=ppp,proto3" json:"ppp,omitempty"`
	ProtocolUpDelayTime  uint32                                         `protobuf:"varint,90,opt,name=protocolUpDelayTime,proto3" json:"protocolUpDelayTime,omitempty"`
	RemoteIfStat         *Ifm_Interfaces_Interface_RemoteIfStat         `protobuf:"bytes,91,opt,name=remoteIfStat,proto3" json:"remoteIfStat,omitempty"`
	SpreadMtuFlag        bool                                           `protobuf:"varint,92,opt,name=spreadMtuFlag,proto3" json:"spreadMtuFlag,omitempty"`
	StatMode             Ifm_Interfaces_Interface_StatMode              `protobuf:"varint,93,opt,name=statMode,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_StatMode" json:"statMode,omitempty"`
	TransAlarmDown       *Ifm_Interfaces_Interface_TransAlarmDown       `protobuf:"bytes,94,opt,name=transAlarmDown,proto3" json:"transAlarmDown,omitempty"`
	VPosition            *Ifm_Interfaces_Interface_VPosition            `protobuf:"bytes,95,opt,name=vPosition,proto3" json:"vPosition,omitempty"`
	VbdIfForwardMode     *Ifm_Interfaces_Interface_VbdIfForwardMode     `protobuf:"bytes,96,opt,name=vbdIfForwardMode,proto3" json:"vbdIfForwardMode,omitempty"`
	VeGroup              *Ifm_Interfaces_Interface_VeGroup              `protobuf:"bytes,97,opt,name=veGroup,proto3" json:"veGroup,omitempty"`
	VeMemberSlot         *Ifm_Interfaces_Interface_VeMemberSlot         `protobuf:"bytes,98,opt,name=veMemberSlot,proto3" json:"veMemberSlot,omitempty"`
	VllPwLoopChk         *Ifm_Interfaces_Interface_VllPwLoopChk         `protobuf:"bytes,99,opt,name=vllPwLoopChk,proto3" json:"vllPwLoopChk,omitempty"`
	VrfName              string                                         `protobuf:"bytes,100,opt,name=vrfName,proto3" json:"vrfName,omitempty"`
	VsName               string                                         `protobuf:"bytes,101,opt,name=vsName,proto3" json:"vsName,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface) Reset() {
	*x = Ifm_Interfaces_Interface{}
	mi := &file_huawei_ifm_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Ifm_Interfaces_Interface) GetIfAdminStatus() Ifm_Interfaces_Interface_IfAdminStatus {
	if x != nil {
		return x.IfAdminStatus
	}
	return Ifm_Interfaces_Interface_IfAdminStatus_DOWN
}

func (x *Ifm_Interfaces_Interface) GetIfClearedStat() *Ifm_Interfaces_Interface_IfClearedStat {
	if x != nil {
		return x.IfClearedStat
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfDynamicInfo() *Ifm_Interfaces_Interface_IfDynamicInfo {
	if x != nil {
		return x.IfDynamicInfo
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIfStatistics() *Ifm_Interfaces_Interface_IfStatistics {
	if x != nil {
		return x.IfStatistics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDownDelayTime() uint32 {
	if x != nil {
		return x.DownDelayTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetFlowAlarm() *Ifm_Interfaces_Interface_FlowAlarm {
	if x != nil {
		return x.FlowAlarm
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetForwardMode() *Ifm_Interfaces_Interface_ForwardMode {
	if x != nil {
		return x.ForwardMode
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetFr() *Ifm_Interfaces_Interface_Fr {
	if x != nil {
		return x.Fr
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetHdlc() *Ifm_Interfaces_Interface_Hdlc {
	if x != nil {
		return x.Hdlc
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfBandwidth() uint32 {
	if x != nil {
		return x.IfBandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetIfCeIpStatiEnable() *Ifm_Interfaces_Interface_IfCeIpStatiEnable {
	if x != nil {
		return x.IfCeIpStatiEnable
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfCeIpStatisticsInfo() *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo {
	if x != nil {
		return x.IfCeIpStatisticsInfo
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfCfgEncapType() Ifm_Interfaces_Interface_IfCfgEncapType {
	if x != nil {
		return x.IfCfgEncapType
	}
	return Ifm_Interfaces_Interface_IfCfgEncapType_IETF
}

func (x *Ifm_Interfaces_Interface) GetIfCfgMac() string {
	if x != nil {
		return x.IfCfgMac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIfClass() Ifm_Interfaces_Interface_IfClass {
	if x != nil {
		return x.IfClass
	}
	return Ifm_Interfaces_Interface_IfClass_MAININTERFACE
}

func (x *Ifm_Interfaces_Interface) GetIfControlFlap() *Ifm_Interfaces_Interface_IfControlFlap {
	if x != nil {
		return x.IfControlFlap
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfDescr() string {
	if x != nil {
		return x.IfDescr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIfDf() bool {
	if x != nil {
		return x.IfDf
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetIfErrorDown() *Ifm_Interfaces_Interface_IfErrorDown {
	if x != nil {
		return x.IfErrorDown
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfIpIcmpStatistics() *Ifm_Interfaces_Interface_IfIpIcmpStatistics {
	if x != nil {
		return x.IfIpIcmpStatistics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfIpStatiCfg() *Ifm_Interfaces_Interface_IfIpStatiCfg {
	if x != nil {
		return x.IfIpStatiCfg
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfLinkProtocol() Ifm_Interfaces_Interface_IfLinkProtocol {
	if x != nil {
		return x.IfLinkProtocol
	}
	return Ifm_Interfaces_Interface_IfLinkProtocol_ATM
}

func (x *Ifm_Interfaces_Interface) GetIfMainIfDescr() string {
	if x != nil {
		return x.IfMainIfDescr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIfMru() *Ifm_Interfaces_Interface_IfMru {
	if x != nil {
		return x.IfMru
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfMruDiscardStat() *Ifm_Interfaces_Interface_IfMruDiscardStat {
	if x != nil {
		return x.IfMruDiscardStat
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfMruStatEnable() *Ifm_Interfaces_Interface_IfMruStatEnable {
	if x != nil {
		return x.IfMruStatEnable
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfMtu() uint32 {
	if x != nil {
		return x.IfMtu
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetIfNetworkLayerStatus() Ifm_Interfaces_Interface_IfNetworkLayerStatus {
	if x != nil {
		return x.IfNetworkLayerStatus
	}
	return Ifm_Interfaces_Interface_IfNetworkLayerStatus_IPV4ANDIPV6DOWN
}

func (x *Ifm_Interfaces_Interface) GetIfNumber() string {
	if x != nil {
		return x.IfNumber
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIfOperEncapType() Ifm_Interfaces_Interface_IfOperEncapType {
	if x != nil {
		return x.IfOperEncapType
	}
	return Ifm_Interfaces_Interface_IfOperEncapType_DOT1Q
}

func (x *Ifm_Interfaces_Interface) GetIfParentIfName() string {
	if x != nil {
		return x.IfParentIfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIfPhyType() Ifm_Interfaces_Interface_IfPhyType {
	if x != nil {
		return x.IfPhyType
	}
	return Ifm_Interfaces_Interface_IfPhyType_ATM
}

func (x *Ifm_Interfaces_Interface) GetIfPosition() string {
	if x != nil {
		return x.IfPosition
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIfRouterType() Ifm_Interfaces_Interface_IfRouterType {
	if x != nil {
		return x.IfRouterType
	}
	return Ifm_Interfaces_Interface_IfRouterType_BROADCAST
}

func (x *Ifm_Interfaces_Interface) GetIfServiceType() Ifm_Interfaces_Interface_IfServiceType {
	if x != nil {
		return x.IfServiceType
	}
	return Ifm_Interfaces_Interface_IfServiceType_BUNDLEMEMBER
}

func (x *Ifm_Interfaces_Interface) GetIfStatItvl() uint32 {
	if x != nil {
		return x.IfStatItvl
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetIfStatiEnable() bool {
	if x != nil {
		return x.IfStatiEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetIfTcpMss() *Ifm_Interfaces_Interface_IfTcpMss {
	if x != nil {
		return x.IfTcpMss
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfTrackRtMtg() *Ifm_Interfaces_Interface_IfTrackRtMtg {
	if x != nil {
		return x.IfTrackRtMtg
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfTrapEnable() bool {
	if x != nil {
		return x.IfTrapEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetIfTrapThreshold() *Ifm_Interfaces_Interface_IfTrapThreshold {
	if x != nil {
		return x.IfTrapThreshold
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfTrunkIfName() string {
	if x != nil {
		return x.IfTrunkIfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIpv4Config() *Ifm_Interfaces_Interface_Ipv4Config {
	if x != nil {
		return x.Ipv4Config
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpv4Oper() *Ifm_Interfaces_Interface_Ipv4Oper {
	if x != nil {
		return x.Ipv4Oper
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpv6Config() *Ifm_Interfaces_Interface_Ipv6Config {
	if x != nil {
		return x.Ipv6Config
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpv6Oper() *Ifm_Interfaces_Interface_Ipv6Oper {
	if x != nil {
		return x.Ipv6Oper
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIsActorBearSrv() bool {
	if x != nil {
		return x.IsActorBearSrv
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetIsL2SwitchPort() bool {
	if x != nil {
		return x.IsL2SwitchPort
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetL2SubIfFlag() bool {
	if x != nil {
		return x.L2SubIfFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetL2SwitchPortIndex() uint32 {
	if x != nil {
		return x.L2SwitchPortIndex
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetMainIpAddr() *Ifm_Interfaces_Interface_MainIpAddr {
	if x != nil {
		return x.MainIpAddr
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNetSlices() *Ifm_Interfaces_Interface_NetSlices {
	if x != nil {
		return x.NetSlices
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetPhyDampIfCfg() *Ifm_Interfaces_Interface_PhyDampIfCfg {
	if x != nil {
		return x.PhyDampIfCfg
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetPhyDampIfOper() *Ifm_Interfaces_Interface_PhyDampIfOper {
	if x != nil {
		return x.PhyDampIfOper
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetPhyIfMacStat() *Ifm_Interfaces_Interface_PhyIfMacStat {
	if x != nil {
		return x.PhyIfMacStat
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetPortMode() Ifm_Interfaces_Interface_PortMode {
	if x != nil {
		return x.PortMode
	}
	return Ifm_Interfaces_Interface_PortMode_L2
}

func (x *Ifm_Interfaces_Interface) GetPpp() *Ifm_Interfaces_Interface_Ppp {
	if x != nil {
		return x.Ppp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetProtocolUpDelayTime() uint32 {
	if x != nil {
		return x.ProtocolUpDelayTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetRemoteIfStat() *Ifm_Interfaces_Interface_RemoteIfStat {
	if x != nil {
		return x.RemoteIfStat
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetSpreadMtuFlag() bool {
	if x != nil {
		return x.SpreadMtuFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetStatMode() Ifm_Interfaces_Interface_StatMode {
	if x != nil {
		return x.StatMode
	}
	return Ifm_Interfaces_Interface_StatMode_BASEINTERFACE
}

func (x *Ifm_Interfaces_Interface) GetTransAlarmDown() *Ifm_Interfaces_Interface_TransAlarmDown {
	if x != nil {
		return x.TransAlarmDown
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVPosition() *Ifm_Interfaces_Interface_VPosition {
	if x != nil {
		return x.VPosition
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVbdIfForwardMode() *Ifm_Interfaces_Interface_VbdIfForwardMode {
	if x != nil {
		return x.VbdIfForwardMode
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVeGroup() *Ifm_Interfaces_Interface_VeGroup {
	if x != nil {
		return x.VeGroup
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVeMemberSlot() *Ifm_Interfaces_Interface_VeMemberSlot {
	if x != nil {
		return x.VeMemberSlot
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVllPwLoopChk() *Ifm_Interfaces_Interface_VllPwLoopChk {
	if x != nil {
		return x.VllPwLoopChk
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetVsName() string {
	if x != nil {
		return x.VsName
	}
	return ""
}

type Ifm_Interfaces_Interface_IfClearedStat struct {
	state               protoimpl.MessageState                                      `protogen:"open.v1"`
	SendByte            uint64                                                      `protobuf:"varint,29,opt,name=sendByte,proto3" json:"sendByte,omitempty"`
	SendPacket          uint64                                                      `protobuf:"varint,36,opt,name=sendPacket,proto3" json:"sendPacket,omitempty"`
	IfMacMtuDiscardStat *Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat `protobuf:"bytes,37,opt,name=ifMacMtuDiscardStat,proto3" json:"ifMacMtuDiscardStat,omitempty"`
	IfOperStatItvl      uint32                                                      `protobuf:"varint,38,opt,name=ifOperStatItvl,proto3" json:"ifOperStatItvl,omitempty"`
	InBitRate           uint64                                                      `protobuf:"varint,39,opt,name=inBitRate,proto3" json:"inBitRate,omitempty"`
	InByteRate          uint64                                                      `protobuf:"varint,40,opt,name=inByteRate,proto3" json:"inByteRate,omitempty"`
	InPacketRate        uint64                                                      `protobuf:"varint,41,opt,name=inPacketRate,proto3" json:"inPacketRate,omitempty"`
	InUseRate           string                                                      `protobuf:"bytes,42,opt,name=inUseRate,proto3" json:"inUseRate,omitempty"`
	OutBitRate          uint64                                                      `protobuf:"varint,43,opt,name=outBitRate,proto3" json:"outBitRate,omitempty"`
	OutByteRate         uint64                                                      `protobuf:"varint,44,opt,name=outByteRate,proto3" json:"outByteRate,omitempty"`
	OutPacketRate       uint64                                                      `protobuf:"varint,45,opt,name=outPacketRate,proto3" json:"outPacketRate,omitempty"`
	OutUseRate          string                                                      `protobuf:"bytes,46,opt,name=outUseRate,proto3" json:"outUseRate,omitempty"`
	RcvBroadBit         uint64                                                      `protobuf:"varint,47,opt,name=rcvBroadBit,proto3" json:"rcvBroadBit,omitempty"`
	RcvBroadBitRate     uint64                                                      `protobuf:"varint,48,opt,name=rcvBroadBitRate,proto3" json:"rcvBroadBitRate,omitempty"`
	RcvBroadPacket      uint64                                                      `protobuf:"varint,49,opt,name=rcvBroadPacket,proto3" json:"rcvBroadPacket,omitempty"`
	RcvBroadPacketRate  uint64                                                      `protobuf:"varint,50,opt,name=rcvBroadPacketRate,proto3" json:"rcvBroadPacketRate,omitempty"`
	RcvDropPacket       uint64                                                      `protobuf:"varint,51,opt,name=rcvDropPacket,proto3" json:"rcvDropPacket,omitempty"`
	RcvErrorPacket      uint64                                                      `protobuf:"varint,52,opt,name=rcvErrorPacket,proto3" json:"rcvErrorPacket,omitempty"`
	RcvMutiBit          uint64                                                      `protobuf:"varint,53,opt,name=rcvMutiBit,proto3" json:"rcvMutiBit,omitempty"`
	RcvMutiBitRate      uint64                                                      `protobuf:"varint,54,opt,name=rcvMutiBitRate,proto3" json:"rcvMutiBitRate,omitempty"`
	RcvMutiPacket       uint64                                                      `protobuf:"varint,55,opt,name=rcvMutiPacket,proto3" json:"rcvMutiPacket,omitempty"`
	RcvMutiPacketRate   uint64                                                      `protobuf:"varint,56,opt,name=rcvMutiPacketRate,proto3" json:"rcvMutiPacketRate,omitempty"`
	RcvUniBit           uint64                                                      `protobuf:"varint,57,opt,name=rcvUniBit,proto3" json:"rcvUniBit,omitempty"`
	RcvUniBitRate       uint64                                                      `protobuf:"varint,58,opt,name=rcvUniBitRate,proto3" json:"rcvUniBitRate,omitempty"`
	RcvUniPacket        uint64                                                      `protobuf:"varint,59,opt,name=rcvUniPacket,proto3" json:"rcvUniPacket,omitempty"`
	RcvUniPacketRate    uint64                                                      `protobuf:"varint,60,opt,name=rcvUniPacketRate,proto3" json:"rcvUniPacketRate,omitempty"`
	ReceiveByte         uint64                                                      `protobuf:"varint,61,opt,name=receiveByte,proto3" json:"receiveByte,omitempty"`
	ReceivePacket       uint64                                                      `protobuf:"varint,62,opt,name=receivePacket,proto3" json:"receivePacket,omitempty"`
	SendBroadBit        uint64                                                      `protobuf:"varint,63,opt,name=sendBroadBit,proto3" json:"sendBroadBit,omitempty"`
	SendBroadBitRate    uint64                                                      `protobuf:"varint,64,opt,name=sendBroadBitRate,proto3" json:"sendBroadBitRate,omitempty"`
	SendBroadPacket     uint64                                                      `protobuf:"varint,65,opt,name=sendBroadPacket,proto3" json:"sendBroadPacket,omitempty"`
	SendBroadPacketRate uint64                                                      `protobuf:"varint,66,opt,name=sendBroadPacketRate,proto3" json:"sendBroadPacketRate,omitempty"`
	SendDropPacket      uint64                                                      `protobuf:"varint,67,opt,name=sendDropPacket,proto3" json:"sendDropPacket,omitempty"`
	SendErrorPacket     uint64                                                      `protobuf:"varint,68,opt,name=sendErrorPacket,proto3" json:"sendErrorPacket,omitempty"`
	SendMutiBit         uint64                                                      `protobuf:"varint,69,opt,name=sendMutiBit,proto3" json:"sendMutiBit,omitempty"`
	SendMutiBitRate     uint64                                                      `protobuf:"varint,70,opt,name=sendMutiBitRate,proto3" json:"sendMutiBitRate,omitempty"`
	SendMutiPacket      uint64                                                      `protobuf:"varint,71,opt,name=sendMutiPacket,proto3" json:"sendMutiPacket,omitempty"`
	SendMutiPacketRate  uint64                                                      `protobuf:"varint,72,opt,name=sendMutiPacketRate,proto3" json:"sendMutiPacketRate,omitempty"`
	SendUniBit          uint64                                                      `protobuf:"varint,73,opt,name=sendUniBit,proto3" json:"sendUniBit,omitempty"`
	SendUniBitRate      uint64                                                      `protobuf:"varint,74,opt,name=sendUniBitRate,proto3" json:"sendUniBitRate,omitempty"`
	SendUniPacket       uint64                                                      `protobuf:"varint,75,opt,name=sendUniPacket,proto3" json:"sendUniPacket,omitempty"`
	SendUniPacketRate   uint64                                                      `protobuf:"varint,76,opt,name=sendUniPacketRate,proto3" json:"sendUniPacketRate,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) Reset() {
	*x = Ifm_Interfaces_Interface_IfClearedStat{}
	mi := &file_huawei_ifm_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfClearedStat) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfClearedStat) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfClearedStat.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfClearedStat) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendByte() uint64 {
	if x != nil {
		return x.SendByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendPacket() uint64 {
	if x != nil {
		return x.SendPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetIfMacMtuDiscardStat() *Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat {
	if x != nil {
		return x.IfMacMtuDiscardStat
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetIfOperStatItvl() uint32 {
	if x != nil {
		return x.IfOperStatItvl
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetInBitRate() uint64 {
	if x != nil {
		return x.InBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetInByteRate() uint64 {
	if x != nil {
		return x.InByteRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetInPacketRate() uint64 {
	if x != nil {
		return x.InPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetInUseRate() string {
	if x != nil {
		return x.InUseRate
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetOutBitRate() uint64 {
	if x != nil {
		return x.OutBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetOutByteRate() uint64 {
	if x != nil {
		return x.OutByteRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetOutPacketRate() uint64 {
	if x != nil {
		return x.OutPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetOutUseRate() string {
	if x != nil {
		return x.OutUseRate
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvBroadBit() uint64 {
	if x != nil {
		return x.RcvBroadBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvBroadBitRate() uint64 {
	if x != nil {
		return x.RcvBroadBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvBroadPacket() uint64 {
	if x != nil {
		return x.RcvBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvBroadPacketRate() uint64 {
	if x != nil {
		return x.RcvBroadPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvDropPacket() uint64 {
	if x != nil {
		return x.RcvDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvErrorPacket() uint64 {
	if x != nil {
		return x.RcvErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvMutiBit() uint64 {
	if x != nil {
		return x.RcvMutiBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvMutiBitRate() uint64 {
	if x != nil {
		return x.RcvMutiBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvMutiPacket() uint64 {
	if x != nil {
		return x.RcvMutiPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvMutiPacketRate() uint64 {
	if x != nil {
		return x.RcvMutiPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvUniBit() uint64 {
	if x != nil {
		return x.RcvUniBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvUniBitRate() uint64 {
	if x != nil {
		return x.RcvUniBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvUniPacket() uint64 {
	if x != nil {
		return x.RcvUniPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetRcvUniPacketRate() uint64 {
	if x != nil {
		return x.RcvUniPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetReceiveByte() uint64 {
	if x != nil {
		return x.ReceiveByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetReceivePacket() uint64 {
	if x != nil {
		return x.ReceivePacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendBroadBit() uint64 {
	if x != nil {
		return x.SendBroadBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendBroadBitRate() uint64 {
	if x != nil {
		return x.SendBroadBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendBroadPacket() uint64 {
	if x != nil {
		return x.SendBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendBroadPacketRate() uint64 {
	if x != nil {
		return x.SendBroadPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendDropPacket() uint64 {
	if x != nil {
		return x.SendDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendErrorPacket() uint64 {
	if x != nil {
		return x.SendErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendMutiBit() uint64 {
	if x != nil {
		return x.SendMutiBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendMutiBitRate() uint64 {
	if x != nil {
		return x.SendMutiBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendMutiPacket() uint64 {
	if x != nil {
		return x.SendMutiPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendMutiPacketRate() uint64 {
	if x != nil {
		return x.SendMutiPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendUniBit() uint64 {
	if x != nil {
		return x.SendUniBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendUniBitRate() uint64 {
	if x != nil {
		return x.SendUniBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendUniPacket() uint64 {
	if x != nil {
		return x.SendUniPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat) GetSendUniPacketRate() uint64 {
	if x != nil {
		return x.SendUniPacketRate
	}
	return 0
}

type Ifm_Interfaces_Interface_IfDynamicInfo struct {
	state              protoimpl.MessageState                                    `protogen:"open.v1"`
	IfOperStatus       Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus       `protobuf:"varint,5,opt,name=ifOperStatus,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus" json:"ifOperStatus,omitempty"`
	IfCtrlFlapDamp     bool                                                      `protobuf:"varint,6,opt,name=ifCtrlFlapDamp,proto3" json:"ifCtrlFlapDamp,omitempty"`
	IfLinkQualityGrade Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade `protobuf:"varint,7,opt,name=ifLinkQualityGrade,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade" json:"ifLinkQualityGrade,omitempty"`
	IfLinkStatus       Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus       `protobuf:"varint,8,opt,name=ifLinkStatus,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus" json:"ifLinkStatus,omitempty"`
	IfOperMac          string                                                    `protobuf:"bytes,9,opt,name=ifOperMac,proto3" json:"ifOperMac,omitempty"`
	IfOperSpeed        uint64                                                    `protobuf:"varint,10,opt,name=ifOperSpeed,proto3" json:"ifOperSpeed,omitempty"`
	IfOpertMTU         uint32                                                    `protobuf:"varint,11,opt,name=ifOpertMTU,proto3" json:"ifOpertMTU,omitempty"`
	IfPhyStatus        Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus        `protobuf:"varint,12,opt,name=ifPhyStatus,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus" json:"ifPhyStatus,omitempty"`
	IfV4State          Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State          `protobuf:"varint,13,opt,name=ifV4State,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State" json:"ifV4State,omitempty"`
	IfV6State          Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State          `protobuf:"varint,14,opt,name=ifV6State,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State" json:"ifV6State,omitempty"`
	IsOffline          bool                                                      `protobuf:"varint,15,opt,name=isOffline,proto3" json:"isOffline,omitempty"`
	LineProtocolUpTime string                                                    `protobuf:"bytes,16,opt,name=lineProtocolUpTime,proto3" json:"lineProtocolUpTime,omitempty"`
	SubIfCount         uint32                                                    `protobuf:"varint,17,opt,name=subIfCount,proto3" json:"subIfCount,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) Reset() {
	*x = Ifm_Interfaces_Interface_IfDynamicInfo{}
	mi := &file_huawei_ifm_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfDynamicInfo) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfDynamicInfo.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfDynamicInfo) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfOperStatus() Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus {
	if x != nil {
		return x.IfOperStatus
	}
	return Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus_DOWN
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfCtrlFlapDamp() bool {
	if x != nil {
		return x.IfCtrlFlapDamp
	}
	return false
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfLinkQualityGrade() Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade {
	if x != nil {
		return x.IfLinkQualityGrade
	}
	return Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade_GOOD
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfLinkStatus() Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus {
	if x != nil {
		return x.IfLinkStatus
	}
	return Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus_DOWN
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfOperMac() string {
	if x != nil {
		return x.IfOperMac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfOperSpeed() uint64 {
	if x != nil {
		return x.IfOperSpeed
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfOpertMTU() uint32 {
	if x != nil {
		return x.IfOpertMTU
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfPhyStatus() Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus {
	if x != nil {
		return x.IfPhyStatus
	}
	return Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus_DOWN
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfV4State() Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State {
	if x != nil {
		return x.IfV4State
	}
	return Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State_DOWN
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIfV6State() Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State {
	if x != nil {
		return x.IfV6State
	}
	return Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State_DOWN
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetLineProtocolUpTime() string {
	if x != nil {
		return x.LineProtocolUpTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_IfDynamicInfo) GetSubIfCount() uint32 {
	if x != nil {
		return x.SubIfCount
	}
	return 0
}

type Ifm_Interfaces_Interface_IfStatistics struct {
	state              protoimpl.MessageState                               `protogen:"open.v1"`
	RcvBroadPacket     uint64                                               `protobuf:"varint,2,opt,name=rcvBroadPacket,proto3" json:"rcvBroadPacket,omitempty"`
	RcvDropPacket      uint64                                               `protobuf:"varint,3,opt,name=rcvDropPacket,proto3" json:"rcvDropPacket,omitempty"`
	RcvErrorPacket     uint64                                               `protobuf:"varint,4,opt,name=rcvErrorPacket,proto3" json:"rcvErrorPacket,omitempty"`
	RcvMutiPacket      uint64                                               `protobuf:"varint,5,opt,name=rcvMutiPacket,proto3" json:"rcvMutiPacket,omitempty"`
	RcvUniPacket       uint64                                               `protobuf:"varint,6,opt,name=rcvUniPacket,proto3" json:"rcvUniPacket,omitempty"`
	ReceiveByte        uint64                                               `protobuf:"varint,7,opt,name=receiveByte,proto3" json:"receiveByte,omitempty"`
	ReceivePacket      uint64                                               `protobuf:"varint,8,opt,name=receivePacket,proto3" json:"receivePacket,omitempty"`
	SendBroadPacket    uint64                                               `protobuf:"varint,9,opt,name=sendBroadPacket,proto3" json:"sendBroadPacket,omitempty"`
	SendByte           uint64                                               `protobuf:"varint,10,opt,name=sendByte,proto3" json:"sendByte,omitempty"`
	SendDropPacket     uint64                                               `protobuf:"varint,11,opt,name=sendDropPacket,proto3" json:"sendDropPacket,omitempty"`
	SendErrorPacket    uint64                                               `protobuf:"varint,12,opt,name=sendErrorPacket,proto3" json:"sendErrorPacket,omitempty"`
	SendMutiPacket     uint64                                               `protobuf:"varint,13,opt,name=sendMutiPacket,proto3" json:"sendMutiPacket,omitempty"`
	SendPacket         uint64                                               `protobuf:"varint,14,opt,name=sendPacket,proto3" json:"sendPacket,omitempty"`
	SendUniPacket      uint64                                               `protobuf:"varint,15,opt,name=sendUniPacket,proto3" json:"sendUniPacket,omitempty"`
	InRealtimeBitRate  uint64                                               `protobuf:"varint,17,opt,name=in_realtime_bit_rate,json=inRealtimeBitRate,proto3" json:"in_realtime_bit_rate,omitempty"`
	OutRealtimeBitRate uint64                                               `protobuf:"varint,18,opt,name=out_realtime_bit_rate,json=outRealtimeBitRate,proto3" json:"out_realtime_bit_rate,omitempty"`
	EthPortErrSts      *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts `protobuf:"bytes,16,opt,name=ethPortErrSts,proto3" json:"ethPortErrSts,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_IfStatistics{}
	mi := &file_huawei_ifm_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetRcvBroadPacket() uint64 {
	if x != nil {
		return x.RcvBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetRcvDropPacket() uint64 {
	if x != nil {
		return x.RcvDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetRcvErrorPacket() uint64 {
	if x != nil {
		return x.RcvErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetRcvMutiPacket() uint64 {
	if x != nil {
		return x.RcvMutiPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetRcvUniPacket() uint64 {
	if x != nil {
		return x.RcvUniPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetReceiveByte() uint64 {
	if x != nil {
		return x.ReceiveByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetReceivePacket() uint64 {
	if x != nil {
		return x.ReceivePacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetSendBroadPacket() uint64 {
	if x != nil {
		return x.SendBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetSendByte() uint64 {
	if x != nil {
		return x.SendByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetSendDropPacket() uint64 {
	if x != nil {
		return x.SendDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetSendErrorPacket() uint64 {
	if x != nil {
		return x.SendErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetSendMutiPacket() uint64 {
	if x != nil {
		return x.SendMutiPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetSendPacket() uint64 {
	if x != nil {
		return x.SendPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetSendUniPacket() uint64 {
	if x != nil {
		return x.SendUniPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetInRealtimeBitRate() uint64 {
	if x != nil {
		return x.InRealtimeBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetOutRealtimeBitRate() uint64 {
	if x != nil {
		return x.OutRealtimeBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics) GetEthPortErrSts() *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts {
	if x != nil {
		return x.EthPortErrSts
	}
	return nil
}

type Ifm_Interfaces_Interface_FlowAlarm struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	UnknownUnicastAlarm uint32                 `protobuf:"varint,1,opt,name=unknownUnicastAlarm,proto3" json:"unknownUnicastAlarm,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_FlowAlarm) Reset() {
	*x = Ifm_Interfaces_Interface_FlowAlarm{}
	mi := &file_huawei_ifm_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_FlowAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FlowAlarm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FlowAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FlowAlarm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FlowAlarm) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *Ifm_Interfaces_Interface_FlowAlarm) GetUnknownUnicastAlarm() uint32 {
	if x != nil {
		return x.UnknownUnicastAlarm
	}
	return 0
}

type Ifm_Interfaces_Interface_ForwardMode struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	VeForwarMode  Ifm_Interfaces_Interface_ForwardMode_VeForwarMode `protobuf:"varint,1,opt,name=veForwarMode,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_ForwardMode_VeForwarMode" json:"veForwarMode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_ForwardMode) Reset() {
	*x = Ifm_Interfaces_Interface_ForwardMode{}
	mi := &file_huawei_ifm_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_ForwardMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ForwardMode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ForwardMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ForwardMode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ForwardMode) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (x *Ifm_Interfaces_Interface_ForwardMode) GetVeForwarMode() Ifm_Interfaces_Interface_ForwardMode_VeForwarMode {
	if x != nil {
		return x.VeForwarMode
	}
	return Ifm_Interfaces_Interface_ForwardMode_VeForwarMode_HALFX_THROUGH
}

type Ifm_Interfaces_Interface_Fr struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Dlcis         *Ifm_Interfaces_Interface_Fr_Dlcis  `protobuf:"bytes,1,opt,name=dlcis,proto3" json:"dlcis,omitempty"`
	IfLink        *Ifm_Interfaces_Interface_Fr_IfLink `protobuf:"bytes,2,opt,name=ifLink,proto3" json:"ifLink,omitempty"`
	IfType        Ifm_Interfaces_Interface_Fr_IfType  `protobuf:"varint,3,opt,name=ifType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Fr_IfType" json:"ifType,omitempty"`
	LmiType       Ifm_Interfaces_Interface_Fr_LmiType `protobuf:"varint,4,opt,name=lmiType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Fr_LmiType" json:"lmiType,omitempty"`
	N391Dte       uint32                              `protobuf:"varint,5,opt,name=n391dte,proto3" json:"n391dte,omitempty"`
	N392Dce       uint64                              `protobuf:"varint,6,opt,name=n392dce,proto3" json:"n392dce,omitempty"`
	N392Dte       uint64                              `protobuf:"varint,7,opt,name=n392dte,proto3" json:"n392dte,omitempty"`
	N393Dce       uint64                              `protobuf:"varint,8,opt,name=n393dce,proto3" json:"n393dce,omitempty"`
	N393Dte       uint32                              `protobuf:"varint,9,opt,name=n393dte,proto3" json:"n393dte,omitempty"`
	T392Dce       uint64                              `protobuf:"varint,10,opt,name=t392dce,proto3" json:"t392dce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Fr) Reset() {
	*x = Ifm_Interfaces_Interface_Fr{}
	mi := &file_huawei_ifm_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Fr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Fr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Fr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Fr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Fr) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 5}
}

func (x *Ifm_Interfaces_Interface_Fr) GetDlcis() *Ifm_Interfaces_Interface_Fr_Dlcis {
	if x != nil {
		return x.Dlcis
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Fr) GetIfLink() *Ifm_Interfaces_Interface_Fr_IfLink {
	if x != nil {
		return x.IfLink
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Fr) GetIfType() Ifm_Interfaces_Interface_Fr_IfType {
	if x != nil {
		return x.IfType
	}
	return Ifm_Interfaces_Interface_Fr_IfType_DCE
}

func (x *Ifm_Interfaces_Interface_Fr) GetLmiType() Ifm_Interfaces_Interface_Fr_LmiType {
	if x != nil {
		return x.LmiType
	}
	return Ifm_Interfaces_Interface_Fr_LmiType_ANSI
}

func (x *Ifm_Interfaces_Interface_Fr) GetN391Dte() uint32 {
	if x != nil {
		return x.N391Dte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Fr) GetN392Dce() uint64 {
	if x != nil {
		return x.N392Dce
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Fr) GetN392Dte() uint64 {
	if x != nil {
		return x.N392Dte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Fr) GetN393Dce() uint64 {
	if x != nil {
		return x.N393Dce
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Fr) GetN393Dte() uint32 {
	if x != nil {
		return x.N393Dte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Fr) GetT392Dce() uint64 {
	if x != nil {
		return x.T392Dce
	}
	return 0
}

type Ifm_Interfaces_Interface_Hdlc struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	DownWhenLoop  bool                                  `protobuf:"varint,1,opt,name=downWhenLoop,proto3" json:"downWhenLoop,omitempty"`
	IfLink        *Ifm_Interfaces_Interface_Hdlc_IfLink `protobuf:"bytes,2,opt,name=ifLink,proto3" json:"ifLink,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Hdlc) Reset() {
	*x = Ifm_Interfaces_Interface_Hdlc{}
	mi := &file_huawei_ifm_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Hdlc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Hdlc) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Hdlc) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Hdlc.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Hdlc) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 6}
}

func (x *Ifm_Interfaces_Interface_Hdlc) GetDownWhenLoop() bool {
	if x != nil {
		return x.DownWhenLoop
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Hdlc) GetIfLink() *Ifm_Interfaces_Interface_Hdlc_IfLink {
	if x != nil {
		return x.IfLink
	}
	return nil
}

type Ifm_Interfaces_Interface_IfCeIpStatiEnable struct {
	state               protoimpl.MessageState                                         `protogen:"open.v1"`
	IfIpStatiEnable     Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable     `protobuf:"varint,1,opt,name=ifIpStatiEnable,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable" json:"ifIpStatiEnable,omitempty"`
	IfIpStatiIpv4Enable Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable `protobuf:"varint,2,opt,name=ifIpStatiIpv4Enable,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable" json:"ifIpStatiIpv4Enable,omitempty"`
	IfIpStatiIpv6Enable Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable `protobuf:"varint,3,opt,name=ifIpStatiIpv6Enable,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable" json:"ifIpStatiIpv6Enable,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatiEnable) Reset() {
	*x = Ifm_Interfaces_Interface_IfCeIpStatiEnable{}
	mi := &file_huawei_ifm_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatiEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfCeIpStatiEnable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfCeIpStatiEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfCeIpStatiEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfCeIpStatiEnable) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 7}
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatiEnable) GetIfIpStatiEnable() Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable {
	if x != nil {
		return x.IfIpStatiEnable
	}
	return Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable_DISABLE
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatiEnable) GetIfIpStatiIpv4Enable() Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable {
	if x != nil {
		return x.IfIpStatiIpv4Enable
	}
	return Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable_DISABLE
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatiEnable) GetIfIpStatiIpv6Enable() Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable {
	if x != nil {
		return x.IfIpStatiIpv6Enable
	}
	return Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable_DISABLE
}

type Ifm_Interfaces_Interface_IfCeIpStatisticsInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReceiveIpv4Bit        uint64                 `protobuf:"varint,1,opt,name=receiveIpv4Bit,proto3" json:"receiveIpv4Bit,omitempty"`
	ReceiveIpv4BitRate    uint64                 `protobuf:"varint,2,opt,name=receiveIpv4BitRate,proto3" json:"receiveIpv4BitRate,omitempty"`
	ReceiveIpv4Packet     uint64                 `protobuf:"varint,3,opt,name=receiveIpv4Packet,proto3" json:"receiveIpv4Packet,omitempty"`
	ReceiveIpv4PacketRate uint64                 `protobuf:"varint,4,opt,name=receiveIpv4PacketRate,proto3" json:"receiveIpv4PacketRate,omitempty"`
	ReceiveIpv6Bit        uint64                 `protobuf:"varint,5,opt,name=receiveIpv6Bit,proto3" json:"receiveIpv6Bit,omitempty"`
	ReceiveIpv6BitRate    uint64                 `protobuf:"varint,6,opt,name=receiveIpv6BitRate,proto3" json:"receiveIpv6BitRate,omitempty"`
	ReceiveIpv6Packet     uint64                 `protobuf:"varint,7,opt,name=receiveIpv6Packet,proto3" json:"receiveIpv6Packet,omitempty"`
	ReceiveIpv6PacketRate uint64                 `protobuf:"varint,8,opt,name=receiveIpv6PacketRate,proto3" json:"receiveIpv6PacketRate,omitempty"`
	SendIpv4Bit           uint64                 `protobuf:"varint,9,opt,name=sendIpv4Bit,proto3" json:"sendIpv4Bit,omitempty"`
	SendIpv4BitRate       uint64                 `protobuf:"varint,10,opt,name=sendIpv4BitRate,proto3" json:"sendIpv4BitRate,omitempty"`
	SendIpv4Packet        uint64                 `protobuf:"varint,11,opt,name=sendIpv4Packet,proto3" json:"sendIpv4Packet,omitempty"`
	SendIpv4PacketRate    uint64                 `protobuf:"varint,12,opt,name=sendIpv4PacketRate,proto3" json:"sendIpv4PacketRate,omitempty"`
	SendIpv6Bit           uint64                 `protobuf:"varint,13,opt,name=sendIpv6Bit,proto3" json:"sendIpv6Bit,omitempty"`
	SendIpv6BitRate       uint64                 `protobuf:"varint,14,opt,name=sendIpv6BitRate,proto3" json:"sendIpv6BitRate,omitempty"`
	SendIpv6Packet        uint64                 `protobuf:"varint,15,opt,name=sendIpv6Packet,proto3" json:"sendIpv6Packet,omitempty"`
	SendIpv6PacketRate    uint64                 `protobuf:"varint,16,opt,name=sendIpv6PacketRate,proto3" json:"sendIpv6PacketRate,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) Reset() {
	*x = Ifm_Interfaces_Interface_IfCeIpStatisticsInfo{}
	mi := &file_huawei_ifm_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfCeIpStatisticsInfo.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 8}
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetReceiveIpv4Bit() uint64 {
	if x != nil {
		return x.ReceiveIpv4Bit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetReceiveIpv4BitRate() uint64 {
	if x != nil {
		return x.ReceiveIpv4BitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetReceiveIpv4Packet() uint64 {
	if x != nil {
		return x.ReceiveIpv4Packet
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetReceiveIpv4PacketRate() uint64 {
	if x != nil {
		return x.ReceiveIpv4PacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetReceiveIpv6Bit() uint64 {
	if x != nil {
		return x.ReceiveIpv6Bit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetReceiveIpv6BitRate() uint64 {
	if x != nil {
		return x.ReceiveIpv6BitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetReceiveIpv6Packet() uint64 {
	if x != nil {
		return x.ReceiveIpv6Packet
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetReceiveIpv6PacketRate() uint64 {
	if x != nil {
		return x.ReceiveIpv6PacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetSendIpv4Bit() uint64 {
	if x != nil {
		return x.SendIpv4Bit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetSendIpv4BitRate() uint64 {
	if x != nil {
		return x.SendIpv4BitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetSendIpv4Packet() uint64 {
	if x != nil {
		return x.SendIpv4Packet
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetSendIpv4PacketRate() uint64 {
	if x != nil {
		return x.SendIpv4PacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetSendIpv6Bit() uint64 {
	if x != nil {
		return x.SendIpv6Bit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetSendIpv6BitRate() uint64 {
	if x != nil {
		return x.SendIpv6BitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetSendIpv6Packet() uint64 {
	if x != nil {
		return x.SendIpv6Packet
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfCeIpStatisticsInfo) GetSendIpv6PacketRate() uint64 {
	if x != nil {
		return x.SendIpv6PacketRate
	}
	return 0
}

type Ifm_Interfaces_Interface_IfControlFlap struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IfCeiling      uint32                 `protobuf:"varint,1,opt,name=ifCeiling,proto3" json:"ifCeiling,omitempty"`
	IfCtrlFlapEnbl bool                   `protobuf:"varint,2,opt,name=ifCtrlFlapEnbl,proto3" json:"ifCtrlFlapEnbl,omitempty"`
	IfDecayNg      uint32                 `protobuf:"varint,3,opt,name=ifDecayNg,proto3" json:"ifDecayNg,omitempty"`
	IfDecayOk      uint32                 `protobuf:"varint,4,opt,name=ifDecayOk,proto3" json:"ifDecayOk,omitempty"`
	IfReuse        uint32                 `protobuf:"varint,5,opt,name=ifReuse,proto3" json:"ifReuse,omitempty"`
	IfSuppress     uint32                 `protobuf:"varint,6,opt,name=ifSuppress,proto3" json:"ifSuppress,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfControlFlap) Reset() {
	*x = Ifm_Interfaces_Interface_IfControlFlap{}
	mi := &file_huawei_ifm_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfControlFlap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfControlFlap) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfControlFlap) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfControlFlap.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfControlFlap) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 9}
}

func (x *Ifm_Interfaces_Interface_IfControlFlap) GetIfCeiling() uint32 {
	if x != nil {
		return x.IfCeiling
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfControlFlap) GetIfCtrlFlapEnbl() bool {
	if x != nil {
		return x.IfCtrlFlapEnbl
	}
	return false
}

func (x *Ifm_Interfaces_Interface_IfControlFlap) GetIfDecayNg() uint32 {
	if x != nil {
		return x.IfDecayNg
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfControlFlap) GetIfDecayOk() uint32 {
	if x != nil {
		return x.IfDecayOk
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfControlFlap) GetIfReuse() uint32 {
	if x != nil {
		return x.IfReuse
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfControlFlap) GetIfSuppress() uint32 {
	if x != nil {
		return x.IfSuppress
	}
	return 0
}

type Ifm_Interfaces_Interface_IfErrorDown struct {
	state          protoimpl.MessageState                              `protogen:"open.v1"`
	ErrorDownCause Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause `protobuf:"varint,1,opt,name=errorDownCause,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause" json:"errorDownCause,omitempty"`
	RecoveryTime   uint32                                              `protobuf:"varint,2,opt,name=recoveryTime,proto3" json:"recoveryTime,omitempty"`
	RemainderTime  uint32                                              `protobuf:"varint,3,opt,name=remainderTime,proto3" json:"remainderTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfErrorDown) Reset() {
	*x = Ifm_Interfaces_Interface_IfErrorDown{}
	mi := &file_huawei_ifm_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfErrorDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfErrorDown) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfErrorDown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfErrorDown.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfErrorDown) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 10}
}

func (x *Ifm_Interfaces_Interface_IfErrorDown) GetErrorDownCause() Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause {
	if x != nil {
		return x.ErrorDownCause
	}
	return Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause_AUTOX_DEFEND
}

func (x *Ifm_Interfaces_Interface_IfErrorDown) GetRecoveryTime() uint32 {
	if x != nil {
		return x.RecoveryTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfErrorDown) GetRemainderTime() uint32 {
	if x != nil {
		return x.RemainderTime
	}
	return 0
}

type Ifm_Interfaces_Interface_IfIpIcmpStatistics struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	DropDirectedBroadcast    uint64                 `protobuf:"varint,1,opt,name=dropDirectedBroadcast,proto3" json:"dropDirectedBroadcast,omitempty"`
	EchoReply                uint64                 `protobuf:"varint,2,opt,name=echoReply,proto3" json:"echoReply,omitempty"`
	EchoRequest              uint64                 `protobuf:"varint,3,opt,name=echoRequest,proto3" json:"echoRequest,omitempty"`
	ForwardDirectedBroadcast uint64                 `protobuf:"varint,4,opt,name=forwardDirectedBroadcast,proto3" json:"forwardDirectedBroadcast,omitempty"`
	InformationReply         uint64                 `protobuf:"varint,5,opt,name=informationReply,proto3" json:"informationReply,omitempty"`
	InformationRequest       uint64                 `protobuf:"varint,6,opt,name=informationRequest,proto3" json:"informationRequest,omitempty"`
	InputByte                uint64                 `protobuf:"varint,7,opt,name=inputByte,proto3" json:"inputByte,omitempty"`
	InputICMPPacket          uint64                 `protobuf:"varint,8,opt,name=inputICMPPacket,proto3" json:"inputICMPPacket,omitempty"`
	InputMulticast           uint64                 `protobuf:"varint,9,opt,name=inputMulticast,proto3" json:"inputMulticast,omitempty"`
	InputPacket              uint64                 `protobuf:"varint,10,opt,name=inputPacket,proto3" json:"inputPacket,omitempty"`
	InvalidTTLPacket         uint64                 `protobuf:"varint,11,opt,name=invalidTTLPacket,proto3" json:"invalidTTLPacket,omitempty"`
	IpHeaderBad              uint64                 `protobuf:"varint,12,opt,name=ipHeaderBad,proto3" json:"ipHeaderBad,omitempty"`
	NetmaskReply             uint64                 `protobuf:"varint,13,opt,name=netmaskReply,proto3" json:"netmaskReply,omitempty"`
	NetmaskRequest           uint64                 `protobuf:"varint,14,opt,name=netmaskRequest,proto3" json:"netmaskRequest,omitempty"`
	OutputByte               uint64                 `protobuf:"varint,15,opt,name=outputByte,proto3" json:"outputByte,omitempty"`
	OutputMulticast          uint64                 `protobuf:"varint,16,opt,name=outputMulticast,proto3" json:"outputMulticast,omitempty"`
	OutputPacket             uint64                 `protobuf:"varint,17,opt,name=outputPacket,proto3" json:"outputPacket,omitempty"`
	ReceiveDirectedBroadcast uint64                 `protobuf:"varint,18,opt,name=receiveDirectedBroadcast,proto3" json:"receiveDirectedBroadcast,omitempty"`
	RouterAdvert             uint64                 `protobuf:"varint,19,opt,name=routerAdvert,proto3" json:"routerAdvert,omitempty"`
	RouterSolicit            uint64                 `protobuf:"varint,20,opt,name=routerSolicit,proto3" json:"routerSolicit,omitempty"`
	RoutingRedirect          uint64                 `protobuf:"varint,21,opt,name=routingRedirect,proto3" json:"routingRedirect,omitempty"`
	SendDirectedBroadcast    uint64                 `protobuf:"varint,22,opt,name=sendDirectedBroadcast,proto3" json:"sendDirectedBroadcast,omitempty"`
	SourceQuench             uint64                 `protobuf:"varint,23,opt,name=sourceQuench,proto3" json:"sourceQuench,omitempty"`
	TimeExceed               uint64                 `protobuf:"varint,24,opt,name=timeExceed,proto3" json:"timeExceed,omitempty"`
	TimestampReply           uint64                 `protobuf:"varint,25,opt,name=timestampReply,proto3" json:"timestampReply,omitempty"`
	TimestampRequest         uint64                 `protobuf:"varint,26,opt,name=timestampRequest,proto3" json:"timestampRequest,omitempty"`
	TtlBeingOne              uint64                 `protobuf:"varint,27,opt,name=ttlBeingOne,proto3" json:"ttlBeingOne,omitempty"`
	UnknownType              uint64                 `protobuf:"varint,28,opt,name=unknownType,proto3" json:"unknownType,omitempty"`
	Unreachable              uint64                 `protobuf:"varint,29,opt,name=unreachable,proto3" json:"unreachable,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_IfIpIcmpStatistics{}
	mi := &file_huawei_ifm_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIpIcmpStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpIcmpStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIpIcmpStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 11}
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetDropDirectedBroadcast() uint64 {
	if x != nil {
		return x.DropDirectedBroadcast
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetEchoReply() uint64 {
	if x != nil {
		return x.EchoReply
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetEchoRequest() uint64 {
	if x != nil {
		return x.EchoRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetForwardDirectedBroadcast() uint64 {
	if x != nil {
		return x.ForwardDirectedBroadcast
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetInformationReply() uint64 {
	if x != nil {
		return x.InformationReply
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetInformationRequest() uint64 {
	if x != nil {
		return x.InformationRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetInputByte() uint64 {
	if x != nil {
		return x.InputByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetInputICMPPacket() uint64 {
	if x != nil {
		return x.InputICMPPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetInputMulticast() uint64 {
	if x != nil {
		return x.InputMulticast
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetInputPacket() uint64 {
	if x != nil {
		return x.InputPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetInvalidTTLPacket() uint64 {
	if x != nil {
		return x.InvalidTTLPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetIpHeaderBad() uint64 {
	if x != nil {
		return x.IpHeaderBad
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetNetmaskReply() uint64 {
	if x != nil {
		return x.NetmaskReply
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetNetmaskRequest() uint64 {
	if x != nil {
		return x.NetmaskRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetOutputByte() uint64 {
	if x != nil {
		return x.OutputByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetOutputMulticast() uint64 {
	if x != nil {
		return x.OutputMulticast
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetOutputPacket() uint64 {
	if x != nil {
		return x.OutputPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetReceiveDirectedBroadcast() uint64 {
	if x != nil {
		return x.ReceiveDirectedBroadcast
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetRouterAdvert() uint64 {
	if x != nil {
		return x.RouterAdvert
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetRouterSolicit() uint64 {
	if x != nil {
		return x.RouterSolicit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetRoutingRedirect() uint64 {
	if x != nil {
		return x.RoutingRedirect
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetSendDirectedBroadcast() uint64 {
	if x != nil {
		return x.SendDirectedBroadcast
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetSourceQuench() uint64 {
	if x != nil {
		return x.SourceQuench
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetTimeExceed() uint64 {
	if x != nil {
		return x.TimeExceed
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetTimestampReply() uint64 {
	if x != nil {
		return x.TimestampReply
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetTimestampRequest() uint64 {
	if x != nil {
		return x.TimestampRequest
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetTtlBeingOne() uint64 {
	if x != nil {
		return x.TtlBeingOne
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetUnknownType() uint64 {
	if x != nil {
		return x.UnknownType
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIpIcmpStatistics) GetUnreachable() uint64 {
	if x != nil {
		return x.Unreachable
	}
	return 0
}

type Ifm_Interfaces_Interface_IfIpStatiCfg struct {
	state           protoimpl.MessageState                              `protogen:"open.v1"`
	IfIpStatiEnable bool                                                `protobuf:"varint,1,opt,name=ifIpStatiEnable,proto3" json:"ifIpStatiEnable,omitempty"`
	IfIpStatiMode   Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode `protobuf:"varint,2,opt,name=ifIpStatiMode,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode" json:"ifIpStatiMode,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfIpStatiCfg) Reset() {
	*x = Ifm_Interfaces_Interface_IfIpStatiCfg{}
	mi := &file_huawei_ifm_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfIpStatiCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIpStatiCfg) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIpStatiCfg) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpStatiCfg.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIpStatiCfg) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 12}
}

func (x *Ifm_Interfaces_Interface_IfIpStatiCfg) GetIfIpStatiEnable() bool {
	if x != nil {
		return x.IfIpStatiEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_IfIpStatiCfg) GetIfIpStatiMode() Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode {
	if x != nil {
		return x.IfIpStatiMode
	}
	return Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode_MAC
}

type Ifm_Interfaces_Interface_IfMru struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mru           uint32                 `protobuf:"varint,1,opt,name=mru,proto3" json:"mru,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfMru) Reset() {
	*x = Ifm_Interfaces_Interface_IfMru{}
	mi := &file_huawei_ifm_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfMru) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfMru) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfMru) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfMru.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfMru) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 13}
}

func (x *Ifm_Interfaces_Interface_IfMru) GetMru() uint32 {
	if x != nil {
		return x.Mru
	}
	return 0
}

type Ifm_Interfaces_Interface_IfMruDiscardStat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DropByte      uint64                 `protobuf:"varint,1,opt,name=dropByte,proto3" json:"dropByte,omitempty"`
	DropPack      uint64                 `protobuf:"varint,2,opt,name=dropPack,proto3" json:"dropPack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfMruDiscardStat) Reset() {
	*x = Ifm_Interfaces_Interface_IfMruDiscardStat{}
	mi := &file_huawei_ifm_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfMruDiscardStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfMruDiscardStat) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfMruDiscardStat) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfMruDiscardStat.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfMruDiscardStat) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 14}
}

func (x *Ifm_Interfaces_Interface_IfMruDiscardStat) GetDropByte() uint64 {
	if x != nil {
		return x.DropByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfMruDiscardStat) GetDropPack() uint64 {
	if x != nil {
		return x.DropPack
	}
	return 0
}

type Ifm_Interfaces_Interface_IfMruStatEnable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MruStatEn     bool                   `protobuf:"varint,1,opt,name=mruStatEn,proto3" json:"mruStatEn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfMruStatEnable) Reset() {
	*x = Ifm_Interfaces_Interface_IfMruStatEnable{}
	mi := &file_huawei_ifm_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfMruStatEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfMruStatEnable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfMruStatEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfMruStatEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfMruStatEnable) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 15}
}

func (x *Ifm_Interfaces_Interface_IfMruStatEnable) GetMruStatEn() bool {
	if x != nil {
		return x.MruStatEn
	}
	return false
}

type Ifm_Interfaces_Interface_IfTcpMss struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tcpmss        uint32                 `protobuf:"varint,1,opt,name=tcpmss,proto3" json:"tcpmss,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfTcpMss) Reset() {
	*x = Ifm_Interfaces_Interface_IfTcpMss{}
	mi := &file_huawei_ifm_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfTcpMss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfTcpMss) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfTcpMss) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfTcpMss.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfTcpMss) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 16}
}

func (x *Ifm_Interfaces_Interface_IfTcpMss) GetTcpmss() uint32 {
	if x != nil {
		return x.Tcpmss
	}
	return 0
}

type Ifm_Interfaces_Interface_IfTrackRtMtg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DownWeight    uint32                 `protobuf:"varint,1,opt,name=downWeight,proto3" json:"downWeight,omitempty"`
	RouteMtgName  string                 `protobuf:"bytes,2,opt,name=routeMtgName,proto3" json:"routeMtgName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfTrackRtMtg) Reset() {
	*x = Ifm_Interfaces_Interface_IfTrackRtMtg{}
	mi := &file_huawei_ifm_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfTrackRtMtg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfTrackRtMtg) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfTrackRtMtg) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfTrackRtMtg.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfTrackRtMtg) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 17}
}

func (x *Ifm_Interfaces_Interface_IfTrackRtMtg) GetDownWeight() uint32 {
	if x != nil {
		return x.DownWeight
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfTrackRtMtg) GetRouteMtgName() string {
	if x != nil {
		return x.RouteMtgName
	}
	return ""
}

type Ifm_Interfaces_Interface_IfTrapThreshold struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	InputResumeRate  uint32                 `protobuf:"varint,1,opt,name=inputResumeRate,proto3" json:"inputResumeRate,omitempty"`
	InputRisingRate  uint32                 `protobuf:"varint,2,opt,name=inputRisingRate,proto3" json:"inputRisingRate,omitempty"`
	OutputResumeRate uint32                 `protobuf:"varint,3,opt,name=outputResumeRate,proto3" json:"outputResumeRate,omitempty"`
	OutputRisingRate uint32                 `protobuf:"varint,4,opt,name=outputRisingRate,proto3" json:"outputRisingRate,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfTrapThreshold) Reset() {
	*x = Ifm_Interfaces_Interface_IfTrapThreshold{}
	mi := &file_huawei_ifm_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfTrapThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfTrapThreshold) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfTrapThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfTrapThreshold.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfTrapThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 18}
}

func (x *Ifm_Interfaces_Interface_IfTrapThreshold) GetInputResumeRate() uint32 {
	if x != nil {
		return x.InputResumeRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfTrapThreshold) GetInputRisingRate() uint32 {
	if x != nil {
		return x.InputRisingRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfTrapThreshold) GetOutputResumeRate() uint32 {
	if x != nil {
		return x.OutputResumeRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfTrapThreshold) GetOutputRisingRate() uint32 {
	if x != nil {
		return x.OutputRisingRate
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4Config struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	AddrCfgType   Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType  `protobuf:"varint,1,opt,name=addrCfgType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType" json:"addrCfgType,omitempty"`
	Am4CfgAddrs   *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs `protobuf:"bytes,2,opt,name=am4CfgAddrs,proto3" json:"am4CfgAddrs,omitempty"`
	UnNumIfName   string                                           `protobuf:"bytes,3,opt,name=unNumIfName,proto3" json:"unNumIfName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv4Config) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4Config{}
	mi := &file_huawei_ifm_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv4Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4Config) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4Config) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Config.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4Config) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 19}
}

func (x *Ifm_Interfaces_Interface_Ipv4Config) GetAddrCfgType() Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType {
	if x != nil {
		return x.AddrCfgType
	}
	return Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType_CONFIG
}

func (x *Ifm_Interfaces_Interface_Ipv4Config) GetAm4CfgAddrs() *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs {
	if x != nil {
		return x.Am4CfgAddrs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4Config) GetUnNumIfName() string {
	if x != nil {
		return x.UnNumIfName
	}
	return ""
}

type Ifm_Interfaces_Interface_Ipv4Oper struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Ipv4Addrs     *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs `protobuf:"bytes,1,opt,name=ipv4Addrs,proto3" json:"ipv4Addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4Oper{}
	mi := &file_huawei_ifm_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4Oper) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4Oper) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Oper.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4Oper) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 20}
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper) GetIpv4Addrs() *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs {
	if x != nil {
		return x.Ipv4Addrs
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6Config struct {
	state          protoimpl.MessageState                           `protogen:"open.v1"`
	Am6CfgAddrs    *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs `protobuf:"bytes,1,opt,name=am6CfgAddrs,proto3" json:"am6CfgAddrs,omitempty"`
	Am6CgaInfos    *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos `protobuf:"bytes,2,opt,name=am6CgaInfos,proto3" json:"am6CgaInfos,omitempty"`
	AutoLinkLocal  bool                                             `protobuf:"varint,3,opt,name=autoLinkLocal,proto3" json:"autoLinkLocal,omitempty"`
	EnableFlag     bool                                             `protobuf:"varint,4,opt,name=enableFlag,proto3" json:"enableFlag,omitempty"`
	IfMtu6         uint32                                           `protobuf:"varint,5,opt,name=ifMtu6,proto3" json:"ifMtu6,omitempty"`
	SpreadMtu6Flag bool                                             `protobuf:"varint,6,opt,name=spreadMtu6Flag,proto3" json:"spreadMtu6Flag,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv6Config) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6Config{}
	mi := &file_huawei_ifm_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv6Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6Config) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6Config) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Config.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6Config) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 21}
}

func (x *Ifm_Interfaces_Interface_Ipv6Config) GetAm6CfgAddrs() *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs {
	if x != nil {
		return x.Am6CfgAddrs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6Config) GetAm6CgaInfos() *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos {
	if x != nil {
		return x.Am6CgaInfos
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6Config) GetAutoLinkLocal() bool {
	if x != nil {
		return x.AutoLinkLocal
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6Config) GetEnableFlag() bool {
	if x != nil {
		return x.EnableFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6Config) GetIfMtu6() uint32 {
	if x != nil {
		return x.IfMtu6
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6Config) GetSpreadMtu6Flag() bool {
	if x != nil {
		return x.SpreadMtu6Flag
	}
	return false
}

type Ifm_Interfaces_Interface_Ipv6Oper struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	IfOperMtu6    uint32                                       `protobuf:"varint,1,opt,name=ifOperMtu6,proto3" json:"ifOperMtu6,omitempty"`
	Ipv6Addrs     *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs `protobuf:"bytes,2,opt,name=ipv6Addrs,proto3" json:"ipv6Addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6Oper{}
	mi := &file_huawei_ifm_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6Oper) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6Oper) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Oper.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6Oper) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 22}
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper) GetIfOperMtu6() uint32 {
	if x != nil {
		return x.IfOperMtu6
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper) GetIpv6Addrs() *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs {
	if x != nil {
		return x.Ipv6Addrs
	}
	return nil
}

type Ifm_Interfaces_Interface_MainIpAddr struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	IfIpAddr      string                                            `protobuf:"bytes,1,opt,name=ifIpAddr,proto3" json:"ifIpAddr,omitempty"`
	IpAddrCfgType Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType `protobuf:"varint,2,opt,name=ipAddrCfgType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType" json:"ipAddrCfgType,omitempty"`
	SubnetMask    string                                            `protobuf:"bytes,3,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_MainIpAddr) Reset() {
	*x = Ifm_Interfaces_Interface_MainIpAddr{}
	mi := &file_huawei_ifm_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_MainIpAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MainIpAddr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MainIpAddr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MainIpAddr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MainIpAddr) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 23}
}

func (x *Ifm_Interfaces_Interface_MainIpAddr) GetIfIpAddr() string {
	if x != nil {
		return x.IfIpAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_MainIpAddr) GetIpAddrCfgType() Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType {
	if x != nil {
		return x.IpAddrCfgType
	}
	return Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType_CONFIG
}

func (x *Ifm_Interfaces_Interface_MainIpAddr) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

type Ifm_Interfaces_Interface_NetSlices struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	NetSlice      []*Ifm_Interfaces_Interface_NetSlices_NetSlice `protobuf:"bytes,1,rep,name=netSlice,proto3" json:"netSlice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_NetSlices) Reset() {
	*x = Ifm_Interfaces_Interface_NetSlices{}
	mi := &file_huawei_ifm_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_NetSlices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_NetSlices) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_NetSlices) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_NetSlices.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_NetSlices) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 24}
}

func (x *Ifm_Interfaces_Interface_NetSlices) GetNetSlice() []*Ifm_Interfaces_Interface_NetSlices_NetSlice {
	if x != nil {
		return x.NetSlice
	}
	return nil
}

type Ifm_Interfaces_Interface_PhyDampIfCfg struct {
	state             protoimpl.MessageState                            `protogen:"open.v1"`
	DampIgnoreGlobal  bool                                              `protobuf:"varint,1,opt,name=dampIgnoreGlobal,proto3" json:"dampIgnoreGlobal,omitempty"`
	IfDampEnable      bool                                              `protobuf:"varint,2,opt,name=ifDampEnable,proto3" json:"ifDampEnable,omitempty"`
	IfDampLevel       Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel `protobuf:"varint,3,opt,name=ifDampLevel,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel" json:"ifDampLevel,omitempty"`
	IfDampTxOff       bool                                              `protobuf:"varint,4,opt,name=ifDampTxOff,proto3" json:"ifDampTxOff,omitempty"`
	IfHalfLifePeriod  uint32                                            `protobuf:"varint,5,opt,name=ifHalfLifePeriod,proto3" json:"ifHalfLifePeriod,omitempty"`
	IfMaxSuppressTime uint32                                            `protobuf:"varint,6,opt,name=ifMaxSuppressTime,proto3" json:"ifMaxSuppressTime,omitempty"`
	IfReuse           uint32                                            `protobuf:"varint,7,opt,name=ifReuse,proto3" json:"ifReuse,omitempty"`
	IfSuppress        uint32                                            `protobuf:"varint,8,opt,name=ifSuppress,proto3" json:"ifSuppress,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) Reset() {
	*x = Ifm_Interfaces_Interface_PhyDampIfCfg{}
	mi := &file_huawei_ifm_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PhyDampIfCfg) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PhyDampIfCfg.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PhyDampIfCfg) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 25}
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) GetDampIgnoreGlobal() bool {
	if x != nil {
		return x.DampIgnoreGlobal
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) GetIfDampEnable() bool {
	if x != nil {
		return x.IfDampEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) GetIfDampLevel() Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel {
	if x != nil {
		return x.IfDampLevel
	}
	return Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel_HEAVY
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) GetIfDampTxOff() bool {
	if x != nil {
		return x.IfDampTxOff
	}
	return false
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) GetIfHalfLifePeriod() uint32 {
	if x != nil {
		return x.IfHalfLifePeriod
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) GetIfMaxSuppressTime() uint32 {
	if x != nil {
		return x.IfMaxSuppressTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) GetIfReuse() uint32 {
	if x != nil {
		return x.IfReuse
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfCfg) GetIfSuppress() uint32 {
	if x != nil {
		return x.IfSuppress
	}
	return 0
}

type Ifm_Interfaces_Interface_PhyDampIfOper struct {
	state             protoimpl.MessageState                                  `protogen:"open.v1"`
	CurrentPenalty    uint32                                                  `protobuf:"varint,1,opt,name=currentPenalty,proto3" json:"currentPenalty,omitempty"`
	DampReuseTime     uint32                                                  `protobuf:"varint,2,opt,name=dampReuseTime,proto3" json:"dampReuseTime,omitempty"`
	IfHalfLifePeriod  uint32                                                  `protobuf:"varint,3,opt,name=ifHalfLifePeriod,proto3" json:"ifHalfLifePeriod,omitempty"`
	IfMaxPenalty      uint32                                                  `protobuf:"varint,4,opt,name=ifMaxPenalty,proto3" json:"ifMaxPenalty,omitempty"`
	IfMaxSuppressTime uint32                                                  `protobuf:"varint,5,opt,name=ifMaxSuppressTime,proto3" json:"ifMaxSuppressTime,omitempty"`
	IfReuse           uint32                                                  `protobuf:"varint,6,opt,name=ifReuse,proto3" json:"ifReuse,omitempty"`
	IfSuppress        uint32                                                  `protobuf:"varint,7,opt,name=ifSuppress,proto3" json:"ifSuppress,omitempty"`
	IfSuppressStatus  Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus `protobuf:"varint,8,opt,name=ifSuppressStatus,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus" json:"ifSuppressStatus,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) Reset() {
	*x = Ifm_Interfaces_Interface_PhyDampIfOper{}
	mi := &file_huawei_ifm_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PhyDampIfOper) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PhyDampIfOper.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PhyDampIfOper) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 26}
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) GetCurrentPenalty() uint32 {
	if x != nil {
		return x.CurrentPenalty
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) GetDampReuseTime() uint32 {
	if x != nil {
		return x.DampReuseTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) GetIfHalfLifePeriod() uint32 {
	if x != nil {
		return x.IfHalfLifePeriod
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) GetIfMaxPenalty() uint32 {
	if x != nil {
		return x.IfMaxPenalty
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) GetIfMaxSuppressTime() uint32 {
	if x != nil {
		return x.IfMaxSuppressTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) GetIfReuse() uint32 {
	if x != nil {
		return x.IfReuse
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) GetIfSuppress() uint32 {
	if x != nil {
		return x.IfSuppress
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_PhyDampIfOper) GetIfSuppressStatus() Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus {
	if x != nil {
		return x.IfSuppressStatus
	}
	return Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus_SUPPRESSED
}

type Ifm_Interfaces_Interface_PhyIfMacStat struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PhyIfMacStatEnable bool                   `protobuf:"varint,1,opt,name=phyIfMacStatEnable,proto3" json:"phyIfMacStatEnable,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_PhyIfMacStat) Reset() {
	*x = Ifm_Interfaces_Interface_PhyIfMacStat{}
	mi := &file_huawei_ifm_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_PhyIfMacStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_PhyIfMacStat) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_PhyIfMacStat) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_PhyIfMacStat.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_PhyIfMacStat) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 27}
}

func (x *Ifm_Interfaces_Interface_PhyIfMacStat) GetPhyIfMacStatEnable() bool {
	if x != nil {
		return x.PhyIfMacStatEnable
	}
	return false
}

type Ifm_Interfaces_Interface_Ppp struct {
	state           protoimpl.MessageState                        `protogen:"open.v1"`
	ChapPaswrd      string                                        `protobuf:"bytes,1,opt,name=chapPaswrd,proto3" json:"chapPaswrd,omitempty"`
	ChapUserName    string                                        `protobuf:"bytes,2,opt,name=chapUserName,proto3" json:"chapUserName,omitempty"`
	CrcParam        *Ifm_Interfaces_Interface_Ppp_CrcParam        `protobuf:"bytes,3,opt,name=crcParam,proto3" json:"crcParam,omitempty"`
	DeadLinkTime    uint32                                        `protobuf:"varint,4,opt,name=deadLinkTime,proto3" json:"deadLinkTime,omitempty"`
	DispPppInfoNode *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode `protobuf:"bytes,5,opt,name=dispPppInfoNode,proto3" json:"dispPppInfoNode,omitempty"`
	DnsAdmitAny     bool                                          `protobuf:"varint,6,opt,name=dnsAdmitAny,proto3" json:"dnsAdmitAny,omitempty"`
	IfChapAuth      bool                                          `protobuf:"varint,7,opt,name=ifChapAuth,proto3" json:"ifChapAuth,omitempty"`
	IfLink          *Ifm_Interfaces_Interface_Ppp_IfLink          `protobuf:"bytes,8,opt,name=ifLink,proto3" json:"ifLink,omitempty"`
	IfPapAuth       bool                                          `protobuf:"varint,9,opt,name=ifPapAuth,proto3" json:"ifPapAuth,omitempty"`
	MagicNumCheck   bool                                          `protobuf:"varint,10,opt,name=magicNumCheck,proto3" json:"magicNumCheck,omitempty"`
	MplscpNego      Ifm_Interfaces_Interface_Ppp_MplscpNego       `protobuf:"varint,11,opt,name=mplscpNego,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_MplscpNego" json:"mplscpNego,omitempty"`
	MruNegoMtd      Ifm_Interfaces_Interface_Ppp_MruNegoMtd       `protobuf:"varint,12,opt,name=mruNegoMtd,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_MruNegoMtd" json:"mruNegoMtd,omitempty"`
	NegoTimeout     uint32                                        `protobuf:"varint,13,opt,name=negoTimeout,proto3" json:"negoTimeout,omitempty"`
	OsicpNego       Ifm_Interfaces_Interface_Ppp_OsicpNego        `protobuf:"varint,14,opt,name=osicpNego,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_OsicpNego" json:"osicpNego,omitempty"`
	PapPaswrd       string                                        `protobuf:"bytes,15,opt,name=papPaswrd,proto3" json:"papPaswrd,omitempty"`
	PapUserName     string                                        `protobuf:"bytes,16,opt,name=papUserName,proto3" json:"papUserName,omitempty"`
	PeerHostRoute   bool                                          `protobuf:"varint,17,opt,name=peerHostRoute,proto3" json:"peerHostRoute,omitempty"`
	PeerIpAddr      string                                        `protobuf:"bytes,18,opt,name=peerIpAddr,proto3" json:"peerIpAddr,omitempty"`
	PppStatistics   *Ifm_Interfaces_Interface_Ppp_PppStatistics   `protobuf:"bytes,19,opt,name=pppStatistics,proto3" json:"pppStatistics,omitempty"`
	PrimDNSAddr     string                                        `protobuf:"bytes,20,opt,name=primDNSAddr,proto3" json:"primDNSAddr,omitempty"`
	SecndDNSAddr    string                                        `protobuf:"bytes,21,opt,name=secndDNSAddr,proto3" json:"secndDNSAddr,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ppp) Reset() {
	*x = Ifm_Interfaces_Interface_Ppp{}
	mi := &file_huawei_ifm_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ppp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ppp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ppp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ppp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28}
}

func (x *Ifm_Interfaces_Interface_Ppp) GetChapPaswrd() string {
	if x != nil {
		return x.ChapPaswrd
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ppp) GetChapUserName() string {
	if x != nil {
		return x.ChapUserName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ppp) GetCrcParam() *Ifm_Interfaces_Interface_Ppp_CrcParam {
	if x != nil {
		return x.CrcParam
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ppp) GetDeadLinkTime() uint32 {
	if x != nil {
		return x.DeadLinkTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp) GetDispPppInfoNode() *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode {
	if x != nil {
		return x.DispPppInfoNode
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ppp) GetDnsAdmitAny() bool {
	if x != nil {
		return x.DnsAdmitAny
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ppp) GetIfChapAuth() bool {
	if x != nil {
		return x.IfChapAuth
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ppp) GetIfLink() *Ifm_Interfaces_Interface_Ppp_IfLink {
	if x != nil {
		return x.IfLink
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ppp) GetIfPapAuth() bool {
	if x != nil {
		return x.IfPapAuth
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ppp) GetMagicNumCheck() bool {
	if x != nil {
		return x.MagicNumCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ppp) GetMplscpNego() Ifm_Interfaces_Interface_Ppp_MplscpNego {
	if x != nil {
		return x.MplscpNego
	}
	return Ifm_Interfaces_Interface_Ppp_MplscpNego_DISABLE
}

func (x *Ifm_Interfaces_Interface_Ppp) GetMruNegoMtd() Ifm_Interfaces_Interface_Ppp_MruNegoMtd {
	if x != nil {
		return x.MruNegoMtd
	}
	return Ifm_Interfaces_Interface_Ppp_MruNegoMtd_IPV4
}

func (x *Ifm_Interfaces_Interface_Ppp) GetNegoTimeout() uint32 {
	if x != nil {
		return x.NegoTimeout
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp) GetOsicpNego() Ifm_Interfaces_Interface_Ppp_OsicpNego {
	if x != nil {
		return x.OsicpNego
	}
	return Ifm_Interfaces_Interface_Ppp_OsicpNego_DISABLE
}

func (x *Ifm_Interfaces_Interface_Ppp) GetPapPaswrd() string {
	if x != nil {
		return x.PapPaswrd
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ppp) GetPapUserName() string {
	if x != nil {
		return x.PapUserName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ppp) GetPeerHostRoute() bool {
	if x != nil {
		return x.PeerHostRoute
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ppp) GetPeerIpAddr() string {
	if x != nil {
		return x.PeerIpAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ppp) GetPppStatistics() *Ifm_Interfaces_Interface_Ppp_PppStatistics {
	if x != nil {
		return x.PppStatistics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ppp) GetPrimDNSAddr() string {
	if x != nil {
		return x.PrimDNSAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ppp) GetSecndDNSAddr() string {
	if x != nil {
		return x.SecndDNSAddr
	}
	return ""
}

type Ifm_Interfaces_Interface_RemoteIfStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SendMutiPacket uint64                 `protobuf:"varint,1,opt,name=sendMutiPacket,proto3" json:"sendMutiPacket,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_RemoteIfStat) Reset() {
	*x = Ifm_Interfaces_Interface_RemoteIfStat{}
	mi := &file_huawei_ifm_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_RemoteIfStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_RemoteIfStat) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_RemoteIfStat) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_RemoteIfStat.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_RemoteIfStat) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 29}
}

func (x *Ifm_Interfaces_Interface_RemoteIfStat) GetSendMutiPacket() uint64 {
	if x != nil {
		return x.SendMutiPacket
	}
	return 0
}

type Ifm_Interfaces_Interface_TransAlarmDown struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Oof           Ifm_Interfaces_Interface_TransAlarmDown_Oof  `protobuf:"varint,1,opt,name=oof,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_TransAlarmDown_Oof" json:"oof,omitempty"`
	Pais          Ifm_Interfaces_Interface_TransAlarmDown_Pais `protobuf:"varint,2,opt,name=pais,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_TransAlarmDown_Pais" json:"pais,omitempty"`
	Prdi          Ifm_Interfaces_Interface_TransAlarmDown_Prdi `protobuf:"varint,3,opt,name=prdi,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_TransAlarmDown_Prdi" json:"prdi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_TransAlarmDown) Reset() {
	*x = Ifm_Interfaces_Interface_TransAlarmDown{}
	mi := &file_huawei_ifm_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_TransAlarmDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TransAlarmDown) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TransAlarmDown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TransAlarmDown.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TransAlarmDown) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 30}
}

func (x *Ifm_Interfaces_Interface_TransAlarmDown) GetOof() Ifm_Interfaces_Interface_TransAlarmDown_Oof {
	if x != nil {
		return x.Oof
	}
	return Ifm_Interfaces_Interface_TransAlarmDown_Oof_DISABLE
}

func (x *Ifm_Interfaces_Interface_TransAlarmDown) GetPais() Ifm_Interfaces_Interface_TransAlarmDown_Pais {
	if x != nil {
		return x.Pais
	}
	return Ifm_Interfaces_Interface_TransAlarmDown_Pais_DISABLE
}

func (x *Ifm_Interfaces_Interface_TransAlarmDown) GetPrdi() Ifm_Interfaces_Interface_TransAlarmDown_Prdi {
	if x != nil {
		return x.Prdi
	}
	return Ifm_Interfaces_Interface_TransAlarmDown_Prdi_DISABLE
}

type Ifm_Interfaces_Interface_VPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VBoardID      uint32                 `protobuf:"varint,1,opt,name=vBoardID,proto3" json:"vBoardID,omitempty"`
	VPortID       uint32                 `protobuf:"varint,2,opt,name=vPortID,proto3" json:"vPortID,omitempty"`
	VnfcName      string                 `protobuf:"bytes,3,opt,name=vnfcName,proto3" json:"vnfcName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_VPosition) Reset() {
	*x = Ifm_Interfaces_Interface_VPosition{}
	mi := &file_huawei_ifm_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_VPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VPosition) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VPosition) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VPosition.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VPosition) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 31}
}

func (x *Ifm_Interfaces_Interface_VPosition) GetVBoardID() uint32 {
	if x != nil {
		return x.VBoardID
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_VPosition) GetVPortID() uint32 {
	if x != nil {
		return x.VPortID
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_VPosition) GetVnfcName() string {
	if x != nil {
		return x.VnfcName
	}
	return ""
}

type Ifm_Interfaces_Interface_VbdIfForwardMode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VbdIfFwdLoop  bool                   `protobuf:"varint,1,opt,name=vbdIfFwdLoop,proto3" json:"vbdIfFwdLoop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_VbdIfForwardMode) Reset() {
	*x = Ifm_Interfaces_Interface_VbdIfForwardMode{}
	mi := &file_huawei_ifm_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_VbdIfForwardMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VbdIfForwardMode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VbdIfForwardMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VbdIfForwardMode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VbdIfForwardMode) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 32}
}

func (x *Ifm_Interfaces_Interface_VbdIfForwardMode) GetVbdIfFwdLoop() bool {
	if x != nil {
		return x.VbdIfFwdLoop
	}
	return false
}

type Ifm_Interfaces_Interface_VeGroup struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	VeGroupId     uint32                                    `protobuf:"varint,1,opt,name=veGroupId,proto3" json:"veGroupId,omitempty"`
	VeIfType      Ifm_Interfaces_Interface_VeGroup_VeIfType `protobuf:"varint,2,opt,name=veIfType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_VeGroup_VeIfType" json:"veIfType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_VeGroup) Reset() {
	*x = Ifm_Interfaces_Interface_VeGroup{}
	mi := &file_huawei_ifm_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_VeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VeGroup) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VeGroup.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VeGroup) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 33}
}

func (x *Ifm_Interfaces_Interface_VeGroup) GetVeGroupId() uint32 {
	if x != nil {
		return x.VeGroupId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_VeGroup) GetVeIfType() Ifm_Interfaces_Interface_VeGroup_VeIfType {
	if x != nil {
		return x.VeIfType
	}
	return Ifm_Interfaces_Interface_VeGroup_VeIfType_INVALID
}

type Ifm_Interfaces_Interface_VeMemberSlot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VeSlotId      string                 `protobuf:"bytes,1,opt,name=veSlotId,proto3" json:"veSlotId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_VeMemberSlot) Reset() {
	*x = Ifm_Interfaces_Interface_VeMemberSlot{}
	mi := &file_huawei_ifm_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_VeMemberSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VeMemberSlot) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VeMemberSlot) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VeMemberSlot.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VeMemberSlot) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 34}
}

func (x *Ifm_Interfaces_Interface_VeMemberSlot) GetVeSlotId() string {
	if x != nil {
		return x.VeSlotId
	}
	return ""
}

type Ifm_Interfaces_Interface_VllPwLoopChk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoopCheckTime uint32                 `protobuf:"varint,1,opt,name=loopCheckTime,proto3" json:"loopCheckTime,omitempty"`
	LoopEnable    bool                   `protobuf:"varint,2,opt,name=loopEnable,proto3" json:"loopEnable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_VllPwLoopChk) Reset() {
	*x = Ifm_Interfaces_Interface_VllPwLoopChk{}
	mi := &file_huawei_ifm_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_VllPwLoopChk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VllPwLoopChk) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VllPwLoopChk) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VllPwLoopChk.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VllPwLoopChk) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 35}
}

func (x *Ifm_Interfaces_Interface_VllPwLoopChk) GetLoopCheckTime() uint32 {
	if x != nil {
		return x.LoopCheckTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_VllPwLoopChk) GetLoopEnable() bool {
	if x != nil {
		return x.LoopEnable
	}
	return false
}

type Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	StatisticsMacIpv4 uint64                 `protobuf:"varint,1,opt,name=statisticsMacIpv4,proto3" json:"statisticsMacIpv4,omitempty"`
	StatisticsMacIpv6 uint64                 `protobuf:"varint,2,opt,name=statisticsMacIpv6,proto3" json:"statisticsMacIpv6,omitempty"`
	StatisticsMtuIpv4 uint64                 `protobuf:"varint,3,opt,name=statisticsMtuIpv4,proto3" json:"statisticsMtuIpv4,omitempty"`
	StatisticsMtuIpv6 uint64                 `protobuf:"varint,4,opt,name=statisticsMtuIpv6,proto3" json:"statisticsMtuIpv6,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat) Reset() {
	*x = Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat{}
	mi := &file_huawei_ifm_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat) GetStatisticsMacIpv4() uint64 {
	if x != nil {
		return x.StatisticsMacIpv4
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat) GetStatisticsMacIpv6() uint64 {
	if x != nil {
		return x.StatisticsMacIpv6
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat) GetStatisticsMtuIpv4() uint64 {
	if x != nil {
		return x.StatisticsMtuIpv4
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat) GetStatisticsMtuIpv6() uint64 {
	if x != nil {
		return x.StatisticsMtuIpv6
	}
	return 0
}

type Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RxAlignment   uint64                 `protobuf:"varint,1,opt,name=rxAlignment,proto3" json:"rxAlignment,omitempty"`
	RxCRC         uint64                 `protobuf:"varint,2,opt,name=rxCRC,proto3" json:"rxCRC,omitempty"`
	RxFragment    uint64                 `protobuf:"varint,3,opt,name=rxFragment,proto3" json:"rxFragment,omitempty"`
	RxInrangeLen  uint64                 `protobuf:"varint,4,opt,name=rxInrangeLen,proto3" json:"rxInrangeLen,omitempty"`
	RxJabber      uint64                 `protobuf:"varint,5,opt,name=rxJabber,proto3" json:"rxJabber,omitempty"`
	RxJumboOctets uint64                 `protobuf:"varint,6,opt,name=rxJumboOctets,proto3" json:"rxJumboOctets,omitempty"`
	RxLong        uint64                 `protobuf:"varint,7,opt,name=rxLong,proto3" json:"rxLong,omitempty"`
	RxOverrun     uint64                 `protobuf:"varint,8,opt,name=rxOverrun,proto3" json:"rxOverrun,omitempty"`
	RxPause       uint64                 `protobuf:"varint,9,opt,name=rxPause,proto3" json:"rxPause,omitempty"`
	RxSymbol      uint64                 `protobuf:"varint,10,opt,name=rxSymbol,proto3" json:"rxSymbol,omitempty"`
	RxUndersize   uint64                 `protobuf:"varint,11,opt,name=rxUndersize,proto3" json:"rxUndersize,omitempty"`
	TxJumboOctets uint64                 `protobuf:"varint,12,opt,name=txJumboOctets,proto3" json:"txJumboOctets,omitempty"`
	TxLost        uint64                 `protobuf:"varint,13,opt,name=txLost,proto3" json:"txLost,omitempty"`
	TxOverrun     uint64                 `protobuf:"varint,14,opt,name=txOverrun,proto3" json:"txOverrun,omitempty"`
	TxPause       uint64                 `protobuf:"varint,15,opt,name=txPause,proto3" json:"txPause,omitempty"`
	TxSystem      uint64                 `protobuf:"varint,16,opt,name=txSystem,proto3" json:"txSystem,omitempty"`
	TxUnderrun    uint64                 `protobuf:"varint,17,opt,name=txUnderrun,proto3" json:"txUnderrun,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) Reset() {
	*x = Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts{}
	mi := &file_huawei_ifm_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxAlignment() uint64 {
	if x != nil {
		return x.RxAlignment
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxCRC() uint64 {
	if x != nil {
		return x.RxCRC
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxFragment() uint64 {
	if x != nil {
		return x.RxFragment
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxInrangeLen() uint64 {
	if x != nil {
		return x.RxInrangeLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxJabber() uint64 {
	if x != nil {
		return x.RxJabber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxJumboOctets() uint64 {
	if x != nil {
		return x.RxJumboOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxLong() uint64 {
	if x != nil {
		return x.RxLong
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxOverrun() uint64 {
	if x != nil {
		return x.RxOverrun
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxPause() uint64 {
	if x != nil {
		return x.RxPause
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxSymbol() uint64 {
	if x != nil {
		return x.RxSymbol
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetRxUndersize() uint64 {
	if x != nil {
		return x.RxUndersize
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetTxJumboOctets() uint64 {
	if x != nil {
		return x.TxJumboOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetTxLost() uint64 {
	if x != nil {
		return x.TxLost
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetTxOverrun() uint64 {
	if x != nil {
		return x.TxOverrun
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetTxPause() uint64 {
	if x != nil {
		return x.TxPause
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetTxSystem() uint64 {
	if x != nil {
		return x.TxSystem
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts) GetTxUnderrun() uint64 {
	if x != nil {
		return x.TxUnderrun
	}
	return 0
}

type Ifm_Interfaces_Interface_Fr_Dlcis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dlci          uint32                 `protobuf:"varint,1,opt,name=dlci,proto3" json:"dlci,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Fr_Dlcis) Reset() {
	*x = Ifm_Interfaces_Interface_Fr_Dlcis{}
	mi := &file_huawei_ifm_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Fr_Dlcis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Fr_Dlcis) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Fr_Dlcis) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Fr_Dlcis.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Fr_Dlcis) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 5, 0}
}

func (x *Ifm_Interfaces_Interface_Fr_Dlcis) GetDlci() uint32 {
	if x != nil {
		return x.Dlci
	}
	return 0
}

type Ifm_Interfaces_Interface_Fr_IfLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeInternal  uint32                 `protobuf:"varint,1,opt,name=timeInternal,proto3" json:"timeInternal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Fr_IfLink) Reset() {
	*x = Ifm_Interfaces_Interface_Fr_IfLink{}
	mi := &file_huawei_ifm_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Fr_IfLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Fr_IfLink) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Fr_IfLink) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Fr_IfLink.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Fr_IfLink) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 5, 1}
}

func (x *Ifm_Interfaces_Interface_Fr_IfLink) GetTimeInternal() uint32 {
	if x != nil {
		return x.TimeInternal
	}
	return 0
}

type Ifm_Interfaces_Interface_Hdlc_IfLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeInternal  uint32                 `protobuf:"varint,1,opt,name=timeInternal,proto3" json:"timeInternal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Hdlc_IfLink) Reset() {
	*x = Ifm_Interfaces_Interface_Hdlc_IfLink{}
	mi := &file_huawei_ifm_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Hdlc_IfLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Hdlc_IfLink) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Hdlc_IfLink) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Hdlc_IfLink.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Hdlc_IfLink) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 6, 0}
}

func (x *Ifm_Interfaces_Interface_Hdlc_IfLink) GetTimeInternal() uint32 {
	if x != nil {
		return x.TimeInternal
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	Am4CfgAddr    []*Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr `protobuf:"bytes,1,rep,name=am4CfgAddr,proto3" json:"am4CfgAddr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs{}
	mi := &file_huawei_ifm_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 19, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs) GetAm4CfgAddr() []*Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr {
	if x != nil {
		return x.Am4CfgAddr
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr struct {
	state         protoimpl.MessageState                                              `protogen:"open.v1"`
	AddrType      Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType `protobuf:"varint,1,opt,name=addrType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType" json:"addrType,omitempty"`
	IfIpAddr      string                                                              `protobuf:"bytes,2,opt,name=ifIpAddr,proto3" json:"ifIpAddr,omitempty"`
	SubnetMask    string                                                              `protobuf:"bytes,3,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	Tag           uint32                                                              `protobuf:"varint,5,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr{}
	mi := &file_huawei_ifm_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 19, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr) GetAddrType() Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType {
	if x != nil {
		return x.AddrType
	}
	return Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType_MAIN
}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr) GetIfIpAddr() string {
	if x != nil {
		return x.IfIpAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	Ipv4Addr      []*Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr `protobuf:"bytes,1,rep,name=ipv4Addr,proto3" json:"ipv4Addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs{}
	mi := &file_huawei_ifm_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 20, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs) GetIpv4Addr() []*Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr {
	if x != nil {
		return x.Ipv4Addr
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	AddrType      Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType `protobuf:"varint,1,opt,name=addrType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType" json:"addrType,omitempty"`
	IfIpAddr      string                                                        `protobuf:"bytes,2,opt,name=ifIpAddr,proto3" json:"ifIpAddr,omitempty"`
	IsIpBlock     bool                                                          `protobuf:"varint,3,opt,name=isIpBlock,proto3" json:"isIpBlock,omitempty"`
	SubnetMask    string                                                        `protobuf:"bytes,4,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	Tag           uint32                                                        `protobuf:"varint,5,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr{}
	mi := &file_huawei_ifm_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 20, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) GetAddrType() Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType {
	if x != nil {
		return x.AddrType
	}
	return Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType_MAIN
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) GetIfIpAddr() string {
	if x != nil {
		return x.IfIpAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) GetIsIpBlock() bool {
	if x != nil {
		return x.IsIpBlock
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) GetSubnetMask() string {
	if x != nil {
		return x.SubnetMask
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	Am6CfgAddr    []*Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr `protobuf:"bytes,1,rep,name=am6CfgAddr,proto3" json:"am6CfgAddr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs{}
	mi := &file_huawei_ifm_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 21, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs) GetAm6CfgAddr() []*Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr {
	if x != nil {
		return x.Am6CfgAddr
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	Am6CgaInfo    []*Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo `protobuf:"bytes,1,rep,name=am6CgaInfo,proto3" json:"am6CgaInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos{}
	mi := &file_huawei_ifm_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 21, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos) GetAm6CgaInfo() []*Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo {
	if x != nil {
		return x.Am6CgaInfo
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr struct {
	state          protoimpl.MessageState                                                 `protogen:"open.v1"`
	AddrPrefixLen  uint32                                                                 `protobuf:"varint,1,opt,name=addrPrefixLen,proto3" json:"addrPrefixLen,omitempty"`
	AddrType6      Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6   `protobuf:"varint,2,opt,name=addrType6,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6" json:"addrType6,omitempty"`
	CollisionCount uint32                                                                 `protobuf:"varint,3,opt,name=collisionCount,proto3" json:"collisionCount,omitempty"`
	IfIDGenType    Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType `protobuf:"varint,4,opt,name=ifIDGenType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType" json:"ifIDGenType,omitempty"`
	IfIp6Addr      string                                                                 `protobuf:"bytes,5,opt,name=ifIp6Addr,proto3" json:"ifIp6Addr,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr{}
	mi := &file_huawei_ifm_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 21, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) GetAddrPrefixLen() uint32 {
	if x != nil {
		return x.AddrPrefixLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) GetAddrType6() Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6 {
	if x != nil {
		return x.AddrType6
	}
	return Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6_ANYCAST
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) GetCollisionCount() uint32 {
	if x != nil {
		return x.CollisionCount
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) GetIfIDGenType() Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType {
	if x != nil {
		return x.IfIDGenType
	}
	return Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType_CGA
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr) GetIfIp6Addr() string {
	if x != nil {
		return x.IfIp6Addr
	}
	return ""
}

type Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Modifier      string                 `protobuf:"bytes,1,opt,name=modifier,proto3" json:"modifier,omitempty"`
	RsaKeyLabel   string                 `protobuf:"bytes,2,opt,name=rsaKeyLabel,proto3" json:"rsaKeyLabel,omitempty"`
	SecLevel      uint32                 `protobuf:"varint,3,opt,name=secLevel,proto3" json:"secLevel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo{}
	mi := &file_huawei_ifm_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 21, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo) GetModifier() string {
	if x != nil {
		return x.Modifier
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo) GetRsaKeyLabel() string {
	if x != nil {
		return x.RsaKeyLabel
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo) GetSecLevel() uint32 {
	if x != nil {
		return x.SecLevel
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	Ipv6Addr      []*Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr `protobuf:"bytes,1,rep,name=ipv6Addr,proto3" json:"ipv6Addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs{}
	mi := &file_huawei_ifm_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 22, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs) GetIpv6Addr() []*Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr {
	if x != nil {
		return x.Ipv6Addr
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr struct {
	state          protoimpl.MessageState                                           `protogen:"open.v1"`
	AddrPrefixLen  uint32                                                           `protobuf:"varint,1,opt,name=addrPrefixLen,proto3" json:"addrPrefixLen,omitempty"`
	AddrType6      Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6   `protobuf:"varint,2,opt,name=addrType6,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6" json:"addrType6,omitempty"`
	CollisionCount uint32                                                           `protobuf:"varint,3,opt,name=collisionCount,proto3" json:"collisionCount,omitempty"`
	IfIDGenType    Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType `protobuf:"varint,4,opt,name=ifIDGenType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType" json:"ifIDGenType,omitempty"`
	IfIp6Addr      string                                                           `protobuf:"bytes,5,opt,name=ifIp6Addr,proto3" json:"ifIp6Addr,omitempty"`
	IsIpBlock      bool                                                             `protobuf:"varint,6,opt,name=isIpBlock,proto3" json:"isIpBlock,omitempty"`
	Status         Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status      `protobuf:"varint,7,opt,name=status,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status" json:"status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr{}
	mi := &file_huawei_ifm_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 22, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) GetAddrPrefixLen() uint32 {
	if x != nil {
		return x.AddrPrefixLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) GetAddrType6() Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6 {
	if x != nil {
		return x.AddrType6
	}
	return Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6_ANYCAST
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) GetCollisionCount() uint32 {
	if x != nil {
		return x.CollisionCount
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) GetIfIDGenType() Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType {
	if x != nil {
		return x.IfIDGenType
	}
	return Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType_CGA
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) GetIfIp6Addr() string {
	if x != nil {
		return x.IfIp6Addr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) GetIsIpBlock() bool {
	if x != nil {
		return x.IsIpBlock
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr) GetStatus() Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status {
	if x != nil {
		return x.Status
	}
	return Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status_DUPLICATE
}

type Ifm_Interfaces_Interface_NetSlices_NetSlice struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SliceInstanceId   uint32                 `protobuf:"varint,1,opt,name=sliceInstanceId,proto3" json:"sliceInstanceId,omitempty"`
	SliceInstanceName string                 `protobuf:"bytes,2,opt,name=sliceInstanceName,proto3" json:"sliceInstanceName,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_NetSlices_NetSlice) Reset() {
	*x = Ifm_Interfaces_Interface_NetSlices_NetSlice{}
	mi := &file_huawei_ifm_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_NetSlices_NetSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_NetSlices_NetSlice) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_NetSlices_NetSlice) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_NetSlices_NetSlice.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_NetSlices_NetSlice) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 24, 0}
}

func (x *Ifm_Interfaces_Interface_NetSlices_NetSlice) GetSliceInstanceId() uint32 {
	if x != nil {
		return x.SliceInstanceId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_NetSlices_NetSlice) GetSliceInstanceName() string {
	if x != nil {
		return x.SliceInstanceName
	}
	return ""
}

type Ifm_Interfaces_Interface_Ppp_CrcParam struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	BitAlaCof     uint32                                        `protobuf:"varint,1,opt,name=bitAlaCof,proto3" json:"bitAlaCof,omitempty"`
	BitAlaPow     uint32                                        `protobuf:"varint,2,opt,name=bitAlaPow,proto3" json:"bitAlaPow,omitempty"`
	BitResCof     uint32                                        `protobuf:"varint,3,opt,name=bitResCof,proto3" json:"bitResCof,omitempty"`
	BitResPow     uint32                                        `protobuf:"varint,4,opt,name=bitResPow,proto3" json:"bitResPow,omitempty"`
	ChildAlarmNum uint32                                        `protobuf:"varint,5,opt,name=childAlarmNum,proto3" json:"childAlarmNum,omitempty"`
	ChildMaxNum   uint32                                        `protobuf:"varint,6,opt,name=childMaxNum,proto3" json:"childMaxNum,omitempty"`
	ChildResmNum  uint32                                        `protobuf:"varint,7,opt,name=childResmNum,proto3" json:"childResmNum,omitempty"`
	CrcBit        Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit  `protobuf:"varint,8,opt,name=crcBit,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit" json:"crcBit,omitempty"`
	ErrType       Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType `protobuf:"varint,9,opt,name=errType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType" json:"errType,omitempty"`
	HighThreshold uint32                                        `protobuf:"varint,10,opt,name=highThreshold,proto3" json:"highThreshold,omitempty"`
	Interval      uint32                                        `protobuf:"varint,11,opt,name=interval,proto3" json:"interval,omitempty"`
	LowThreshold  uint32                                        `protobuf:"varint,12,opt,name=lowThreshold,proto3" json:"lowThreshold,omitempty"`
	PktAlaCof     uint32                                        `protobuf:"varint,13,opt,name=pktAlaCof,proto3" json:"pktAlaCof,omitempty"`
	PktAlaPow     uint32                                        `protobuf:"varint,14,opt,name=pktAlaPow,proto3" json:"pktAlaPow,omitempty"`
	PktResCof     uint32                                        `protobuf:"varint,15,opt,name=pktResCof,proto3" json:"pktResCof,omitempty"`
	PktResPow     uint32                                        `protobuf:"varint,16,opt,name=pktResPow,proto3" json:"pktResPow,omitempty"`
	SampleFactor  uint32                                        `protobuf:"varint,17,opt,name=sampleFactor,proto3" json:"sampleFactor,omitempty"`
	Shutdown      bool                                          `protobuf:"varint,18,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) Reset() {
	*x = Ifm_Interfaces_Interface_Ppp_CrcParam{}
	mi := &file_huawei_ifm_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ppp_CrcParam) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_CrcParam.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ppp_CrcParam) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 0}
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetBitAlaCof() uint32 {
	if x != nil {
		return x.BitAlaCof
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetBitAlaPow() uint32 {
	if x != nil {
		return x.BitAlaPow
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetBitResCof() uint32 {
	if x != nil {
		return x.BitResCof
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetBitResPow() uint32 {
	if x != nil {
		return x.BitResPow
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetChildAlarmNum() uint32 {
	if x != nil {
		return x.ChildAlarmNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetChildMaxNum() uint32 {
	if x != nil {
		return x.ChildMaxNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetChildResmNum() uint32 {
	if x != nil {
		return x.ChildResmNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetCrcBit() Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit {
	if x != nil {
		return x.CrcBit
	}
	return Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit_X_16
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetErrType() Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType {
	if x != nil {
		return x.ErrType
	}
	return Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType_BITERRRATIO
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetHighThreshold() uint32 {
	if x != nil {
		return x.HighThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetLowThreshold() uint32 {
	if x != nil {
		return x.LowThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetPktAlaCof() uint32 {
	if x != nil {
		return x.PktAlaCof
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetPktAlaPow() uint32 {
	if x != nil {
		return x.PktAlaPow
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetPktResCof() uint32 {
	if x != nil {
		return x.PktResCof
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetPktResPow() uint32 {
	if x != nil {
		return x.PktResPow
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetSampleFactor() uint32 {
	if x != nil {
		return x.SampleFactor
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_CrcParam) GetShutdown() bool {
	if x != nil {
		return x.Shutdown
	}
	return false
}

type Ifm_Interfaces_Interface_Ppp_DispPppInfoNode struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	DownEvents    *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents `protobuf:"bytes,1,opt,name=downEvents,proto3" json:"downEvents,omitempty"`
	Ip6CpState    Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState  `protobuf:"varint,2,opt,name=ip6cpState,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState" json:"ip6cpState,omitempty"`
	IpcpState     Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState   `protobuf:"varint,3,opt,name=ipcpState,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState" json:"ipcpState,omitempty"`
	LcpState      Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState    `protobuf:"varint,4,opt,name=lcpState,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState" json:"lcpState,omitempty"`
	LocalMru      uint32                                                   `protobuf:"varint,5,opt,name=localMru,proto3" json:"localMru,omitempty"`
	MagicNum      uint32                                                   `protobuf:"varint,6,opt,name=magicNum,proto3" json:"magicNum,omitempty"`
	MplscpState   Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState `protobuf:"varint,7,opt,name=mplscpState,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState" json:"mplscpState,omitempty"`
	NegoTimeOut   uint32                                                   `protobuf:"varint,8,opt,name=negoTimeOut,proto3" json:"negoTimeOut,omitempty"`
	OsicpState    Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState  `protobuf:"varint,9,opt,name=osicpState,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState" json:"osicpState,omitempty"`
	PeerIpaddr    string                                                   `protobuf:"bytes,10,opt,name=peerIpaddr,proto3" json:"peerIpaddr,omitempty"`
	PeerMru       uint32                                                   `protobuf:"varint,11,opt,name=peerMru,proto3" json:"peerMru,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) Reset() {
	*x = Ifm_Interfaces_Interface_Ppp_DispPppInfoNode{}
	mi := &file_huawei_ifm_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_DispPppInfoNode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1}
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetDownEvents() *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents {
	if x != nil {
		return x.DownEvents
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetIp6CpState() Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState {
	if x != nil {
		return x.Ip6CpState
	}
	return Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState_ACKRCVD
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetIpcpState() Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState {
	if x != nil {
		return x.IpcpState
	}
	return Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState_ACKRCVD
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetLcpState() Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState {
	if x != nil {
		return x.LcpState
	}
	return Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState_ACKRCVD
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetLocalMru() uint32 {
	if x != nil {
		return x.LocalMru
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetMagicNum() uint32 {
	if x != nil {
		return x.MagicNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetMplscpState() Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState {
	if x != nil {
		return x.MplscpState
	}
	return Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState_ACKRCVD
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetNegoTimeOut() uint32 {
	if x != nil {
		return x.NegoTimeOut
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetOsicpState() Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState {
	if x != nil {
		return x.OsicpState
	}
	return Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState_ACKRCVD
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetPeerIpaddr() string {
	if x != nil {
		return x.PeerIpaddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode) GetPeerMru() uint32 {
	if x != nil {
		return x.PeerMru
	}
	return 0
}

type Ifm_Interfaces_Interface_Ppp_IfLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeInternal  uint32                 `protobuf:"varint,1,opt,name=timeInternal,proto3" json:"timeInternal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ppp_IfLink) Reset() {
	*x = Ifm_Interfaces_Interface_Ppp_IfLink{}
	mi := &file_huawei_ifm_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ppp_IfLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ppp_IfLink) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ppp_IfLink) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_IfLink.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ppp_IfLink) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 2}
}

func (x *Ifm_Interfaces_Interface_Ppp_IfLink) GetTimeInternal() uint32 {
	if x != nil {
		return x.TimeInternal
	}
	return 0
}

type Ifm_Interfaces_Interface_Ppp_PppStatistics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InputCrcPkts   uint32                 `protobuf:"varint,1,opt,name=inputCrcPkts,proto3" json:"inputCrcPkts,omitempty"`
	InputLongPkts  uint32                 `protobuf:"varint,2,opt,name=inputLongPkts,proto3" json:"inputLongPkts,omitempty"`
	InputLostPkts  uint32                 `protobuf:"varint,3,opt,name=inputLostPkts,proto3" json:"inputLostPkts,omitempty"`
	InputShortPkts uint32                 `protobuf:"varint,4,opt,name=inputShortPkts,proto3" json:"inputShortPkts,omitempty"`
	OutLostPkts    uint32                 `protobuf:"varint,5,opt,name=outLostPkts,proto3" json:"outLostPkts,omitempty"`
	OutOverPkts    uint32                 `protobuf:"varint,6,opt,name=outOverPkts,proto3" json:"outOverPkts,omitempty"`
	OutUnderPkts   uint32                 `protobuf:"varint,7,opt,name=outUnderPkts,proto3" json:"outUnderPkts,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_Ppp_PppStatistics{}
	mi := &file_huawei_ifm_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ppp_PppStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_PppStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ppp_PppStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 3}
}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) GetInputCrcPkts() uint32 {
	if x != nil {
		return x.InputCrcPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) GetInputLongPkts() uint32 {
	if x != nil {
		return x.InputLongPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) GetInputLostPkts() uint32 {
	if x != nil {
		return x.InputLostPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) GetInputShortPkts() uint32 {
	if x != nil {
		return x.InputShortPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) GetOutLostPkts() uint32 {
	if x != nil {
		return x.OutLostPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) GetOutOverPkts() uint32 {
	if x != nil {
		return x.OutOverPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ppp_PppStatistics) GetOutUnderPkts() uint32 {
	if x != nil {
		return x.OutUnderPkts
	}
	return 0
}

type Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents struct {
	state         protoimpl.MessageState                                               `protogen:"open.v1"`
	DownEvent     []*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent `protobuf:"bytes,1,rep,name=downEvent,proto3" json:"downEvent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents) Reset() {
	*x = Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents{}
	mi := &file_huawei_ifm_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents) GetDownEvent() []*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent {
	if x != nil {
		return x.DownEvent
	}
	return nil
}

type Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent struct {
	state         protoimpl.MessageState                                                     `protogen:"open.v1"`
	DownReason    string                                                                     `protobuf:"bytes,1,opt,name=downReason,proto3" json:"downReason,omitempty"`
	DownTime      string                                                                     `protobuf:"bytes,2,opt,name=downTime,proto3" json:"downTime,omitempty"`
	LinkType      Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType `protobuf:"varint,3,opt,name=linkType,proto3,enum=huawei_ifm.Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType" json:"linkType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent) Reset() {
	*x = Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent{}
	mi := &file_huawei_ifm_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0, 0, 28, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent) GetDownReason() string {
	if x != nil {
		return x.DownReason
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent) GetDownTime() string {
	if x != nil {
		return x.DownTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent) GetLinkType() Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType {
	if x != nil {
		return x.LinkType
	}
	return Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType_IPCP
}

type Ifm_AutoRecoveryTimes_AutoRecoveryTime struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	ErrorDownType Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType `protobuf:"varint,1,opt,name=errorDownType,proto3,enum=huawei_ifm.Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType" json:"errorDownType,omitempty"`
	TimeValue     uint32                                               `protobuf:"varint,2,opt,name=timeValue,proto3" json:"timeValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) Reset() {
	*x = Ifm_AutoRecoveryTimes_AutoRecoveryTime{}
	mi := &file_huawei_ifm_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_AutoRecoveryTimes_AutoRecoveryTime) ProtoMessage() {}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_AutoRecoveryTimes_AutoRecoveryTime.ProtoReflect.Descriptor instead.
func (*Ifm_AutoRecoveryTimes_AutoRecoveryTime) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) GetErrorDownType() Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType {
	if x != nil {
		return x.ErrorDownType
	}
	return Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_AUTOX_DEFEND
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) GetTimeValue() uint32 {
	if x != nil {
		return x.TimeValue
	}
	return 0
}

type Ifm_GlobalConfig_DualStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DualStatEnable bool                   `protobuf:"varint,1,opt,name=dualStatEnable,proto3" json:"dualStatEnable,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Ifm_GlobalConfig_DualStat) Reset() {
	*x = Ifm_GlobalConfig_DualStat{}
	mi := &file_huawei_ifm_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_GlobalConfig_DualStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_GlobalConfig_DualStat) ProtoMessage() {}

func (x *Ifm_GlobalConfig_DualStat) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_GlobalConfig_DualStat.ProtoReflect.Descriptor instead.
func (*Ifm_GlobalConfig_DualStat) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Ifm_GlobalConfig_DualStat) GetDualStatEnable() bool {
	if x != nil {
		return x.DualStatEnable
	}
	return false
}

type Ifm_InterfaceCounts_InterfaceCount struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	IfClass       Ifm_InterfaceCounts_InterfaceCount_IfClass   `protobuf:"varint,1,opt,name=ifClass,proto3,enum=huawei_ifm.Ifm_InterfaceCounts_InterfaceCount_IfClass" json:"ifClass,omitempty"`
	IfCount       uint32                                       `protobuf:"varint,2,opt,name=ifCount,proto3" json:"ifCount,omitempty"`
	IfPhyType     Ifm_InterfaceCounts_InterfaceCount_IfPhyType `protobuf:"varint,3,opt,name=ifPhyType,proto3,enum=huawei_ifm.Ifm_InterfaceCounts_InterfaceCount_IfPhyType" json:"ifPhyType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_InterfaceCounts_InterfaceCount) Reset() {
	*x = Ifm_InterfaceCounts_InterfaceCount{}
	mi := &file_huawei_ifm_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_InterfaceCounts_InterfaceCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_InterfaceCounts_InterfaceCount) ProtoMessage() {}

func (x *Ifm_InterfaceCounts_InterfaceCount) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_InterfaceCounts_InterfaceCount.ProtoReflect.Descriptor instead.
func (*Ifm_InterfaceCounts_InterfaceCount) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Ifm_InterfaceCounts_InterfaceCount) GetIfClass() Ifm_InterfaceCounts_InterfaceCount_IfClass {
	if x != nil {
		return x.IfClass
	}
	return Ifm_InterfaceCounts_InterfaceCount_IfClass_MAININTERFACE
}

func (x *Ifm_InterfaceCounts_InterfaceCount) GetIfCount() uint32 {
	if x != nil {
		return x.IfCount
	}
	return 0
}

func (x *Ifm_InterfaceCounts_InterfaceCount) GetIfPhyType() Ifm_InterfaceCounts_InterfaceCount_IfPhyType {
	if x != nil {
		return x.IfPhyType
	}
	return Ifm_InterfaceCounts_InterfaceCount_IfPhyType_ATM
}

type Ifm_IpInterfaceCountOper_IpInterfaceCounts struct {
	state            protoimpl.MessageState                                         `protogen:"open.v1"`
	IpInterfaceCount []*Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount `protobuf:"bytes,1,rep,name=ipInterfaceCount,proto3" json:"ipInterfaceCount,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Ifm_IpInterfaceCountOper_IpInterfaceCounts) Reset() {
	*x = Ifm_IpInterfaceCountOper_IpInterfaceCounts{}
	mi := &file_huawei_ifm_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_IpInterfaceCountOper_IpInterfaceCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_IpInterfaceCountOper_IpInterfaceCounts) ProtoMessage() {}

func (x *Ifm_IpInterfaceCountOper_IpInterfaceCounts) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_IpInterfaceCountOper_IpInterfaceCounts.ProtoReflect.Descriptor instead.
func (*Ifm_IpInterfaceCountOper_IpInterfaceCounts) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *Ifm_IpInterfaceCountOper_IpInterfaceCounts) GetIpInterfaceCount() []*Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount {
	if x != nil {
		return x.IpInterfaceCount
	}
	return nil
}

type Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount struct {
	state         protoimpl.MessageState                                                `protogen:"open.v1"`
	IfCount       uint32                                                                `protobuf:"varint,1,opt,name=ifCount,proto3" json:"ifCount,omitempty"`
	IfPhyType     Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType `protobuf:"varint,2,opt,name=ifPhyType,proto3,enum=huawei_ifm.Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType" json:"ifPhyType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount) Reset() {
	*x = Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount{}
	mi := &file_huawei_ifm_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount) ProtoMessage() {}

func (x *Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount.ProtoReflect.Descriptor instead.
func (*Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 7, 0, 0}
}

func (x *Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount) GetIfCount() uint32 {
	if x != nil {
		return x.IfCount
	}
	return 0
}

func (x *Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount) GetIfPhyType() Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType {
	if x != nil {
		return x.IfPhyType
	}
	return Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType_ATM
}

type Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts struct {
	state              protoimpl.MessageState                                               `protogen:"open.v1"`
	Ipv6InterfaceCount []*Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount `protobuf:"bytes,1,rep,name=ipv6InterfaceCount,proto3" json:"ipv6InterfaceCount,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts) Reset() {
	*x = Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts{}
	mi := &file_huawei_ifm_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts) ProtoMessage() {}

func (x *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts.ProtoReflect.Descriptor instead.
func (*Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (x *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts) GetIpv6InterfaceCount() []*Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount {
	if x != nil {
		return x.Ipv6InterfaceCount
	}
	return nil
}

type Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount struct {
	state         protoimpl.MessageState                                                      `protogen:"open.v1"`
	IfCount       uint32                                                                      `protobuf:"varint,1,opt,name=ifCount,proto3" json:"ifCount,omitempty"`
	IfPhyType     Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType `protobuf:"varint,2,opt,name=ifPhyType,proto3,enum=huawei_ifm.Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType" json:"ifPhyType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount) Reset() {
	*x = Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount{}
	mi := &file_huawei_ifm_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount) ProtoMessage() {}

func (x *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount.ProtoReflect.Descriptor instead.
func (*Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 8, 0, 0}
}

func (x *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount) GetIfCount() uint32 {
	if x != nil {
		return x.IfCount
	}
	return 0
}

func (x *Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount) GetIfPhyType() Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType {
	if x != nil {
		return x.IfPhyType
	}
	return Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType_ATM
}

type Ifm_RemoteInterfaces_RemoteInterface struct {
	state            protoimpl.MessageState                                 `protogen:"open.v1"`
	IfIndex          uint32                                                 `protobuf:"varint,1,opt,name=ifIndex,proto3" json:"ifIndex,omitempty"`
	IfName           string                                                 `protobuf:"bytes,2,opt,name=ifName,proto3" json:"ifName,omitempty"`
	RemoteIfStatOper *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper `protobuf:"bytes,3,opt,name=remoteIfStatOper,proto3" json:"remoteIfStatOper,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) Reset() {
	*x = Ifm_RemoteInterfaces_RemoteInterface{}
	mi := &file_huawei_ifm_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_RemoteInterfaces_RemoteInterface) ProtoMessage() {}

func (x *Ifm_RemoteInterfaces_RemoteInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_RemoteInterfaces_RemoteInterface.ProtoReflect.Descriptor instead.
func (*Ifm_RemoteInterfaces_RemoteInterface) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) GetRemoteIfStatOper() *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper {
	if x != nil {
		return x.RemoteIfStatOper
	}
	return nil
}

type Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	InBitRate                uint64                 `protobuf:"varint,1,opt,name=inBitRate,proto3" json:"inBitRate,omitempty"`
	InPacketRate             uint64                 `protobuf:"varint,2,opt,name=inPacketRate,proto3" json:"inPacketRate,omitempty"`
	InPeakBitRate            uint64                 `protobuf:"varint,3,opt,name=inPeakBitRate,proto3" json:"inPeakBitRate,omitempty"`
	InPeakBitRateRecordTime  string                 `protobuf:"bytes,4,opt,name=inPeakBitRateRecordTime,proto3" json:"inPeakBitRateRecordTime,omitempty"`
	InUseRate                string                 `protobuf:"bytes,5,opt,name=inUseRate,proto3" json:"inUseRate,omitempty"`
	LastclearedTime          string                 `protobuf:"bytes,6,opt,name=lastclearedTime,proto3" json:"lastclearedTime,omitempty"`
	OutBitRate               uint64                 `protobuf:"varint,7,opt,name=outBitRate,proto3" json:"outBitRate,omitempty"`
	OutPacketRate            uint64                 `protobuf:"varint,8,opt,name=outPacketRate,proto3" json:"outPacketRate,omitempty"`
	OutPeakBitRate           uint64                 `protobuf:"varint,9,opt,name=outPeakBitRate,proto3" json:"outPeakBitRate,omitempty"`
	OutPeakBitRateRecordTime string                 `protobuf:"bytes,10,opt,name=outPeakBitRateRecordTime,proto3" json:"outPeakBitRateRecordTime,omitempty"`
	OutUseRate               string                 `protobuf:"bytes,11,opt,name=outUseRate,proto3" json:"outUseRate,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) Reset() {
	*x = Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper{}
	mi := &file_huawei_ifm_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) ProtoMessage() {}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper.ProtoReflect.Descriptor instead.
func (*Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 10, 0, 0}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetInBitRate() uint64 {
	if x != nil {
		return x.InBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetInPacketRate() uint64 {
	if x != nil {
		return x.InPacketRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetInPeakBitRate() uint64 {
	if x != nil {
		return x.InPeakBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetInPeakBitRateRecordTime() string {
	if x != nil {
		return x.InPeakBitRateRecordTime
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetInUseRate() string {
	if x != nil {
		return x.InUseRate
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetLastclearedTime() string {
	if x != nil {
		return x.LastclearedTime
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetOutBitRate() uint64 {
	if x != nil {
		return x.OutBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetOutPacketRate() uint64 {
	if x != nil {
		return x.OutPacketRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetOutPeakBitRate() uint64 {
	if x != nil {
		return x.OutPeakBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetOutPeakBitRateRecordTime() string {
	if x != nil {
		return x.OutPeakBitRateRecordTime
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper) GetOutUseRate() string {
	if x != nil {
		return x.OutUseRate
	}
	return ""
}

type Ifm_StaticDimRanges_StaticDimRange struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	CardRange     string                                       `protobuf:"bytes,1,opt,name=cardRange,proto3" json:"cardRange,omitempty"`
	ChassisRange  string                                       `protobuf:"bytes,2,opt,name=chassisRange,proto3" json:"chassisRange,omitempty"`
	IfPhyType     Ifm_StaticDimRanges_StaticDimRange_IfPhyType `protobuf:"varint,3,opt,name=ifPhyType,proto3,enum=huawei_ifm.Ifm_StaticDimRanges_StaticDimRange_IfPhyType" json:"ifPhyType,omitempty"`
	PortRange     string                                       `protobuf:"bytes,4,opt,name=portRange,proto3" json:"portRange,omitempty"`
	SlotRange     string                                       `protobuf:"bytes,5,opt,name=slotRange,proto3" json:"slotRange,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ifm_StaticDimRanges_StaticDimRange) Reset() {
	*x = Ifm_StaticDimRanges_StaticDimRange{}
	mi := &file_huawei_ifm_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ifm_StaticDimRanges_StaticDimRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_StaticDimRanges_StaticDimRange) ProtoMessage() {}

func (x *Ifm_StaticDimRanges_StaticDimRange) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_StaticDimRanges_StaticDimRange.ProtoReflect.Descriptor instead.
func (*Ifm_StaticDimRanges_StaticDimRange) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (x *Ifm_StaticDimRanges_StaticDimRange) GetCardRange() string {
	if x != nil {
		return x.CardRange
	}
	return ""
}

func (x *Ifm_StaticDimRanges_StaticDimRange) GetChassisRange() string {
	if x != nil {
		return x.ChassisRange
	}
	return ""
}

func (x *Ifm_StaticDimRanges_StaticDimRange) GetIfPhyType() Ifm_StaticDimRanges_StaticDimRange_IfPhyType {
	if x != nil {
		return x.IfPhyType
	}
	return Ifm_StaticDimRanges_StaticDimRange_IfPhyType_ATM
}

func (x *Ifm_StaticDimRanges_StaticDimRange) GetPortRange() string {
	if x != nil {
		return x.PortRange
	}
	return ""
}

func (x *Ifm_StaticDimRanges_StaticDimRange) GetSlotRange() string {
	if x != nil {
		return x.SlotRange
	}
	return ""
}

var File_huawei_ifm_proto protoreflect.FileDescriptor

const file_huawei_ifm_proto_rawDesc = "" +
	"\n" +
	"\x10huawei-ifm.proto\x12\n" +
	"huawei_ifm\"\xf5\xe0\x02\n" +
	"\x03Ifm\x12:\n" +
	"\n" +
	"interfaces\x18\x05 \x01(\v2\x1a.huawei_ifm.Ifm.InterfacesR\n" +
	"interfaces\x12O\n" +
	"\x11autoRecoveryTimes\x18\x06 \x01(\v2!.huawei_ifm.Ifm.AutoRecoveryTimesR\x11autoRecoveryTimes\x12@\n" +
	"\fglobalConfig\x18\a \x01(\v2\x1c.huawei_ifm.Ifm.GlobalConfigR\fglobalConfig\x124\n" +
	"\bhdlcDamp\x18\b \x01(\v2\x18.huawei_ifm.Ifm.HdlcDampR\bhdlcDamp\x12.\n" +
	"\x06ifDamp\x18\t \x01(\v2\x16.huawei_ifm.Ifm.IfDampR\x06ifDamp\x12I\n" +
	"\x0finterfaceCounts\x18\n" +
	" \x01(\v2\x1f.huawei_ifm.Ifm.InterfaceCountsR\x0finterfaceCounts\x12L\n" +
	"\x10ipConflictConfig\x18\v \x01(\v2 .huawei_ifm.Ifm.IpConflictConfigR\x10ipConflictConfig\x12X\n" +
	"\x14ipInterfaceCountOper\x18\f \x01(\v2$.huawei_ifm.Ifm.IpInterfaceCountOperR\x14ipInterfaceCountOper\x12^\n" +
	"\x16ipv6InterfaceCountOper\x18\r \x01(\v2&.huawei_ifm.Ifm.Ipv6InterfaceCountOperR\x16ipv6InterfaceCountOper\x121\n" +
	"\apppDamp\x18\x0e \x01(\v2\x17.huawei_ifm.Ifm.PppDampR\apppDamp\x12L\n" +
	"\x10remoteInterfaces\x18\x0f \x01(\v2 .huawei_ifm.Ifm.RemoteInterfacesR\x10remoteInterfaces\x12I\n" +
	"\x0fstaticDimRanges\x18\x10 \x01(\v2\x1f.huawei_ifm.Ifm.StaticDimRangesR\x0fstaticDimRanges\x1a\x9b\xed\x01\n" +
	"\n" +
	"Interfaces\x12B\n" +
	"\tinterface\x18\x01 \x03(\v2$.huawei_ifm.Ifm.Interfaces.InterfaceR\tinterface\x1a\xc7\xec\x01\n" +
	"\tInterface\x12X\n" +
	"\rifAdminStatus\x18\x05 \x01(\x0e22.huawei_ifm.Ifm.Interfaces.Interface.IfAdminStatusR\rifAdminStatus\x12X\n" +
	"\rifClearedStat\x18\t \x01(\v22.huawei_ifm.Ifm.Interfaces.Interface.IfClearedStatR\rifClearedStat\x12X\n" +
	"\rifDynamicInfo\x18\r \x01(\v22.huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfoR\rifDynamicInfo\x12\x18\n" +
	"\aifIndex\x18\x10 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x19 \x01(\tR\x06ifName\x12U\n" +
	"\fifStatistics\x18# \x01(\v21.huawei_ifm.Ifm.Interfaces.Interface.IfStatisticsR\fifStatistics\x12$\n" +
	"\rdownDelayTime\x18$ \x01(\rR\rdownDelayTime\x12L\n" +
	"\tflowAlarm\x18% \x01(\v2..huawei_ifm.Ifm.Interfaces.Interface.FlowAlarmR\tflowAlarm\x12R\n" +
	"\vforwardMode\x18& \x01(\v20.huawei_ifm.Ifm.Interfaces.Interface.ForwardModeR\vforwardMode\x127\n" +
	"\x02fr\x18' \x01(\v2'.huawei_ifm.Ifm.Interfaces.Interface.FrR\x02fr\x12=\n" +
	"\x04hdlc\x18( \x01(\v2).huawei_ifm.Ifm.Interfaces.Interface.HdlcR\x04hdlc\x12 \n" +
	"\vifBandwidth\x18) \x01(\rR\vifBandwidth\x12d\n" +
	"\x11ifCeIpStatiEnable\x18* \x01(\v26.huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnableR\x11ifCeIpStatiEnable\x12m\n" +
	"\x14ifCeIpStatisticsInfo\x18+ \x01(\v29.huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatisticsInfoR\x14ifCeIpStatisticsInfo\x12[\n" +
	"\x0eifCfgEncapType\x18, \x01(\x0e23.huawei_ifm.Ifm.Interfaces.Interface.IfCfgEncapTypeR\x0eifCfgEncapType\x12\x1a\n" +
	"\bifCfgMac\x18- \x01(\tR\bifCfgMac\x12F\n" +
	"\aifClass\x18. \x01(\x0e2,.huawei_ifm.Ifm.Interfaces.Interface.IfClassR\aifClass\x12X\n" +
	"\rifControlFlap\x18/ \x01(\v22.huawei_ifm.Ifm.Interfaces.Interface.IfControlFlapR\rifControlFlap\x12\x18\n" +
	"\aifDescr\x180 \x01(\tR\aifDescr\x12\x12\n" +
	"\x04ifDf\x181 \x01(\bR\x04ifDf\x12R\n" +
	"\vifErrorDown\x182 \x01(\v20.huawei_ifm.Ifm.Interfaces.Interface.IfErrorDownR\vifErrorDown\x12g\n" +
	"\x12ifIpIcmpStatistics\x183 \x01(\v27.huawei_ifm.Ifm.Interfaces.Interface.IfIpIcmpStatisticsR\x12ifIpIcmpStatistics\x12U\n" +
	"\fifIpStatiCfg\x184 \x01(\v21.huawei_ifm.Ifm.Interfaces.Interface.IfIpStatiCfgR\fifIpStatiCfg\x12[\n" +
	"\x0eifLinkProtocol\x185 \x01(\x0e23.huawei_ifm.Ifm.Interfaces.Interface.IfLinkProtocolR\x0eifLinkProtocol\x12$\n" +
	"\rifMainIfDescr\x186 \x01(\tR\rifMainIfDescr\x12@\n" +
	"\x05ifMru\x187 \x01(\v2*.huawei_ifm.Ifm.Interfaces.Interface.IfMruR\x05ifMru\x12a\n" +
	"\x10ifMruDiscardStat\x188 \x01(\v25.huawei_ifm.Ifm.Interfaces.Interface.IfMruDiscardStatR\x10ifMruDiscardStat\x12^\n" +
	"\x0fifMruStatEnable\x189 \x01(\v24.huawei_ifm.Ifm.Interfaces.Interface.IfMruStatEnableR\x0fifMruStatEnable\x12\x14\n" +
	"\x05ifMtu\x18: \x01(\rR\x05ifMtu\x12m\n" +
	"\x14ifNetworkLayerStatus\x18; \x01(\x0e29.huawei_ifm.Ifm.Interfaces.Interface.IfNetworkLayerStatusR\x14ifNetworkLayerStatus\x12\x1a\n" +
	"\bifNumber\x18< \x01(\tR\bifNumber\x12^\n" +
	"\x0fifOperEncapType\x18= \x01(\x0e24.huawei_ifm.Ifm.Interfaces.Interface.IfOperEncapTypeR\x0fifOperEncapType\x12&\n" +
	"\x0eifParentIfName\x18> \x01(\tR\x0eifParentIfName\x12L\n" +
	"\tifPhyType\x18? \x01(\x0e2..huawei_ifm.Ifm.Interfaces.Interface.IfPhyTypeR\tifPhyType\x12\x1e\n" +
	"\n" +
	"ifPosition\x18@ \x01(\tR\n" +
	"ifPosition\x12U\n" +
	"\fifRouterType\x18A \x01(\x0e21.huawei_ifm.Ifm.Interfaces.Interface.IfRouterTypeR\fifRouterType\x12X\n" +
	"\rifServiceType\x18B \x01(\x0e22.huawei_ifm.Ifm.Interfaces.Interface.IfServiceTypeR\rifServiceType\x12\x1e\n" +
	"\n" +
	"ifStatItvl\x18C \x01(\rR\n" +
	"ifStatItvl\x12$\n" +
	"\rifStatiEnable\x18D \x01(\bR\rifStatiEnable\x12I\n" +
	"\bifTcpMss\x18E \x01(\v2-.huawei_ifm.Ifm.Interfaces.Interface.IfTcpMssR\bifTcpMss\x12U\n" +
	"\fifTrackRtMtg\x18F \x01(\v21.huawei_ifm.Ifm.Interfaces.Interface.IfTrackRtMtgR\fifTrackRtMtg\x12\"\n" +
	"\fifTrapEnable\x18G \x01(\bR\fifTrapEnable\x12^\n" +
	"\x0fifTrapThreshold\x18H \x01(\v24.huawei_ifm.Ifm.Interfaces.Interface.IfTrapThresholdR\x0fifTrapThreshold\x12$\n" +
	"\rifTrunkIfName\x18I \x01(\tR\rifTrunkIfName\x12O\n" +
	"\n" +
	"ipv4Config\x18J \x01(\v2/.huawei_ifm.Ifm.Interfaces.Interface.Ipv4ConfigR\n" +
	"ipv4Config\x12I\n" +
	"\bipv4Oper\x18K \x01(\v2-.huawei_ifm.Ifm.Interfaces.Interface.Ipv4OperR\bipv4Oper\x12O\n" +
	"\n" +
	"ipv6Config\x18L \x01(\v2/.huawei_ifm.Ifm.Interfaces.Interface.Ipv6ConfigR\n" +
	"ipv6Config\x12I\n" +
	"\bipv6Oper\x18M \x01(\v2-.huawei_ifm.Ifm.Interfaces.Interface.Ipv6OperR\bipv6Oper\x12&\n" +
	"\x0eisActorBearSrv\x18N \x01(\bR\x0eisActorBearSrv\x12 \n" +
	"\visAvailable\x18O \x01(\bR\visAvailable\x12&\n" +
	"\x0eisL2SwitchPort\x18P \x01(\bR\x0eisL2SwitchPort\x12 \n" +
	"\vl2SubIfFlag\x18Q \x01(\bR\vl2SubIfFlag\x12,\n" +
	"\x11l2SwitchPortIndex\x18R \x01(\rR\x11l2SwitchPortIndex\x12O\n" +
	"\n" +
	"mainIpAddr\x18S \x01(\v2/.huawei_ifm.Ifm.Interfaces.Interface.MainIpAddrR\n" +
	"mainIpAddr\x12L\n" +
	"\tnetSlices\x18T \x01(\v2..huawei_ifm.Ifm.Interfaces.Interface.NetSlicesR\tnetSlices\x12U\n" +
	"\fphyDampIfCfg\x18U \x01(\v21.huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfCfgR\fphyDampIfCfg\x12X\n" +
	"\rphyDampIfOper\x18V \x01(\v22.huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfOperR\rphyDampIfOper\x12U\n" +
	"\fphyIfMacStat\x18W \x01(\v21.huawei_ifm.Ifm.Interfaces.Interface.PhyIfMacStatR\fphyIfMacStat\x12I\n" +
	"\bportMode\x18X \x01(\x0e2-.huawei_ifm.Ifm.Interfaces.Interface.PortModeR\bportMode\x12:\n" +
	"\x03ppp\x18Y \x01(\v2(.huawei_ifm.Ifm.Interfaces.Interface.PppR\x03ppp\x120\n" +
	"\x13protocolUpDelayTime\x18Z \x01(\rR\x13protocolUpDelayTime\x12U\n" +
	"\fremoteIfStat\x18[ \x01(\v21.huawei_ifm.Ifm.Interfaces.Interface.RemoteIfStatR\fremoteIfStat\x12$\n" +
	"\rspreadMtuFlag\x18\\ \x01(\bR\rspreadMtuFlag\x12I\n" +
	"\bstatMode\x18] \x01(\x0e2-.huawei_ifm.Ifm.Interfaces.Interface.StatModeR\bstatMode\x12[\n" +
	"\x0etransAlarmDown\x18^ \x01(\v23.huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDownR\x0etransAlarmDown\x12L\n" +
	"\tvPosition\x18_ \x01(\v2..huawei_ifm.Ifm.Interfaces.Interface.VPositionR\tvPosition\x12a\n" +
	"\x10vbdIfForwardMode\x18` \x01(\v25.huawei_ifm.Ifm.Interfaces.Interface.VbdIfForwardModeR\x10vbdIfForwardMode\x12F\n" +
	"\aveGroup\x18a \x01(\v2,.huawei_ifm.Ifm.Interfaces.Interface.VeGroupR\aveGroup\x12U\n" +
	"\fveMemberSlot\x18b \x01(\v21.huawei_ifm.Ifm.Interfaces.Interface.VeMemberSlotR\fveMemberSlot\x12U\n" +
	"\fvllPwLoopChk\x18c \x01(\v21.huawei_ifm.Ifm.Interfaces.Interface.VllPwLoopChkR\fvllPwLoopChk\x12\x18\n" +
	"\avrfName\x18d \x01(\tR\avrfName\x12\x16\n" +
	"\x06vsName\x18e \x01(\tR\x06vsName\x1a\xed\x0e\n" +
	"\rIfClearedStat\x12\x1a\n" +
	"\bsendByte\x18\x1d \x01(\x04R\bsendByte\x12\x1e\n" +
	"\n" +
	"sendPacket\x18$ \x01(\x04R\n" +
	"sendPacket\x12x\n" +
	"\x13ifMacMtuDiscardStat\x18% \x01(\v2F.huawei_ifm.Ifm.Interfaces.Interface.IfClearedStat.IfMacMtuDiscardStatR\x13ifMacMtuDiscardStat\x12&\n" +
	"\x0eifOperStatItvl\x18& \x01(\rR\x0eifOperStatItvl\x12\x1c\n" +
	"\tinBitRate\x18' \x01(\x04R\tinBitRate\x12\x1e\n" +
	"\n" +
	"inByteRate\x18( \x01(\x04R\n" +
	"inByteRate\x12\"\n" +
	"\finPacketRate\x18) \x01(\x04R\finPacketRate\x12\x1c\n" +
	"\tinUseRate\x18* \x01(\tR\tinUseRate\x12\x1e\n" +
	"\n" +
	"outBitRate\x18+ \x01(\x04R\n" +
	"outBitRate\x12 \n" +
	"\voutByteRate\x18, \x01(\x04R\voutByteRate\x12$\n" +
	"\routPacketRate\x18- \x01(\x04R\routPacketRate\x12\x1e\n" +
	"\n" +
	"outUseRate\x18. \x01(\tR\n" +
	"outUseRate\x12 \n" +
	"\vrcvBroadBit\x18/ \x01(\x04R\vrcvBroadBit\x12(\n" +
	"\x0frcvBroadBitRate\x180 \x01(\x04R\x0frcvBroadBitRate\x12&\n" +
	"\x0ercvBroadPacket\x181 \x01(\x04R\x0ercvBroadPacket\x12.\n" +
	"\x12rcvBroadPacketRate\x182 \x01(\x04R\x12rcvBroadPacketRate\x12$\n" +
	"\rrcvDropPacket\x183 \x01(\x04R\rrcvDropPacket\x12&\n" +
	"\x0ercvErrorPacket\x184 \x01(\x04R\x0ercvErrorPacket\x12\x1e\n" +
	"\n" +
	"rcvMutiBit\x185 \x01(\x04R\n" +
	"rcvMutiBit\x12&\n" +
	"\x0ercvMutiBitRate\x186 \x01(\x04R\x0ercvMutiBitRate\x12$\n" +
	"\rrcvMutiPacket\x187 \x01(\x04R\rrcvMutiPacket\x12,\n" +
	"\x11rcvMutiPacketRate\x188 \x01(\x04R\x11rcvMutiPacketRate\x12\x1c\n" +
	"\trcvUniBit\x189 \x01(\x04R\trcvUniBit\x12$\n" +
	"\rrcvUniBitRate\x18: \x01(\x04R\rrcvUniBitRate\x12\"\n" +
	"\frcvUniPacket\x18; \x01(\x04R\frcvUniPacket\x12*\n" +
	"\x10rcvUniPacketRate\x18< \x01(\x04R\x10rcvUniPacketRate\x12 \n" +
	"\vreceiveByte\x18= \x01(\x04R\vreceiveByte\x12$\n" +
	"\rreceivePacket\x18> \x01(\x04R\rreceivePacket\x12\"\n" +
	"\fsendBroadBit\x18? \x01(\x04R\fsendBroadBit\x12*\n" +
	"\x10sendBroadBitRate\x18@ \x01(\x04R\x10sendBroadBitRate\x12(\n" +
	"\x0fsendBroadPacket\x18A \x01(\x04R\x0fsendBroadPacket\x120\n" +
	"\x13sendBroadPacketRate\x18B \x01(\x04R\x13sendBroadPacketRate\x12&\n" +
	"\x0esendDropPacket\x18C \x01(\x04R\x0esendDropPacket\x12(\n" +
	"\x0fsendErrorPacket\x18D \x01(\x04R\x0fsendErrorPacket\x12 \n" +
	"\vsendMutiBit\x18E \x01(\x04R\vsendMutiBit\x12(\n" +
	"\x0fsendMutiBitRate\x18F \x01(\x04R\x0fsendMutiBitRate\x12&\n" +
	"\x0esendMutiPacket\x18G \x01(\x04R\x0esendMutiPacket\x12.\n" +
	"\x12sendMutiPacketRate\x18H \x01(\x04R\x12sendMutiPacketRate\x12\x1e\n" +
	"\n" +
	"sendUniBit\x18I \x01(\x04R\n" +
	"sendUniBit\x12&\n" +
	"\x0esendUniBitRate\x18J \x01(\x04R\x0esendUniBitRate\x12$\n" +
	"\rsendUniPacket\x18K \x01(\x04R\rsendUniPacket\x12,\n" +
	"\x11sendUniPacketRate\x18L \x01(\x04R\x11sendUniPacketRate\x1a\xcd\x01\n" +
	"\x13IfMacMtuDiscardStat\x12,\n" +
	"\x11statisticsMacIpv4\x18\x01 \x01(\x04R\x11statisticsMacIpv4\x12,\n" +
	"\x11statisticsMacIpv6\x18\x02 \x01(\x04R\x11statisticsMacIpv6\x12,\n" +
	"\x11statisticsMtuIpv4\x18\x03 \x01(\x04R\x11statisticsMtuIpv4\x12,\n" +
	"\x11statisticsMtuIpv6\x18\x04 \x01(\x04R\x11statisticsMtuIpv6\x1a\x83\n" +
	"\n" +
	"\rIfDynamicInfo\x12c\n" +
	"\fifOperStatus\x18\x05 \x01(\x0e2?.huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfOperStatusR\fifOperStatus\x12&\n" +
	"\x0eifCtrlFlapDamp\x18\x06 \x01(\bR\x0eifCtrlFlapDamp\x12u\n" +
	"\x12ifLinkQualityGrade\x18\a \x01(\x0e2E.huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfLinkQualityGradeR\x12ifLinkQualityGrade\x12c\n" +
	"\fifLinkStatus\x18\b \x01(\x0e2?.huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfLinkStatusR\fifLinkStatus\x12\x1c\n" +
	"\tifOperMac\x18\t \x01(\tR\tifOperMac\x12 \n" +
	"\vifOperSpeed\x18\n" +
	" \x01(\x04R\vifOperSpeed\x12\x1e\n" +
	"\n" +
	"ifOpertMTU\x18\v \x01(\rR\n" +
	"ifOpertMTU\x12`\n" +
	"\vifPhyStatus\x18\f \x01(\x0e2>.huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfPhyStatusR\vifPhyStatus\x12Z\n" +
	"\tifV4State\x18\r \x01(\x0e2<.huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfV4StateR\tifV4State\x12Z\n" +
	"\tifV6State\x18\x0e \x01(\x0e2<.huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfV6StateR\tifV6State\x12\x1c\n" +
	"\tisOffline\x18\x0f \x01(\bR\tisOffline\x12.\n" +
	"\x12lineProtocolUpTime\x18\x10 \x01(\tR\x12lineProtocolUpTime\x12\x1e\n" +
	"\n" +
	"subIfCount\x18\x11 \x01(\rR\n" +
	"subIfCount\":\n" +
	"\fIfOperStatus\x12\x15\n" +
	"\x11IfOperStatus_DOWN\x10\x00\x12\x13\n" +
	"\x0fIfOperStatus_UP\x10\x01\"\x89\x01\n" +
	"\x12IfLinkQualityGrade\x12\x1b\n" +
	"\x17IfLinkQualityGrade_GOOD\x10\x00\x12\x1b\n" +
	"\x17IfLinkQualityGrade_HIGH\x10\x01\x12\x1a\n" +
	"\x16IfLinkQualityGrade_LOW\x10\x02\x12\x1d\n" +
	"\x19IfLinkQualityGrade_MIDDLE\x10\x03\":\n" +
	"\fIfLinkStatus\x12\x15\n" +
	"\x11IfLinkStatus_DOWN\x10\x00\x12\x13\n" +
	"\x0fIfLinkStatus_UP\x10\x01\"7\n" +
	"\vIfPhyStatus\x12\x14\n" +
	"\x10IfPhyStatus_DOWN\x10\x00\x12\x12\n" +
	"\x0eIfPhyStatus_UP\x10\x01\"1\n" +
	"\tIfV4State\x12\x12\n" +
	"\x0eIfV4State_DOWN\x10\x00\x12\x10\n" +
	"\fIfV4State_UP\x10\x01\"1\n" +
	"\tIfV6State\x12\x12\n" +
	"\x0eIfV6State_DOWN\x10\x00\x12\x10\n" +
	"\fIfV6State_UP\x10\x01\x1a\xf7\t\n" +
	"\fIfStatistics\x12&\n" +
	"\x0ercvBroadPacket\x18\x02 \x01(\x04R\x0ercvBroadPacket\x12$\n" +
	"\rrcvDropPacket\x18\x03 \x01(\x04R\rrcvDropPacket\x12&\n" +
	"\x0ercvErrorPacket\x18\x04 \x01(\x04R\x0ercvErrorPacket\x12$\n" +
	"\rrcvMutiPacket\x18\x05 \x01(\x04R\rrcvMutiPacket\x12\"\n" +
	"\frcvUniPacket\x18\x06 \x01(\x04R\frcvUniPacket\x12 \n" +
	"\vreceiveByte\x18\a \x01(\x04R\vreceiveByte\x12$\n" +
	"\rreceivePacket\x18\b \x01(\x04R\rreceivePacket\x12(\n" +
	"\x0fsendBroadPacket\x18\t \x01(\x04R\x0fsendBroadPacket\x12\x1a\n" +
	"\bsendByte\x18\n" +
	" \x01(\x04R\bsendByte\x12&\n" +
	"\x0esendDropPacket\x18\v \x01(\x04R\x0esendDropPacket\x12(\n" +
	"\x0fsendErrorPacket\x18\f \x01(\x04R\x0fsendErrorPacket\x12&\n" +
	"\x0esendMutiPacket\x18\r \x01(\x04R\x0esendMutiPacket\x12\x1e\n" +
	"\n" +
	"sendPacket\x18\x0e \x01(\x04R\n" +
	"sendPacket\x12$\n" +
	"\rsendUniPacket\x18\x0f \x01(\x04R\rsendUniPacket\x12/\n" +
	"\x14in_realtime_bit_rate\x18\x11 \x01(\x04R\x11inRealtimeBitRate\x121\n" +
	"\x15out_realtime_bit_rate\x18\x12 \x01(\x04R\x12outRealtimeBitRate\x12e\n" +
	"\rethPortErrSts\x18\x10 \x01(\v2?.huawei_ifm.Ifm.Interfaces.Interface.IfStatistics.EthPortErrStsR\rethPortErrSts\x1a\x8d\x04\n" +
	"\rEthPortErrSts\x12 \n" +
	"\vrxAlignment\x18\x01 \x01(\x04R\vrxAlignment\x12\x14\n" +
	"\x05rxCRC\x18\x02 \x01(\x04R\x05rxCRC\x12\x1e\n" +
	"\n" +
	"rxFragment\x18\x03 \x01(\x04R\n" +
	"rxFragment\x12\"\n" +
	"\frxInrangeLen\x18\x04 \x01(\x04R\frxInrangeLen\x12\x1a\n" +
	"\brxJabber\x18\x05 \x01(\x04R\brxJabber\x12$\n" +
	"\rrxJumboOctets\x18\x06 \x01(\x04R\rrxJumboOctets\x12\x16\n" +
	"\x06rxLong\x18\a \x01(\x04R\x06rxLong\x12\x1c\n" +
	"\trxOverrun\x18\b \x01(\x04R\trxOverrun\x12\x18\n" +
	"\arxPause\x18\t \x01(\x04R\arxPause\x12\x1a\n" +
	"\brxSymbol\x18\n" +
	" \x01(\x04R\brxSymbol\x12 \n" +
	"\vrxUndersize\x18\v \x01(\x04R\vrxUndersize\x12$\n" +
	"\rtxJumboOctets\x18\f \x01(\x04R\rtxJumboOctets\x12\x16\n" +
	"\x06txLost\x18\r \x01(\x04R\x06txLost\x12\x1c\n" +
	"\ttxOverrun\x18\x0e \x01(\x04R\ttxOverrun\x12\x18\n" +
	"\atxPause\x18\x0f \x01(\x04R\atxPause\x12\x1a\n" +
	"\btxSystem\x18\x10 \x01(\x04R\btxSystem\x12\x1e\n" +
	"\n" +
	"txUnderrun\x18\x11 \x01(\x04R\n" +
	"txUnderrun\x1a=\n" +
	"\tFlowAlarm\x120\n" +
	"\x13unknownUnicastAlarm\x18\x01 \x01(\rR\x13unknownUnicastAlarm\x1a\xef\x01\n" +
	"\vForwardMode\x12a\n" +
	"\fveForwarMode\x18\x01 \x01(\x0e2=.huawei_ifm.Ifm.Interfaces.Interface.ForwardMode.VeForwarModeR\fveForwarMode\"}\n" +
	"\fVeForwarMode\x12\x1e\n" +
	"\x1aVeForwarMode_HALFX_THROUGH\x10\x00\x12\x18\n" +
	"\x14VeForwarMode_INVALID\x10\x01\x12\x19\n" +
	"\x15VeForwarMode_LOOPBACK\x10\x02\x12\x18\n" +
	"\x14VeForwarMode_THROUGH\x10\x03\x1a\x8e\x05\n" +
	"\x02Fr\x12C\n" +
	"\x05dlcis\x18\x01 \x01(\v2-.huawei_ifm.Ifm.Interfaces.Interface.Fr.DlcisR\x05dlcis\x12F\n" +
	"\x06ifLink\x18\x02 \x01(\v2..huawei_ifm.Ifm.Interfaces.Interface.Fr.IfLinkR\x06ifLink\x12F\n" +
	"\x06ifType\x18\x03 \x01(\x0e2..huawei_ifm.Ifm.Interfaces.Interface.Fr.IfTypeR\x06ifType\x12I\n" +
	"\almiType\x18\x04 \x01(\x0e2/.huawei_ifm.Ifm.Interfaces.Interface.Fr.LmiTypeR\almiType\x12\x18\n" +
	"\an391dte\x18\x05 \x01(\rR\an391dte\x12\x18\n" +
	"\an392dce\x18\x06 \x01(\x04R\an392dce\x12\x18\n" +
	"\an392dte\x18\a \x01(\x04R\an392dte\x12\x18\n" +
	"\an393dce\x18\b \x01(\x04R\an393dce\x12\x18\n" +
	"\an393dte\x18\t \x01(\rR\an393dte\x12\x18\n" +
	"\at392dce\x18\n" +
	" \x01(\x04R\at392dce\x1a\x1b\n" +
	"\x05Dlcis\x12\x12\n" +
	"\x04dlci\x18\x01 \x01(\rR\x04dlci\x1a,\n" +
	"\x06IfLink\x12\"\n" +
	"\ftimeInternal\x18\x01 \x01(\rR\ftimeInternal\"8\n" +
	"\x06IfType\x12\x0e\n" +
	"\n" +
	"IfType_DCE\x10\x00\x12\x0e\n" +
	"\n" +
	"IfType_DTE\x10\x01\x12\x0e\n" +
	"\n" +
	"IfType_NNI\x10\x02\"G\n" +
	"\aLmiType\x12\x10\n" +
	"\fLmiType_ANSI\x10\x00\x12\x17\n" +
	"\x13LmiType_NONSTANDARD\x10\x01\x12\x11\n" +
	"\rLmiType_Q933A\x10\x02\x1a\xa2\x01\n" +
	"\x04Hdlc\x12\"\n" +
	"\fdownWhenLoop\x18\x01 \x01(\bR\fdownWhenLoop\x12H\n" +
	"\x06ifLink\x18\x02 \x01(\v20.huawei_ifm.Ifm.Interfaces.Interface.Hdlc.IfLinkR\x06ifLink\x1a,\n" +
	"\x06IfLink\x12\"\n" +
	"\ftimeInternal\x18\x01 \x01(\rR\ftimeInternal\x1a\xc1\x06\n" +
	"\x11IfCeIpStatiEnable\x12p\n" +
	"\x0fifIpStatiEnable\x18\x01 \x01(\x0e2F.huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.IfIpStatiEnableR\x0fifIpStatiEnable\x12|\n" +
	"\x13ifIpStatiIpv4Enable\x18\x02 \x01(\x0e2J.huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.IfIpStatiIpv4EnableR\x13ifIpStatiIpv4Enable\x12|\n" +
	"\x13ifIpStatiIpv6Enable\x18\x03 \x01(\x0e2J.huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.IfIpStatiIpv6EnableR\x13ifIpStatiIpv6Enable\"\x85\x01\n" +
	"\x0fIfIpStatiEnable\x12\x1b\n" +
	"\x17IfIpStatiEnable_DISABLE\x10\x00\x12\x1a\n" +
	"\x16IfIpStatiEnable_ENABLE\x10\x01\x12\x1b\n" +
	"\x17IfIpStatiEnable_INBOUND\x10\x02\x12\x1c\n" +
	"\x18IfIpStatiEnable_OUTBOUND\x10\x03\"\x99\x01\n" +
	"\x13IfIpStatiIpv4Enable\x12\x1f\n" +
	"\x1bIfIpStatiIpv4Enable_DISABLE\x10\x00\x12\x1e\n" +
	"\x1aIfIpStatiIpv4Enable_ENABLE\x10\x01\x12\x1f\n" +
	"\x1bIfIpStatiIpv4Enable_INBOUND\x10\x02\x12 \n" +
	"\x1cIfIpStatiIpv4Enable_OUTBOUND\x10\x03\"\x99\x01\n" +
	"\x13IfIpStatiIpv6Enable\x12\x1f\n" +
	"\x1bIfIpStatiIpv6Enable_DISABLE\x10\x00\x12\x1e\n" +
	"\x1aIfIpStatiIpv6Enable_ENABLE\x10\x01\x12\x1f\n" +
	"\x1bIfIpStatiIpv6Enable_INBOUND\x10\x02\x12 \n" +
	"\x1cIfIpStatiIpv6Enable_OUTBOUND\x10\x03\x1a\xd6\x05\n" +
	"\x14IfCeIpStatisticsInfo\x12&\n" +
	"\x0ereceiveIpv4Bit\x18\x01 \x01(\x04R\x0ereceiveIpv4Bit\x12.\n" +
	"\x12receiveIpv4BitRate\x18\x02 \x01(\x04R\x12receiveIpv4BitRate\x12,\n" +
	"\x11receiveIpv4Packet\x18\x03 \x01(\x04R\x11receiveIpv4Packet\x124\n" +
	"\x15receiveIpv4PacketRate\x18\x04 \x01(\x04R\x15receiveIpv4PacketRate\x12&\n" +
	"\x0ereceiveIpv6Bit\x18\x05 \x01(\x04R\x0ereceiveIpv6Bit\x12.\n" +
	"\x12receiveIpv6BitRate\x18\x06 \x01(\x04R\x12receiveIpv6BitRate\x12,\n" +
	"\x11receiveIpv6Packet\x18\a \x01(\x04R\x11receiveIpv6Packet\x124\n" +
	"\x15receiveIpv6PacketRate\x18\b \x01(\x04R\x15receiveIpv6PacketRate\x12 \n" +
	"\vsendIpv4Bit\x18\t \x01(\x04R\vsendIpv4Bit\x12(\n" +
	"\x0fsendIpv4BitRate\x18\n" +
	" \x01(\x04R\x0fsendIpv4BitRate\x12&\n" +
	"\x0esendIpv4Packet\x18\v \x01(\x04R\x0esendIpv4Packet\x12.\n" +
	"\x12sendIpv4PacketRate\x18\f \x01(\x04R\x12sendIpv4PacketRate\x12 \n" +
	"\vsendIpv6Bit\x18\r \x01(\x04R\vsendIpv6Bit\x12(\n" +
	"\x0fsendIpv6BitRate\x18\x0e \x01(\x04R\x0fsendIpv6BitRate\x12&\n" +
	"\x0esendIpv6Packet\x18\x0f \x01(\x04R\x0esendIpv6Packet\x12.\n" +
	"\x12sendIpv6PacketRate\x18\x10 \x01(\x04R\x12sendIpv6PacketRate\x1a\xcb\x01\n" +
	"\rIfControlFlap\x12\x1c\n" +
	"\tifCeiling\x18\x01 \x01(\rR\tifCeiling\x12&\n" +
	"\x0eifCtrlFlapEnbl\x18\x02 \x01(\bR\x0eifCtrlFlapEnbl\x12\x1c\n" +
	"\tifDecayNg\x18\x03 \x01(\rR\tifDecayNg\x12\x1c\n" +
	"\tifDecayOk\x18\x04 \x01(\rR\tifDecayOk\x12\x18\n" +
	"\aifReuse\x18\x05 \x01(\rR\aifReuse\x12\x1e\n" +
	"\n" +
	"ifSuppress\x18\x06 \x01(\rR\n" +
	"ifSuppress\x1a\x89\n" +
	"\n" +
	"\vIfErrorDown\x12g\n" +
	"\x0eerrorDownCause\x18\x01 \x01(\x0e2?.huawei_ifm.Ifm.Interfaces.Interface.IfErrorDown.ErrorDownCauseR\x0eerrorDownCause\x12\"\n" +
	"\frecoveryTime\x18\x02 \x01(\rR\frecoveryTime\x12$\n" +
	"\rremainderTime\x18\x03 \x01(\rR\rremainderTime\"\xc6\b\n" +
	"\x0eErrorDownCause\x12\x1f\n" +
	"\x1bErrorDownCause_AUTOX_DEFEND\x10\x00\x12#\n" +
	"\x1fErrorDownCause_BPDUX_PROTECTION\x10\x01\x12\"\n" +
	"\x1eErrorDownCause_CRCX_STATISTICS\x10\x02\x12\x1f\n" +
	"\x1bErrorDownCause_DUALX_ACTIVE\x10\x03\x12(\n" +
	"$ErrorDownCause_FABRICX_LINKX_FAILURE\x10\x04\x12,\n" +
	"(ErrorDownCause_FABRICX_UPLINKX_THRESHOLD\x10\x05\x122\n" +
	".ErrorDownCause_FORWARDX_ENGINEX_BUFFERX_FAILED\x10\x06\x125\n" +
	"1ErrorDownCause_FORWARDX_ENGINEX_INTERFACEX_FAILED\x10\a\x12\x1a\n" +
	"\x16ErrorDownCause_INVALID\x10\b\x12$\n" +
	" ErrorDownCause_L2X_LOOPX_OCCURED\x10\t\x12\x1d\n" +
	"\x19ErrorDownCause_LEAFX_MSTP\x10\n" +
	"\x12\x1d\n" +
	"\x19ErrorDownCause_LINKX_FLAP\x10\v\x12#\n" +
	"\x1fErrorDownCause_LOOPBACKX_DETECT\x10\f\x12)\n" +
	"%ErrorDownCause_MACX_ADDRESSX_FLAPPING\x10\r\x12 \n" +
	"\x1cErrorDownCause_MONITORX_LINK\x10\x0e\x12\x19\n" +
	"\x15ErrorDownCause_MX_LAG\x10\x0f\x12-\n" +
	")ErrorDownCause_MX_LAGX_CONSISTENCYX_CHECK\x10\x10\x12\"\n" +
	"\x1eErrorDownCause_NOX_STACKX_LINK\x10\x11\x12(\n" +
	"$ErrorDownCause_PORTSECX_REACHEDLIMIT\x10\x12\x12%\n" +
	"!ErrorDownCause_RESOURCEX_MISMATCH\x10\x13\x12/\n" +
	"+ErrorDownCause_SPINEX_MEMBERX_EXCEEDX_LIMIT\x10\x14\x12+\n" +
	"'ErrorDownCause_SPINEX_TYPEX_UNSUPPORTED\x10\x15\x12*\n" +
	"&ErrorDownCause_STACKX_CONFIGX_CONFLICT\x10\x16\x12/\n" +
	"+ErrorDownCause_STACKX_MEMBERX_EXCEEDX_LIMIT\x10\x17\x12+\n" +
	"'ErrorDownCause_STACKX_PACKETX_DEFENSIVE\x10\x18\x12!\n" +
	"\x1dErrorDownCause_STORMX_CONTROL\x10\x19\x12*\n" +
	"&ErrorDownCause_TRANSCEIVERX_POWERX_LOW\x10\x1a\x1a\xa0\t\n" +
	"\x12IfIpIcmpStatistics\x124\n" +
	"\x15dropDirectedBroadcast\x18\x01 \x01(\x04R\x15dropDirectedBroadcast\x12\x1c\n" +
	"\techoReply\x18\x02 \x01(\x04R\techoReply\x12 \n" +
	"\vechoRequest\x18\x03 \x01(\x04R\vechoRequest\x12:\n" +
	"\x18forwardDirectedBroadcast\x18\x04 \x01(\x04R\x18forwardDirectedBroadcast\x12*\n" +
	"\x10informationReply\x18\x05 \x01(\x04R\x10informationReply\x12.\n" +
	"\x12informationRequest\x18\x06 \x01(\x04R\x12informationRequest\x12\x1c\n" +
	"\tinputByte\x18\a \x01(\x04R\tinputByte\x12(\n" +
	"\x0finputICMPPacket\x18\b \x01(\x04R\x0finputICMPPacket\x12&\n" +
	"\x0einputMulticast\x18\t \x01(\x04R\x0einputMulticast\x12 \n" +
	"\vinputPacket\x18\n" +
	" \x01(\x04R\vinputPacket\x12*\n" +
	"\x10invalidTTLPacket\x18\v \x01(\x04R\x10invalidTTLPacket\x12 \n" +
	"\vipHeaderBad\x18\f \x01(\x04R\vipHeaderBad\x12\"\n" +
	"\fnetmaskReply\x18\r \x01(\x04R\fnetmaskReply\x12&\n" +
	"\x0enetmaskRequest\x18\x0e \x01(\x04R\x0enetmaskRequest\x12\x1e\n" +
	"\n" +
	"outputByte\x18\x0f \x01(\x04R\n" +
	"outputByte\x12(\n" +
	"\x0foutputMulticast\x18\x10 \x01(\x04R\x0foutputMulticast\x12\"\n" +
	"\foutputPacket\x18\x11 \x01(\x04R\foutputPacket\x12:\n" +
	"\x18receiveDirectedBroadcast\x18\x12 \x01(\x04R\x18receiveDirectedBroadcast\x12\"\n" +
	"\frouterAdvert\x18\x13 \x01(\x04R\frouterAdvert\x12$\n" +
	"\rrouterSolicit\x18\x14 \x01(\x04R\rrouterSolicit\x12(\n" +
	"\x0froutingRedirect\x18\x15 \x01(\x04R\x0froutingRedirect\x124\n" +
	"\x15sendDirectedBroadcast\x18\x16 \x01(\x04R\x15sendDirectedBroadcast\x12\"\n" +
	"\fsourceQuench\x18\x17 \x01(\x04R\fsourceQuench\x12\x1e\n" +
	"\n" +
	"timeExceed\x18\x18 \x01(\x04R\n" +
	"timeExceed\x12&\n" +
	"\x0etimestampReply\x18\x19 \x01(\x04R\x0etimestampReply\x12*\n" +
	"\x10timestampRequest\x18\x1a \x01(\x04R\x10timestampRequest\x12 \n" +
	"\vttlBeingOne\x18\x1b \x01(\x04R\vttlBeingOne\x12 \n" +
	"\vunknownType\x18\x1c \x01(\x04R\vunknownType\x12 \n" +
	"\vunreachable\x18\x1d \x01(\x04R\vunreachable\x1a\xe2\x01\n" +
	"\fIfIpStatiCfg\x12(\n" +
	"\x0fifIpStatiEnable\x18\x01 \x01(\bR\x0fifIpStatiEnable\x12e\n" +
	"\rifIpStatiMode\x18\x02 \x01(\x0e2?.huawei_ifm.Ifm.Interfaces.Interface.IfIpStatiCfg.IfIpStatiModeR\rifIpStatiMode\"A\n" +
	"\rIfIpStatiMode\x12\x15\n" +
	"\x11IfIpStatiMode_MAC\x10\x00\x12\x19\n" +
	"\x15IfIpStatiMode_FORWARD\x10\x01\x1a\x19\n" +
	"\x05IfMru\x12\x10\n" +
	"\x03mru\x18\x01 \x01(\rR\x03mru\x1aJ\n" +
	"\x10IfMruDiscardStat\x12\x1a\n" +
	"\bdropByte\x18\x01 \x01(\x04R\bdropByte\x12\x1a\n" +
	"\bdropPack\x18\x02 \x01(\x04R\bdropPack\x1a/\n" +
	"\x0fIfMruStatEnable\x12\x1c\n" +
	"\tmruStatEn\x18\x01 \x01(\bR\tmruStatEn\x1a\"\n" +
	"\bIfTcpMss\x12\x16\n" +
	"\x06tcpmss\x18\x01 \x01(\rR\x06tcpmss\x1aR\n" +
	"\fIfTrackRtMtg\x12\x1e\n" +
	"\n" +
	"downWeight\x18\x01 \x01(\rR\n" +
	"downWeight\x12\"\n" +
	"\frouteMtgName\x18\x02 \x01(\tR\frouteMtgName\x1a\xbd\x01\n" +
	"\x0fIfTrapThreshold\x12(\n" +
	"\x0finputResumeRate\x18\x01 \x01(\rR\x0finputResumeRate\x12(\n" +
	"\x0finputRisingRate\x18\x02 \x01(\rR\x0finputRisingRate\x12*\n" +
	"\x10outputResumeRate\x18\x03 \x01(\rR\x10outputResumeRate\x12*\n" +
	"\x10outputRisingRate\x18\x04 \x01(\rR\x10outputRisingRate\x1a\x94\x06\n" +
	"\n" +
	"Ipv4Config\x12]\n" +
	"\vaddrCfgType\x18\x01 \x01(\x0e2;.huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.AddrCfgTypeR\vaddrCfgType\x12]\n" +
	"\vam4CfgAddrs\x18\x02 \x01(\v2;.huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrsR\vam4CfgAddrs\x12 \n" +
	"\vunNumIfName\x18\x03 \x01(\tR\vunNumIfName\x1a\xc5\x03\n" +
	"\vAm4CfgAddrs\x12f\n" +
	"\n" +
	"am4CfgAddr\x18\x01 \x03(\v2F.huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs.Am4CfgAddrR\n" +
	"am4CfgAddr\x1a\xcd\x02\n" +
	"\n" +
	"Am4CfgAddr\x12k\n" +
	"\baddrType\x18\x01 \x01(\x0e2O.huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs.Am4CfgAddr.AddrTypeR\baddrType\x12\x1a\n" +
	"\bifIpAddr\x18\x02 \x01(\tR\bifIpAddr\x12\x1e\n" +
	"\n" +
	"subnetMask\x18\x03 \x01(\tR\n" +
	"subnetMask\x12\x10\n" +
	"\x03tag\x18\x05 \x01(\rR\x03tag\"\x83\x01\n" +
	"\bAddrType\x12\x11\n" +
	"\rAddrType_MAIN\x10\x00\x12\x10\n" +
	"\fAddrType_NAP\x10\x01\x12\x10\n" +
	"\fAddrType_NEG\x10\x02\x12\x17\n" +
	"\x13AddrType_NEG_REMOTE\x10\x03\x12\x10\n" +
	"\fAddrType_SUB\x10\x04\x12\x15\n" +
	"\x11AddrType_UNNUMBER\x10\x05\"^\n" +
	"\vAddrCfgType\x12\x16\n" +
	"\x12AddrCfgType_CONFIG\x10\x00\x12\x1b\n" +
	"\x17AddrCfgType_NEGOTIATION\x10\x01\x12\x1a\n" +
	"\x16AddrCfgType_UNNUMBERED\x10\x02\x1a\xb3\x04\n" +
	"\bIpv4Oper\x12U\n" +
	"\tipv4Addrs\x18\x01 \x01(\v27.huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4AddrsR\tipv4Addrs\x1a\xcf\x03\n" +
	"\tIpv4Addrs\x12\\\n" +
	"\bipv4Addr\x18\x01 \x03(\v2@.huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs.Ipv4AddrR\bipv4Addr\x1a\xe3\x02\n" +
	"\bIpv4Addr\x12e\n" +
	"\baddrType\x18\x01 \x01(\x0e2I.huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs.Ipv4Addr.AddrTypeR\baddrType\x12\x1a\n" +
	"\bifIpAddr\x18\x02 \x01(\tR\bifIpAddr\x12\x1c\n" +
	"\tisIpBlock\x18\x03 \x01(\bR\tisIpBlock\x12\x1e\n" +
	"\n" +
	"subnetMask\x18\x04 \x01(\tR\n" +
	"subnetMask\x12\x10\n" +
	"\x03tag\x18\x05 \x01(\rR\x03tag\"\x83\x01\n" +
	"\bAddrType\x12\x11\n" +
	"\rAddrType_MAIN\x10\x00\x12\x10\n" +
	"\fAddrType_NAP\x10\x01\x12\x10\n" +
	"\fAddrType_NEG\x10\x02\x12\x17\n" +
	"\x13AddrType_NEG_REMOTE\x10\x03\x12\x10\n" +
	"\fAddrType_SUB\x10\x04\x12\x15\n" +
	"\x11AddrType_UNNUMBER\x10\x05\x1a\xda\t\n" +
	"\n" +
	"Ipv6Config\x12]\n" +
	"\vam6CfgAddrs\x18\x01 \x01(\v2;.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrsR\vam6CfgAddrs\x12]\n" +
	"\vam6CgaInfos\x18\x02 \x01(\v2;.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CgaInfosR\vam6CgaInfos\x12$\n" +
	"\rautoLinkLocal\x18\x03 \x01(\bR\rautoLinkLocal\x12\x1e\n" +
	"\n" +
	"enableFlag\x18\x04 \x01(\bR\n" +
	"enableFlag\x12\x16\n" +
	"\x06ifMtu6\x18\x05 \x01(\rR\x06ifMtu6\x12&\n" +
	"\x0espreadMtu6Flag\x18\x06 \x01(\bR\x0espreadMtu6Flag\x1a\xa7\x05\n" +
	"\vAm6CfgAddrs\x12f\n" +
	"\n" +
	"am6CfgAddr\x18\x01 \x03(\v2F.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddrR\n" +
	"am6CfgAddr\x1a\xaf\x04\n" +
	"\n" +
	"Am6CfgAddr\x12$\n" +
	"\raddrPrefixLen\x18\x01 \x01(\rR\raddrPrefixLen\x12n\n" +
	"\taddrType6\x18\x02 \x01(\x0e2P.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr.AddrType6R\taddrType6\x12&\n" +
	"\x0ecollisionCount\x18\x03 \x01(\rR\x0ecollisionCount\x12t\n" +
	"\vifIDGenType\x18\x04 \x01(\x0e2R.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr.IfIDGenTypeR\vifIDGenType\x12\x1c\n" +
	"\tifIp6Addr\x18\x05 \x01(\tR\tifIp6Addr\"~\n" +
	"\tAddrType6\x12\x15\n" +
	"\x11AddrType6_ANYCAST\x10\x00\x12\x13\n" +
	"\x0fAddrType6_EUI64\x10\x01\x12\x14\n" +
	"\x10AddrType6_GLOBAL\x10\x02\x12\x17\n" +
	"\x13AddrType6_LINKLOCAL\x10\x03\x12\x16\n" +
	"\x12AddrType6_NDPREFIX\x10\x04\"O\n" +
	"\vIfIDGenType\x12\x13\n" +
	"\x0fIfIDGenType_CGA\x10\x00\x12\x15\n" +
	"\x11IfIDGenType_EUI64\x10\x01\x12\x14\n" +
	"\x10IfIDGenType_NONE\x10\x02\x1a\xdd\x01\n" +
	"\vAm6CgaInfos\x12f\n" +
	"\n" +
	"am6CgaInfo\x18\x01 \x03(\v2F.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CgaInfos.Am6CgaInfoR\n" +
	"am6CgaInfo\x1af\n" +
	"\n" +
	"Am6CgaInfo\x12\x1a\n" +
	"\bmodifier\x18\x01 \x01(\tR\bmodifier\x12 \n" +
	"\vrsaKeyLabel\x18\x02 \x01(\tR\vrsaKeyLabel\x12\x1a\n" +
	"\bsecLevel\x18\x03 \x01(\rR\bsecLevel\x1a\x89\b\n" +
	"\bIpv6Oper\x12\x1e\n" +
	"\n" +
	"ifOperMtu6\x18\x01 \x01(\rR\n" +
	"ifOperMtu6\x12U\n" +
	"\tipv6Addrs\x18\x02 \x01(\v27.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6AddrsR\tipv6Addrs\x1a\x85\a\n" +
	"\tIpv6Addrs\x12\\\n" +
	"\bipv6Addr\x18\x01 \x03(\v2@.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6AddrR\bipv6Addr\x1a\x99\x06\n" +
	"\bIpv6Addr\x12$\n" +
	"\raddrPrefixLen\x18\x01 \x01(\rR\raddrPrefixLen\x12h\n" +
	"\taddrType6\x18\x02 \x01(\x0e2J.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.AddrType6R\taddrType6\x12&\n" +
	"\x0ecollisionCount\x18\x03 \x01(\rR\x0ecollisionCount\x12n\n" +
	"\vifIDGenType\x18\x04 \x01(\x0e2L.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.IfIDGenTypeR\vifIDGenType\x12\x1c\n" +
	"\tifIp6Addr\x18\x05 \x01(\tR\tifIp6Addr\x12\x1c\n" +
	"\tisIpBlock\x18\x06 \x01(\bR\tisIpBlock\x12_\n" +
	"\x06status\x18\a \x01(\x0e2G.huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.StatusR\x06status\"~\n" +
	"\tAddrType6\x12\x15\n" +
	"\x11AddrType6_ANYCAST\x10\x00\x12\x13\n" +
	"\x0fAddrType6_EUI64\x10\x01\x12\x14\n" +
	"\x10AddrType6_GLOBAL\x10\x02\x12\x17\n" +
	"\x13AddrType6_LINKLOCAL\x10\x03\x12\x16\n" +
	"\x12AddrType6_NDPREFIX\x10\x04\"O\n" +
	"\vIfIDGenType\x12\x13\n" +
	"\x0fIfIDGenType_CGA\x10\x00\x12\x15\n" +
	"\x11IfIDGenType_EUI64\x10\x01\x12\x14\n" +
	"\x10IfIDGenType_NONE\x10\x02\"w\n" +
	"\x06Status\x12\x14\n" +
	"\x10Status_DUPLICATE\x10\x00\x12\x17\n" +
	"\x13Status_INACCESSIBLE\x10\x01\x12\x14\n" +
	"\x10Status_PREFERRED\x10\x02\x12\x14\n" +
	"\x10Status_TENTATIVE\x10\x03\x12\x12\n" +
	"\x0eStatus_UNKNOWN\x10\x04\x1a\xf2\x01\n" +
	"\n" +
	"MainIpAddr\x12\x1a\n" +
	"\bifIpAddr\x18\x01 \x01(\tR\bifIpAddr\x12c\n" +
	"\ripAddrCfgType\x18\x02 \x01(\x0e2=.huawei_ifm.Ifm.Interfaces.Interface.MainIpAddr.IpAddrCfgTypeR\ripAddrCfgType\x12\x1e\n" +
	"\n" +
	"subnetMask\x18\x03 \x01(\tR\n" +
	"subnetMask\"C\n" +
	"\rIpAddrCfgType\x12\x18\n" +
	"\x14IpAddrCfgType_CONFIG\x10\x00\x12\x18\n" +
	"\x14IpAddrCfgType_DELETE\x10\x01\x1a\xc4\x01\n" +
	"\tNetSlices\x12S\n" +
	"\bnetSlice\x18\x01 \x03(\v27.huawei_ifm.Ifm.Interfaces.Interface.NetSlices.NetSliceR\bnetSlice\x1ab\n" +
	"\bNetSlice\x12(\n" +
	"\x0fsliceInstanceId\x18\x01 \x01(\rR\x0fsliceInstanceId\x12,\n" +
	"\x11sliceInstanceName\x18\x02 \x01(\tR\x11sliceInstanceName\x1a\xe2\x03\n" +
	"\fPhyDampIfCfg\x12*\n" +
	"\x10dampIgnoreGlobal\x18\x01 \x01(\bR\x10dampIgnoreGlobal\x12\"\n" +
	"\fifDampEnable\x18\x02 \x01(\bR\fifDampEnable\x12_\n" +
	"\vifDampLevel\x18\x03 \x01(\x0e2=.huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfCfg.IfDampLevelR\vifDampLevel\x12 \n" +
	"\vifDampTxOff\x18\x04 \x01(\bR\vifDampTxOff\x12*\n" +
	"\x10ifHalfLifePeriod\x18\x05 \x01(\rR\x10ifHalfLifePeriod\x12,\n" +
	"\x11ifMaxSuppressTime\x18\x06 \x01(\rR\x11ifMaxSuppressTime\x12\x18\n" +
	"\aifReuse\x18\a \x01(\rR\aifReuse\x12\x1e\n" +
	"\n" +
	"ifSuppress\x18\b \x01(\rR\n" +
	"ifSuppress\"k\n" +
	"\vIfDampLevel\x12\x15\n" +
	"\x11IfDampLevel_HEAVY\x10\x00\x12\x15\n" +
	"\x11IfDampLevel_LIGHT\x10\x01\x12\x16\n" +
	"\x12IfDampLevel_MANUAL\x10\x02\x12\x16\n" +
	"\x12IfDampLevel_MIDDLE\x10\x03\x1a\xde\x03\n" +
	"\rPhyDampIfOper\x12&\n" +
	"\x0ecurrentPenalty\x18\x01 \x01(\rR\x0ecurrentPenalty\x12$\n" +
	"\rdampReuseTime\x18\x02 \x01(\rR\rdampReuseTime\x12*\n" +
	"\x10ifHalfLifePeriod\x18\x03 \x01(\rR\x10ifHalfLifePeriod\x12\"\n" +
	"\fifMaxPenalty\x18\x04 \x01(\rR\fifMaxPenalty\x12,\n" +
	"\x11ifMaxSuppressTime\x18\x05 \x01(\rR\x11ifMaxSuppressTime\x12\x18\n" +
	"\aifReuse\x18\x06 \x01(\rR\aifReuse\x12\x1e\n" +
	"\n" +
	"ifSuppress\x18\a \x01(\rR\n" +
	"ifSuppress\x12o\n" +
	"\x10ifSuppressStatus\x18\b \x01(\x0e2C.huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfOper.IfSuppressStatusR\x10ifSuppressStatus\"V\n" +
	"\x10IfSuppressStatus\x12\x1f\n" +
	"\x1bIfSuppressStatus_SUPPRESSED\x10\x00\x12!\n" +
	"\x1dIfSuppressStatus_UNSUPPRESSED\x10\x01\x1a>\n" +
	"\fPhyIfMacStat\x12.\n" +
	"\x12phyIfMacStatEnable\x18\x01 \x01(\bR\x12phyIfMacStatEnable\x1a\xa6&\n" +
	"\x03Ppp\x12\x1e\n" +
	"\n" +
	"chapPaswrd\x18\x01 \x01(\tR\n" +
	"chapPaswrd\x12\"\n" +
	"\fchapUserName\x18\x02 \x01(\tR\fchapUserName\x12M\n" +
	"\bcrcParam\x18\x03 \x01(\v21.huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParamR\bcrcParam\x12\"\n" +
	"\fdeadLinkTime\x18\x04 \x01(\rR\fdeadLinkTime\x12b\n" +
	"\x0fdispPppInfoNode\x18\x05 \x01(\v28.huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNodeR\x0fdispPppInfoNode\x12 \n" +
	"\vdnsAdmitAny\x18\x06 \x01(\bR\vdnsAdmitAny\x12\x1e\n" +
	"\n" +
	"ifChapAuth\x18\a \x01(\bR\n" +
	"ifChapAuth\x12G\n" +
	"\x06ifLink\x18\b \x01(\v2/.huawei_ifm.Ifm.Interfaces.Interface.Ppp.IfLinkR\x06ifLink\x12\x1c\n" +
	"\tifPapAuth\x18\t \x01(\bR\tifPapAuth\x12$\n" +
	"\rmagicNumCheck\x18\n" +
	" \x01(\bR\rmagicNumCheck\x12S\n" +
	"\n" +
	"mplscpNego\x18\v \x01(\x0e23.huawei_ifm.Ifm.Interfaces.Interface.Ppp.MplscpNegoR\n" +
	"mplscpNego\x12S\n" +
	"\n" +
	"mruNegoMtd\x18\f \x01(\x0e23.huawei_ifm.Ifm.Interfaces.Interface.Ppp.MruNegoMtdR\n" +
	"mruNegoMtd\x12 \n" +
	"\vnegoTimeout\x18\r \x01(\rR\vnegoTimeout\x12P\n" +
	"\tosicpNego\x18\x0e \x01(\x0e22.huawei_ifm.Ifm.Interfaces.Interface.Ppp.OsicpNegoR\tosicpNego\x12\x1c\n" +
	"\tpapPaswrd\x18\x0f \x01(\tR\tpapPaswrd\x12 \n" +
	"\vpapUserName\x18\x10 \x01(\tR\vpapUserName\x12$\n" +
	"\rpeerHostRoute\x18\x11 \x01(\bR\rpeerHostRoute\x12\x1e\n" +
	"\n" +
	"peerIpAddr\x18\x12 \x01(\tR\n" +
	"peerIpAddr\x12\\\n" +
	"\rpppStatistics\x18\x13 \x01(\v26.huawei_ifm.Ifm.Interfaces.Interface.Ppp.PppStatisticsR\rpppStatistics\x12 \n" +
	"\vprimDNSAddr\x18\x14 \x01(\tR\vprimDNSAddr\x12\"\n" +
	"\fsecndDNSAddr\x18\x15 \x01(\tR\fsecndDNSAddr\x1a\xc6\x06\n" +
	"\bCrcParam\x12\x1c\n" +
	"\tbitAlaCof\x18\x01 \x01(\rR\tbitAlaCof\x12\x1c\n" +
	"\tbitAlaPow\x18\x02 \x01(\rR\tbitAlaPow\x12\x1c\n" +
	"\tbitResCof\x18\x03 \x01(\rR\tbitResCof\x12\x1c\n" +
	"\tbitResPow\x18\x04 \x01(\rR\tbitResPow\x12$\n" +
	"\rchildAlarmNum\x18\x05 \x01(\rR\rchildAlarmNum\x12 \n" +
	"\vchildMaxNum\x18\x06 \x01(\rR\vchildMaxNum\x12\"\n" +
	"\fchildResmNum\x18\a \x01(\rR\fchildResmNum\x12P\n" +
	"\x06crcBit\x18\b \x01(\x0e28.huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam.CrcBitR\x06crcBit\x12S\n" +
	"\aerrType\x18\t \x01(\x0e29.huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam.ErrTypeR\aerrType\x12$\n" +
	"\rhighThreshold\x18\n" +
	" \x01(\rR\rhighThreshold\x12\x1a\n" +
	"\binterval\x18\v \x01(\rR\binterval\x12\"\n" +
	"\flowThreshold\x18\f \x01(\rR\flowThreshold\x12\x1c\n" +
	"\tpktAlaCof\x18\r \x01(\rR\tpktAlaCof\x12\x1c\n" +
	"\tpktAlaPow\x18\x0e \x01(\rR\tpktAlaPow\x12\x1c\n" +
	"\tpktResCof\x18\x0f \x01(\rR\tpktResCof\x12\x1c\n" +
	"\tpktResPow\x18\x10 \x01(\rR\tpktResPow\x12\"\n" +
	"\fsampleFactor\x18\x11 \x01(\rR\fsampleFactor\x12\x1a\n" +
	"\bshutdown\x18\x12 \x01(\bR\bshutdown\"*\n" +
	"\x06CrcBit\x12\x0f\n" +
	"\vCrcBit_X_16\x10\x00\x12\x0f\n" +
	"\vCrcBit_X_32\x10\x01\"e\n" +
	"\aErrType\x12\x17\n" +
	"\x13ErrType_BITERRRATIO\x10\x00\x12\x13\n" +
	"\x0fErrType_DEFAULT\x10\x01\x12\x13\n" +
	"\x0fErrType_HIGHLOW\x10\x02\x12\x17\n" +
	"\x13ErrType_PKTERRRATIO\x10\x03\x1a\xb4\x13\n" +
	"\x0fDispPppInfoNode\x12c\n" +
	"\n" +
	"downEvents\x18\x01 \x01(\v2C.huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEventsR\n" +
	"downEvents\x12c\n" +
	"\n" +
	"ip6cpState\x18\x02 \x01(\x0e2C.huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.Ip6CpStateR\n" +
	"ip6cpState\x12`\n" +
	"\tipcpState\x18\x03 \x01(\x0e2B.huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.IpcpStateR\tipcpState\x12]\n" +
	"\blcpState\x18\x04 \x01(\x0e2A.huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.LcpStateR\blcpState\x12\x1a\n" +
	"\blocalMru\x18\x05 \x01(\rR\blocalMru\x12\x1a\n" +
	"\bmagicNum\x18\x06 \x01(\rR\bmagicNum\x12f\n" +
	"\vmplscpState\x18\a \x01(\x0e2D.huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.MplscpStateR\vmplscpState\x12 \n" +
	"\vnegoTimeOut\x18\b \x01(\rR\vnegoTimeOut\x12c\n" +
	"\n" +
	"osicpState\x18\t \x01(\x0e2C.huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.OsicpStateR\n" +
	"osicpState\x12\x1e\n" +
	"\n" +
	"peerIpaddr\x18\n" +
	" \x01(\tR\n" +
	"peerIpaddr\x12\x18\n" +
	"\apeerMru\x18\v \x01(\rR\apeerMru\x1a\xe8\x02\n" +
	"\n" +
	"DownEvents\x12k\n" +
	"\tdownEvent\x18\x01 \x03(\v2M.huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents.DownEventR\tdownEvent\x1a\xec\x01\n" +
	"\tDownEvent\x12\x1e\n" +
	"\n" +
	"downReason\x18\x01 \x01(\tR\n" +
	"downReason\x12\x1a\n" +
	"\bdownTime\x18\x02 \x01(\tR\bdownTime\x12r\n" +
	"\blinkType\x18\x03 \x01(\x0e2V.huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents.DownEvent.LinkTypeR\blinkType\"/\n" +
	"\bLinkType\x12\x11\n" +
	"\rLinkType_IPCP\x10\x00\x12\x10\n" +
	"\fLinkType_LCP\x10\x01\"\x91\x02\n" +
	"\n" +
	"Ip6CpState\x12\x16\n" +
	"\x12Ip6CpState_ACKRCVD\x10\x00\x12\x16\n" +
	"\x12Ip6CpState_ACKSENT\x10\x01\x12\x15\n" +
	"\x11Ip6CpState_CLOSED\x10\x02\x12\x16\n" +
	"\x12Ip6CpState_CLOSING\x10\x03\x12\x16\n" +
	"\x12Ip6CpState_INITIAL\x10\x04\x12\x13\n" +
	"\x0fIp6CpState_NONE\x10\x05\x12\x15\n" +
	"\x11Ip6CpState_OPENED\x10\x06\x12\x16\n" +
	"\x12Ip6CpState_REQSENT\x10\a\x12\x17\n" +
	"\x13Ip6CpState_STARTING\x10\b\x12\x16\n" +
	"\x12Ip6CpState_STOPPED\x10\t\x12\x17\n" +
	"\x13Ip6CpState_STOPPING\x10\n" +
	"\"\x85\x02\n" +
	"\tIpcpState\x12\x15\n" +
	"\x11IpcpState_ACKRCVD\x10\x00\x12\x15\n" +
	"\x11IpcpState_ACKSENT\x10\x01\x12\x14\n" +
	"\x10IpcpState_CLOSED\x10\x02\x12\x15\n" +
	"\x11IpcpState_CLOSING\x10\x03\x12\x15\n" +
	"\x11IpcpState_INITIAL\x10\x04\x12\x12\n" +
	"\x0eIpcpState_NONE\x10\x05\x12\x14\n" +
	"\x10IpcpState_OPENED\x10\x06\x12\x15\n" +
	"\x11IpcpState_REQSENT\x10\a\x12\x16\n" +
	"\x12IpcpState_STARTING\x10\b\x12\x15\n" +
	"\x11IpcpState_STOPPED\x10\t\x12\x16\n" +
	"\x12IpcpState_STOPPING\x10\n" +
	"\"\xf9\x01\n" +
	"\bLcpState\x12\x14\n" +
	"\x10LcpState_ACKRCVD\x10\x00\x12\x14\n" +
	"\x10LcpState_ACKSENT\x10\x01\x12\x13\n" +
	"\x0fLcpState_CLOSED\x10\x02\x12\x14\n" +
	"\x10LcpState_CLOSING\x10\x03\x12\x14\n" +
	"\x10LcpState_INITIAL\x10\x04\x12\x11\n" +
	"\rLcpState_NONE\x10\x05\x12\x13\n" +
	"\x0fLcpState_OPENED\x10\x06\x12\x14\n" +
	"\x10LcpState_REQSENT\x10\a\x12\x15\n" +
	"\x11LcpState_STARTING\x10\b\x12\x14\n" +
	"\x10LcpState_STOPPED\x10\t\x12\x15\n" +
	"\x11LcpState_STOPPING\x10\n" +
	"\"\x9d\x02\n" +
	"\vMplscpState\x12\x17\n" +
	"\x13MplscpState_ACKRCVD\x10\x00\x12\x17\n" +
	"\x13MplscpState_ACKSENT\x10\x01\x12\x16\n" +
	"\x12MplscpState_CLOSED\x10\x02\x12\x17\n" +
	"\x13MplscpState_CLOSING\x10\x03\x12\x17\n" +
	"\x13MplscpState_INITIAL\x10\x04\x12\x14\n" +
	"\x10MplscpState_NONE\x10\x05\x12\x16\n" +
	"\x12MplscpState_OPENED\x10\x06\x12\x17\n" +
	"\x13MplscpState_REQSENT\x10\a\x12\x18\n" +
	"\x14MplscpState_STARTING\x10\b\x12\x17\n" +
	"\x13MplscpState_STOPPED\x10\t\x12\x18\n" +
	"\x14MplscpState_STOPPING\x10\n" +
	"\"\x91\x02\n" +
	"\n" +
	"OsicpState\x12\x16\n" +
	"\x12OsicpState_ACKRCVD\x10\x00\x12\x16\n" +
	"\x12OsicpState_ACKSENT\x10\x01\x12\x15\n" +
	"\x11OsicpState_CLOSED\x10\x02\x12\x16\n" +
	"\x12OsicpState_CLOSING\x10\x03\x12\x16\n" +
	"\x12OsicpState_INITIAL\x10\x04\x12\x13\n" +
	"\x0fOsicpState_NONE\x10\x05\x12\x15\n" +
	"\x11OsicpState_OPENED\x10\x06\x12\x16\n" +
	"\x12OsicpState_REQSENT\x10\a\x12\x17\n" +
	"\x13OsicpState_STARTING\x10\b\x12\x16\n" +
	"\x12OsicpState_STOPPED\x10\t\x12\x17\n" +
	"\x13OsicpState_STOPPING\x10\n" +
	"\x1a,\n" +
	"\x06IfLink\x12\"\n" +
	"\ftimeInternal\x18\x01 \x01(\rR\ftimeInternal\x1a\x8f\x02\n" +
	"\rPppStatistics\x12\"\n" +
	"\finputCrcPkts\x18\x01 \x01(\rR\finputCrcPkts\x12$\n" +
	"\rinputLongPkts\x18\x02 \x01(\rR\rinputLongPkts\x12$\n" +
	"\rinputLostPkts\x18\x03 \x01(\rR\rinputLostPkts\x12&\n" +
	"\x0einputShortPkts\x18\x04 \x01(\rR\x0einputShortPkts\x12 \n" +
	"\voutLostPkts\x18\x05 \x01(\rR\voutLostPkts\x12 \n" +
	"\voutOverPkts\x18\x06 \x01(\rR\voutOverPkts\x12\"\n" +
	"\foutUnderPkts\x18\a \x01(\rR\foutUnderPkts\";\n" +
	"\n" +
	"MplscpNego\x12\x16\n" +
	"\x12MplscpNego_DISABLE\x10\x00\x12\x15\n" +
	"\x11MplscpNego_ENABLE\x10\x01\"6\n" +
	"\n" +
	"MruNegoMtd\x12\x13\n" +
	"\x0fMruNegoMtd_IPV4\x10\x00\x12\x13\n" +
	"\x0fMruNegoMtd_IPV6\x10\x01\"8\n" +
	"\tOsicpNego\x12\x15\n" +
	"\x11OsicpNego_DISABLE\x10\x00\x12\x14\n" +
	"\x10OsicpNego_ENABLE\x10\x01\x1a6\n" +
	"\fRemoteIfStat\x12&\n" +
	"\x0esendMutiPacket\x18\x01 \x01(\x04R\x0esendMutiPacket\x1a\xf5\x02\n" +
	"\x0eTransAlarmDown\x12I\n" +
	"\x03oof\x18\x01 \x01(\x0e27.huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.OofR\x03oof\x12L\n" +
	"\x04pais\x18\x02 \x01(\x0e28.huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.PaisR\x04pais\x12L\n" +
	"\x04prdi\x18\x03 \x01(\x0e28.huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.PrdiR\x04prdi\"&\n" +
	"\x03Oof\x12\x0f\n" +
	"\vOof_DISABLE\x10\x00\x12\x0e\n" +
	"\n" +
	"Oof_ENABLE\x10\x01\")\n" +
	"\x04Pais\x12\x10\n" +
	"\fPais_DISABLE\x10\x00\x12\x0f\n" +
	"\vPais_ENABLE\x10\x01\")\n" +
	"\x04Prdi\x12\x10\n" +
	"\fPrdi_DISABLE\x10\x00\x12\x0f\n" +
	"\vPrdi_ENABLE\x10\x01\x1a]\n" +
	"\tVPosition\x12\x1a\n" +
	"\bvBoardID\x18\x01 \x01(\rR\bvBoardID\x12\x18\n" +
	"\avPortID\x18\x02 \x01(\rR\avPortID\x12\x1a\n" +
	"\bvnfcName\x18\x03 \x01(\tR\bvnfcName\x1a6\n" +
	"\x10VbdIfForwardMode\x12\"\n" +
	"\fvbdIfFwdLoop\x18\x01 \x01(\bR\fvbdIfFwdLoop\x1a\xdc\x01\n" +
	"\aVeGroup\x12\x1c\n" +
	"\tveGroupId\x18\x01 \x01(\rR\tveGroupId\x12Q\n" +
	"\bveIfType\x18\x02 \x01(\x0e25.huawei_ifm.Ifm.Interfaces.Interface.VeGroup.VeIfTypeR\bveIfType\"`\n" +
	"\bVeIfType\x12\x14\n" +
	"\x10VeIfType_INVALID\x10\x00\x12\x11\n" +
	"\rVeIfType_L2VE\x10\x01\x12\x11\n" +
	"\rVeIfType_L3VE\x10\x02\x12\x18\n" +
	"\x14VeIfType_TERMINATEVE\x10\x03\x1a*\n" +
	"\fVeMemberSlot\x12\x1a\n" +
	"\bveSlotId\x18\x01 \x01(\tR\bveSlotId\x1aT\n" +
	"\fVllPwLoopChk\x12$\n" +
	"\rloopCheckTime\x18\x01 \x01(\rR\rloopCheckTime\x12\x1e\n" +
	"\n" +
	"loopEnable\x18\x02 \x01(\bR\n" +
	"loopEnable\"=\n" +
	"\rIfAdminStatus\x12\x16\n" +
	"\x12IfAdminStatus_DOWN\x10\x00\x12\x14\n" +
	"\x10IfAdminStatus_UP\x10\x01\"I\n" +
	"\x0eIfCfgEncapType\x12\x17\n" +
	"\x13IfCfgEncapType_IETF\x10\x00\x12\x1e\n" +
	"\x1aIfCfgEncapType_NONSTANDARD\x10\x01\">\n" +
	"\aIfClass\x12\x19\n" +
	"\x15IfClass_MAININTERFACE\x10\x00\x12\x18\n" +
	"\x14IfClass_SUBINTERFACE\x10\x01\"\xc1\x01\n" +
	"\x0eIfLinkProtocol\x12\x16\n" +
	"\x12IfLinkProtocol_ATM\x10\x00\x12\x1b\n" +
	"\x17IfLinkProtocol_ETHERNET\x10\x01\x12\x15\n" +
	"\x11IfLinkProtocol_FR\x10\x02\x12\x17\n" +
	"\x13IfLinkProtocol_HDLC\x10\x03\x12\x1a\n" +
	"\x16IfLinkProtocol_INVALID\x10\x04\x12\x16\n" +
	"\x12IfLinkProtocol_PPP\x10\x05\x12\x16\n" +
	"\x12IfLinkProtocol_TDM\x10\x06\"h\n" +
	"\x14IfNetworkLayerStatus\x12(\n" +
	"$IfNetworkLayerStatus_IPV4ANDIPV6DOWN\x10\x00\x12&\n" +
	"\"IfNetworkLayerStatus_IPV4ANDIPV6UP\x10\x01\"\xd5\x06\n" +
	"\x0fIfOperEncapType\x12\x19\n" +
	"\x15IfOperEncapType_DOT1Q\x10\x00\x12\x1f\n" +
	"\x1bIfOperEncapType_DOT1QPOLICY\x10\x01\x12\x1e\n" +
	"\x1aIfOperEncapType_EVCDEFAULT\x10\x02\x12\x1c\n" +
	"\x18IfOperEncapType_EVCDOT1Q\x10\x03\x12\"\n" +
	"\x1eIfOperEncapType_EVCDOT1QPOLICY\x10\x04\x12\x1b\n" +
	"\x17IfOperEncapType_EVCQINQ\x10\x05\x12\x1c\n" +
	"\x18IfOperEncapType_EVCUNTAG\x10\x06\x12\x18\n" +
	"\x14IfOperEncapType_IETF\x10\a\x12\x1b\n" +
	"\x17IfOperEncapType_INVALID\x10\b\x12\x18\n" +
	"\x14IfOperEncapType_L2VC\x10\t\x12\x18\n" +
	"\x14IfOperEncapType_L2VE\x10\n" +
	"\x12\x18\n" +
	"\x14IfOperEncapType_L3VC\x10\v\x12\x18\n" +
	"\x14IfOperEncapType_L3VE\x10\f\x12\x1b\n" +
	"\x17IfOperEncapType_L3VEACC\x10\r\x12\x1b\n" +
	"\x17IfOperEncapType_L3VETER\x10\x0e\x12\x1f\n" +
	"\x1bIfOperEncapType_NONSTANDARD\x10\x0f\x12\x18\n" +
	"\x14IfOperEncapType_P2MP\x10\x10\x12\x17\n" +
	"\x13IfOperEncapType_P2P\x10\x11\x12\x18\n" +
	"\x14IfOperEncapType_QINQ\x10\x12\x12\x1c\n" +
	"\x18IfOperEncapType_QINQLINK\x10\x13\x12\x1f\n" +
	"\x1bIfOperEncapType_QINQMAPPING\x10\x14\x12\x1d\n" +
	"\x19IfOperEncapType_SOFTGREVE\x10\x15\x12\"\n" +
	"\x1eIfOperEncapType_STACKINGPOLICY\x10\x16\x12\x1f\n" +
	"\x1bIfOperEncapType_UNTAGPOLICY\x10\x17\x12\x1c\n" +
	"\x18IfOperEncapType_USERVLAN\x10\x18\x12\x1f\n" +
	"\x1bIfOperEncapType_USERVLANANY\x10\x19\x12\x1c\n" +
	"\x18IfOperEncapType_VLANTYPE\x10\x1a\x12\"\n" +
	"\x1eIfOperEncapType_VLANTYPEPOLICY\x10\x1b\"\xb3\x0e\n" +
	"\tIfPhyType\x12\x11\n" +
	"\rIfPhyType_ATM\x10\x00\x12\x19\n" +
	"\x15IfPhyType_ATMX_BUNDLE\x10\x01\x12\x12\n" +
	"\x0eIfPhyType_CPOS\x10\x02\x12\x19\n" +
	"\x15IfPhyType_CPOSX_TRUNK\x10\x03\x12\x1a\n" +
	"\x16IfPhyType_DCNINTERFACE\x10\x04\x12\x10\n" +
	"\fIfPhyType_E1\x10\x05\x12\x10\n" +
	"\fIfPhyType_E3\x10\x06\x12\x16\n" +
	"\x12IfPhyType_ETHERNET\x10\a\x12\x18\n" +
	"\x14IfPhyType_ETHX_TRUNK\x10\b\x12\x1a\n" +
	"\x16IfPhyType_FABRICX_PORT\x10\t\x12\x10\n" +
	"\fIfPhyType_FC\x10\n" +
	"\x12\x18\n" +
	"\x14IfPhyType_FCOEX_PORT\x10\v\x12\x1c\n" +
	"\x18IfPhyType_FIBERX_CHANNEL\x10\f\x12\x13\n" +
	"\x0fIfPhyType_FLEXE\x10\r\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_100G\x10\x0e\x12\x1a\n" +
	"\x16IfPhyType_FLEXEX_200GE\x10\x0f\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_400G\x10\x10\x12\x18\n" +
	"\x14IfPhyType_FLEXEX_50G\x10\x11\x12\x1d\n" +
	"\x19IfPhyType_FLEXEX_50X_100G\x10\x12\x12\x15\n" +
	"\x11IfPhyType_GEBRIEF\x10\x13\x12\x1d\n" +
	"\x19IfPhyType_GIGABITETHERNET\x10\x14\x12 \n" +
	"\x1cIfPhyType_GLOBALX_IMAX_GROUP\x10\x15\x12\x1f\n" +
	"\x1bIfPhyType_GLOBALX_MPX_GROUP\x10\x16\x12\x18\n" +
	"\x14IfPhyType_GLOBALX_VE\x10\x17\x12\x18\n" +
	"\x14IfPhyType_GMPLSX_UNI\x10\x18\x12\x12\n" +
	"\x0eIfPhyType_HPGE\x10\x19\x12\x18\n" +
	"\x14IfPhyType_IMAX_GROUP\x10\x1a\x12\x13\n" +
	"\x0fIfPhyType_IMETH\x10\x1b\x12\x18\n" +
	"\x14IfPhyType_INFINIBAND\x10\x1c\x12\x17\n" +
	"\x13IfPhyType_IPX_TRUNK\x10\x1d\x12\x13\n" +
	"\x0fIfPhyType_LMPIF\x10\x1e\x12\x16\n" +
	"\x12IfPhyType_LOOPBACK\x10\x1f\x12\x12\n" +
	"\x0eIfPhyType_METH\x10 \x12\x17\n" +
	"\x13IfPhyType_MPX_GROUP\x10!\x12\x15\n" +
	"\x11IfPhyType_MTUNNEL\x10\"\x12\x12\n" +
	"\x0eIfPhyType_NULL\x10#\x12\x11\n" +
	"\rIfPhyType_NVE\x10$\x12\x11\n" +
	"\rIfPhyType_OTN\x10%\x12\x11\n" +
	"\rIfPhyType_POS\x10&\x12\x18\n" +
	"\x14IfPhyType_POSX_TRUNK\x10'\x12\x14\n" +
	"\x10IfPhyType_PWX_VE\x10(\x12\x18\n" +
	"\x14IfPhyType_REMOTEX_AP\x10)\x12\x14\n" +
	"\x10IfPhyType_SERIAL\x10*\x12\x17\n" +
	"\x13IfPhyType_SERVICEIF\x10+\x12\x11\n" +
	"\rIfPhyType_SIP\x10,\x12\x19\n" +
	"\x15IfPhyType_STACKX_PORT\x10-\x12\x10\n" +
	"\fIfPhyType_T1\x10.\x12\x10\n" +
	"\fIfPhyType_T3\x10/\x12\x1b\n" +
	"\x17IfPhyType_TRUNKX_SERIAL\x100\x12\x14\n" +
	"\x10IfPhyType_TUNNEL\x101\x12\x13\n" +
	"\x0fIfPhyType_VBDIF\x102\x12\x15\n" +
	"\x11IfPhyType_VBRIDGE\x103\x12\x12\n" +
	"\x0eIfPhyType_VC12\x104\x12\x11\n" +
	"\rIfPhyType_VC4\x105\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_ETHERNET\x106\x12\x1b\n" +
	"\x17IfPhyType_VIRTUALX_ODUK\x107\x12\x1d\n" +
	"\x19IfPhyType_VIRTUALX_SERIAL\x108\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_TEMPLATE\x109\x12\x14\n" +
	"\x10IfPhyType_VLANIF\x10:\x12\x13\n" +
	"\x0fIfPhyType_VMETH\x10;\x12\x10\n" +
	"\fIfPhyType_VP\x10<\x12\x18\n" +
	"\x14IfPhyType_VXX_TUNNEL\x10=\x12\x11\n" +
	"\rIfPhyType_WDM\x10>\x12\x1e\n" +
	"\x1aIfPhyType_XGIGABITETHERNET\x10?\x12\x15\n" +
	"\x11IfPhyType_X_100GE\x10@\x12\x14\n" +
	"\x10IfPhyType_X_10GE\x10A\x12\x17\n" +
	"\x13IfPhyType_X_10X10GE\x10B\x12\x15\n" +
	"\x11IfPhyType_X_200GE\x10C\x12\x14\n" +
	"\x10IfPhyType_X_25GE\x10D\x12\x16\n" +
	"\x12IfPhyType_X_3X40GE\x10E\x12\x15\n" +
	"\x11IfPhyType_X_400GE\x10F\x12\x14\n" +
	"\x10IfPhyType_X_40GE\x10G\x12\x16\n" +
	"\x12IfPhyType_X_4X10GE\x10H\x12\x16\n" +
	"\x12IfPhyType_X_4X25GE\x10I\x12\x14\n" +
	"\x10IfPhyType_X_50GE\x10J\x12\x19\n" +
	"\x15IfPhyType_X_50X_100GE\x10K\"\x8a\x01\n" +
	"\fIfRouterType\x12\x1a\n" +
	"\x16IfRouterType_BROADCAST\x10\x00\x12\x18\n" +
	"\x14IfRouterType_INVALID\x10\x01\x12\x15\n" +
	"\x11IfRouterType_NBMA\x10\x02\x12\x16\n" +
	"\x12IfRouterType_PTOMP\x10\x03\x12\x15\n" +
	"\x11IfRouterType_PTOP\x10\x04\"\xce\x03\n" +
	"\rIfServiceType\x12\x1e\n" +
	"\x1aIfServiceType_BUNDLEMEMBER\x10\x00\x12!\n" +
	"\x1dIfServiceType_CPOSTRUNKMEMBER\x10\x01\x12\x1e\n" +
	"\x1aIfServiceType_FABRICMEMBER\x10\x02\x12!\n" +
	"\x1dIfServiceType_GLOBALIMAMEMBER\x10\x03\x12 \n" +
	"\x1cIfServiceType_GLOBALMPMEMBER\x10\x04\x12\x1b\n" +
	"\x17IfServiceType_IMAMEMBER\x10\x05\x12!\n" +
	"\x1dIfServiceType_LAGMASTERMEMBER\x10\x06\x12 \n" +
	"\x1cIfServiceType_LAGSLAVEMEMBER\x10\a\x12\x1a\n" +
	"\x16IfServiceType_MPMEMBER\x10\b\x12\x16\n" +
	"\x12IfServiceType_NONE\x10\t\x12 \n" +
	"\x1cIfServiceType_POSTRUNKMEMBER\x10\n" +
	"\x12\x1d\n" +
	"\x19IfServiceType_STACKMEMBER\x10\v\x12\x1d\n" +
	"\x19IfServiceType_TRUNKMEMBER\x10\f\x12\x1f\n" +
	"\x1bIfServiceType_VBRIDGEMEMBER\x10\r\">\n" +
	"\bPortMode\x12\x0f\n" +
	"\vPortMode_L2\x10\x00\x12\x0f\n" +
	"\vPortMode_L3\x10\x01\x12\x10\n" +
	"\fPortMode_MIX\x10\x02\"B\n" +
	"\bStatMode\x12\x1a\n" +
	"\x16StatMode_BASEINTERFACE\x10\x00\x12\x1a\n" +
	"\x16StatMode_BASEVLANGROUP\x10\x01\x1a\xbb\n" +
	"\n" +
	"\x11AutoRecoveryTimes\x12^\n" +
	"\x10autoRecoveryTime\x18\x01 \x03(\v22.huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTimeR\x10autoRecoveryTime\x1a\xc5\t\n" +
	"\x10AutoRecoveryTime\x12f\n" +
	"\rerrorDownType\x18\x01 \x01(\x0e2@.huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.ErrorDownTypeR\rerrorDownType\x12\x1c\n" +
	"\ttimeValue\x18\x02 \x01(\rR\ttimeValue\"\xaa\b\n" +
	"\rErrorDownType\x12\x1e\n" +
	"\x1aErrorDownType_AUTOX_DEFEND\x10\x00\x12\"\n" +
	"\x1eErrorDownType_BPDUX_PROTECTION\x10\x01\x12!\n" +
	"\x1dErrorDownType_CRCX_STATISTICS\x10\x02\x12\x1e\n" +
	"\x1aErrorDownType_DUALX_ACTIVE\x10\x03\x12'\n" +
	"#ErrorDownType_FABRICX_LINKX_FAILURE\x10\x04\x12+\n" +
	"'ErrorDownType_FABRICX_UPLINKX_THRESHOLD\x10\x05\x121\n" +
	"-ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED\x10\x06\x124\n" +
	"0ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED\x10\a\x12\x19\n" +
	"\x15ErrorDownType_INVALID\x10\b\x12#\n" +
	"\x1fErrorDownType_L2X_LOOPX_OCCURED\x10\t\x12\x1c\n" +
	"\x18ErrorDownType_LEAFX_MSTP\x10\n" +
	"\x12\x1c\n" +
	"\x18ErrorDownType_LINKX_FLAP\x10\v\x12\"\n" +
	"\x1eErrorDownType_LOOPBACKX_DETECT\x10\f\x12(\n" +
	"$ErrorDownType_MACX_ADDRESSX_FLAPPING\x10\r\x12\x1f\n" +
	"\x1bErrorDownType_MONITORX_LINK\x10\x0e\x12\x18\n" +
	"\x14ErrorDownType_MX_LAG\x10\x0f\x12,\n" +
	"(ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK\x10\x10\x12!\n" +
	"\x1dErrorDownType_NOX_STACKX_LINK\x10\x11\x12'\n" +
	"#ErrorDownType_PORTSECX_REACHEDLIMIT\x10\x12\x12$\n" +
	" ErrorDownType_RESOURCEX_MISMATCH\x10\x13\x12.\n" +
	"*ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT\x10\x14\x12*\n" +
	"&ErrorDownType_SPINEX_TYPEX_UNSUPPORTED\x10\x15\x12)\n" +
	"%ErrorDownType_STACKX_CONFIGX_CONFLICT\x10\x16\x12.\n" +
	"*ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT\x10\x17\x12*\n" +
	"&ErrorDownType_STACKX_PACKETX_DEFENSIVE\x10\x18\x12 \n" +
	"\x1cErrorDownType_STORMX_CONTROL\x10\x19\x12)\n" +
	"%ErrorDownType_TRANSCEIVERX_POWERX_LOW\x10\x1a\x1a\xde\x04\n" +
	"\fGlobalConfig\x12A\n" +
	"\bdualStat\x18\x01 \x01(\v2%.huawei_ifm.Ifm.GlobalConfig.DualStatR\bdualStat\x12&\n" +
	"\x0eglobalStatItvl\x18\x02 \x01(\rR\x0eglobalStatItvl\x12e\n" +
	"\x14ipv4IgnorePrimarySub\x18\x03 \x01(\x0e21.huawei_ifm.Ifm.GlobalConfig.Ipv4IgnorePrimarySubR\x14ipv4IgnorePrimarySub\x128\n" +
	"\x17subIfLinkDownTrapEnable\x18\x04 \x01(\bR\x17subIfLinkDownTrapEnable\x12_\n" +
	"\x12sysAttriControlMtu\x18\x05 \x01(\x0e2/.huawei_ifm.Ifm.GlobalConfig.SysAttriControlMtuR\x12sysAttriControlMtu\x1a2\n" +
	"\bDualStat\x12&\n" +
	"\x0edualStatEnable\x18\x01 \x01(\bR\x0edualStatEnable\"Y\n" +
	"\x14Ipv4IgnorePrimarySub\x12 \n" +
	"\x1cIpv4IgnorePrimarySub_DISABLE\x10\x00\x12\x1f\n" +
	"\x1bIpv4IgnorePrimarySub_ENABLE\x10\x01\"R\n" +
	"\x12SysAttriControlMtu\x12\x1d\n" +
	"\x19SysAttriControlMtu_X_1450\x10\x00\x12\x1d\n" +
	"\x19SysAttriControlMtu_X_1500\x10\x01\x1a\x9b\x03\n" +
	"\bHdlcDamp\x12&\n" +
	"\x0ehdlcDampEnable\x18\x01 \x01(\bR\x0ehdlcDampEnable\x12L\n" +
	"\rhdlcDampLevel\x18\x02 \x01(\x0e2&.huawei_ifm.Ifm.HdlcDamp.HdlcDampLevelR\rhdlcDampLevel\x12.\n" +
	"\x12hdlcHalfLifePeriod\x18\x03 \x01(\rR\x12hdlcHalfLifePeriod\x120\n" +
	"\x13hdlcMaxSuppressTime\x18\x04 \x01(\rR\x13hdlcMaxSuppressTime\x12\x1c\n" +
	"\thdlcReuse\x18\x05 \x01(\rR\thdlcReuse\x12\"\n" +
	"\fhdlcSuppress\x18\x06 \x01(\rR\fhdlcSuppress\"u\n" +
	"\rHdlcDampLevel\x12\x17\n" +
	"\x13HdlcDampLevel_HEAVY\x10\x00\x12\x17\n" +
	"\x13HdlcDampLevel_LIGHT\x10\x01\x12\x18\n" +
	"\x14HdlcDampLevel_MANUAL\x10\x02\x12\x18\n" +
	"\x14HdlcDampLevel_MIDDLE\x10\x03\x1a\x95\x03\n" +
	"\x06IfDamp\x12\"\n" +
	"\fifDampEnable\x18\x01 \x01(\bR\fifDampEnable\x12D\n" +
	"\vifDampLevel\x18\x02 \x01(\x0e2\".huawei_ifm.Ifm.IfDamp.IfDampLevelR\vifDampLevel\x12 \n" +
	"\vifDampTxOff\x18\x03 \x01(\bR\vifDampTxOff\x12*\n" +
	"\x10ifHalfLifePeriod\x18\x04 \x01(\rR\x10ifHalfLifePeriod\x12,\n" +
	"\x11ifMaxSuppressTime\x18\x05 \x01(\rR\x11ifMaxSuppressTime\x12\x18\n" +
	"\aifReuse\x18\x06 \x01(\rR\aifReuse\x12\x1e\n" +
	"\n" +
	"ifSuppress\x18\a \x01(\rR\n" +
	"ifSuppress\"k\n" +
	"\vIfDampLevel\x12\x15\n" +
	"\x11IfDampLevel_HEAVY\x10\x00\x12\x15\n" +
	"\x11IfDampLevel_LIGHT\x10\x01\x12\x16\n" +
	"\x12IfDampLevel_MANUAL\x10\x02\x12\x16\n" +
	"\x12IfDampLevel_MIDDLE\x10\x03\x1a\xb6\x11\n" +
	"\x0fInterfaceCounts\x12V\n" +
	"\x0einterfaceCount\x18\x01 \x03(\v2..huawei_ifm.Ifm.InterfaceCounts.InterfaceCountR\x0einterfaceCount\x1a\xca\x10\n" +
	"\x0eInterfaceCount\x12P\n" +
	"\aifClass\x18\x01 \x01(\x0e26.huawei_ifm.Ifm.InterfaceCounts.InterfaceCount.IfClassR\aifClass\x12\x18\n" +
	"\aifCount\x18\x02 \x01(\rR\aifCount\x12V\n" +
	"\tifPhyType\x18\x03 \x01(\x0e28.huawei_ifm.Ifm.InterfaceCounts.InterfaceCount.IfPhyTypeR\tifPhyType\">\n" +
	"\aIfClass\x12\x19\n" +
	"\x15IfClass_MAININTERFACE\x10\x00\x12\x18\n" +
	"\x14IfClass_SUBINTERFACE\x10\x01\"\xb3\x0e\n" +
	"\tIfPhyType\x12\x11\n" +
	"\rIfPhyType_ATM\x10\x00\x12\x19\n" +
	"\x15IfPhyType_ATMX_BUNDLE\x10\x01\x12\x12\n" +
	"\x0eIfPhyType_CPOS\x10\x02\x12\x19\n" +
	"\x15IfPhyType_CPOSX_TRUNK\x10\x03\x12\x1a\n" +
	"\x16IfPhyType_DCNINTERFACE\x10\x04\x12\x10\n" +
	"\fIfPhyType_E1\x10\x05\x12\x10\n" +
	"\fIfPhyType_E3\x10\x06\x12\x16\n" +
	"\x12IfPhyType_ETHERNET\x10\a\x12\x18\n" +
	"\x14IfPhyType_ETHX_TRUNK\x10\b\x12\x1a\n" +
	"\x16IfPhyType_FABRICX_PORT\x10\t\x12\x10\n" +
	"\fIfPhyType_FC\x10\n" +
	"\x12\x18\n" +
	"\x14IfPhyType_FCOEX_PORT\x10\v\x12\x1c\n" +
	"\x18IfPhyType_FIBERX_CHANNEL\x10\f\x12\x13\n" +
	"\x0fIfPhyType_FLEXE\x10\r\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_100G\x10\x0e\x12\x1a\n" +
	"\x16IfPhyType_FLEXEX_200GE\x10\x0f\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_400G\x10\x10\x12\x18\n" +
	"\x14IfPhyType_FLEXEX_50G\x10\x11\x12\x1d\n" +
	"\x19IfPhyType_FLEXEX_50X_100G\x10\x12\x12\x15\n" +
	"\x11IfPhyType_GEBRIEF\x10\x13\x12\x1d\n" +
	"\x19IfPhyType_GIGABITETHERNET\x10\x14\x12 \n" +
	"\x1cIfPhyType_GLOBALX_IMAX_GROUP\x10\x15\x12\x1f\n" +
	"\x1bIfPhyType_GLOBALX_MPX_GROUP\x10\x16\x12\x18\n" +
	"\x14IfPhyType_GLOBALX_VE\x10\x17\x12\x18\n" +
	"\x14IfPhyType_GMPLSX_UNI\x10\x18\x12\x12\n" +
	"\x0eIfPhyType_HPGE\x10\x19\x12\x18\n" +
	"\x14IfPhyType_IMAX_GROUP\x10\x1a\x12\x13\n" +
	"\x0fIfPhyType_IMETH\x10\x1b\x12\x18\n" +
	"\x14IfPhyType_INFINIBAND\x10\x1c\x12\x17\n" +
	"\x13IfPhyType_IPX_TRUNK\x10\x1d\x12\x13\n" +
	"\x0fIfPhyType_LMPIF\x10\x1e\x12\x16\n" +
	"\x12IfPhyType_LOOPBACK\x10\x1f\x12\x12\n" +
	"\x0eIfPhyType_METH\x10 \x12\x17\n" +
	"\x13IfPhyType_MPX_GROUP\x10!\x12\x15\n" +
	"\x11IfPhyType_MTUNNEL\x10\"\x12\x12\n" +
	"\x0eIfPhyType_NULL\x10#\x12\x11\n" +
	"\rIfPhyType_NVE\x10$\x12\x11\n" +
	"\rIfPhyType_OTN\x10%\x12\x11\n" +
	"\rIfPhyType_POS\x10&\x12\x18\n" +
	"\x14IfPhyType_POSX_TRUNK\x10'\x12\x14\n" +
	"\x10IfPhyType_PWX_VE\x10(\x12\x18\n" +
	"\x14IfPhyType_REMOTEX_AP\x10)\x12\x14\n" +
	"\x10IfPhyType_SERIAL\x10*\x12\x17\n" +
	"\x13IfPhyType_SERVICEIF\x10+\x12\x11\n" +
	"\rIfPhyType_SIP\x10,\x12\x19\n" +
	"\x15IfPhyType_STACKX_PORT\x10-\x12\x10\n" +
	"\fIfPhyType_T1\x10.\x12\x10\n" +
	"\fIfPhyType_T3\x10/\x12\x1b\n" +
	"\x17IfPhyType_TRUNKX_SERIAL\x100\x12\x14\n" +
	"\x10IfPhyType_TUNNEL\x101\x12\x13\n" +
	"\x0fIfPhyType_VBDIF\x102\x12\x15\n" +
	"\x11IfPhyType_VBRIDGE\x103\x12\x12\n" +
	"\x0eIfPhyType_VC12\x104\x12\x11\n" +
	"\rIfPhyType_VC4\x105\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_ETHERNET\x106\x12\x1b\n" +
	"\x17IfPhyType_VIRTUALX_ODUK\x107\x12\x1d\n" +
	"\x19IfPhyType_VIRTUALX_SERIAL\x108\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_TEMPLATE\x109\x12\x14\n" +
	"\x10IfPhyType_VLANIF\x10:\x12\x13\n" +
	"\x0fIfPhyType_VMETH\x10;\x12\x10\n" +
	"\fIfPhyType_VP\x10<\x12\x18\n" +
	"\x14IfPhyType_VXX_TUNNEL\x10=\x12\x11\n" +
	"\rIfPhyType_WDM\x10>\x12\x1e\n" +
	"\x1aIfPhyType_XGIGABITETHERNET\x10?\x12\x15\n" +
	"\x11IfPhyType_X_100GE\x10@\x12\x14\n" +
	"\x10IfPhyType_X_10GE\x10A\x12\x17\n" +
	"\x13IfPhyType_X_10X10GE\x10B\x12\x15\n" +
	"\x11IfPhyType_X_200GE\x10C\x12\x14\n" +
	"\x10IfPhyType_X_25GE\x10D\x12\x16\n" +
	"\x12IfPhyType_X_3X40GE\x10E\x12\x15\n" +
	"\x11IfPhyType_X_400GE\x10F\x12\x14\n" +
	"\x10IfPhyType_X_40GE\x10G\x12\x16\n" +
	"\x12IfPhyType_X_4X10GE\x10H\x12\x16\n" +
	"\x12IfPhyType_X_4X25GE\x10I\x12\x14\n" +
	"\x10IfPhyType_X_50GE\x10J\x12\x19\n" +
	"\x15IfPhyType_X_50X_100GE\x10K\x1a\xe2\x05\n" +
	"\x10IpConflictConfig\x12Z\n" +
	"\x0fipConflictCheck\x18\x01 \x01(\x0e20.huawei_ifm.Ifm.IpConflictConfig.IpConflictCheckR\x0fipConflictCheck\x12`\n" +
	"\x11ipConflictPreempt\x18\x02 \x01(\x0e22.huawei_ifm.Ifm.IpConflictConfig.IpConflictPreemptR\x11ipConflictPreempt\x12`\n" +
	"\x11ipv6ConflictCheck\x18\x03 \x01(\x0e22.huawei_ifm.Ifm.IpConflictConfig.Ipv6ConflictCheckR\x11ipv6ConflictCheck\x12f\n" +
	"\x13ipv6ConflictPreempt\x18\x04 \x01(\x0e24.huawei_ifm.Ifm.IpConflictConfig.Ipv6ConflictPreemptR\x13ipv6ConflictPreempt\"J\n" +
	"\x0fIpConflictCheck\x12\x1b\n" +
	"\x17IpConflictCheck_DISABLE\x10\x00\x12\x1a\n" +
	"\x16IpConflictCheck_ENABLE\x10\x01\"P\n" +
	"\x11IpConflictPreempt\x12\x1d\n" +
	"\x19IpConflictPreempt_DISABLE\x10\x00\x12\x1c\n" +
	"\x18IpConflictPreempt_ENABLE\x10\x01\"P\n" +
	"\x11Ipv6ConflictCheck\x12\x1d\n" +
	"\x19Ipv6ConflictCheck_DISABLE\x10\x00\x12\x1c\n" +
	"\x18Ipv6ConflictCheck_ENABLE\x10\x01\"V\n" +
	"\x13Ipv6ConflictPreempt\x12\x1f\n" +
	"\x1bIpv6ConflictPreempt_DISABLE\x10\x00\x12\x1e\n" +
	"\x1aIpv6ConflictPreempt_ENABLE\x10\x01\x1a\xf1\x12\n" +
	"\x14IpInterfaceCountOper\x12&\n" +
	"\x0eifPhyDownCount\x18\x01 \x01(\rR\x0eifPhyDownCount\x12\"\n" +
	"\fifPhyUpCount\x18\x02 \x01(\rR\fifPhyUpCount\x12$\n" +
	"\rifV4DownCount\x18\x03 \x01(\rR\rifV4DownCount\x12 \n" +
	"\vifV4UpCount\x18\x04 \x01(\rR\vifV4UpCount\x12d\n" +
	"\x11ipInterfaceCounts\x18\x05 \x01(\v26.huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCountsR\x11ipInterfaceCounts\x1a\xde\x10\n" +
	"\x11IpInterfaceCounts\x12s\n" +
	"\x10ipInterfaceCount\x18\x01 \x03(\v2G.huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts.IpInterfaceCountR\x10ipInterfaceCount\x1a\xd3\x0f\n" +
	"\x10IpInterfaceCount\x12\x18\n" +
	"\aifCount\x18\x01 \x01(\rR\aifCount\x12o\n" +
	"\tifPhyType\x18\x02 \x01(\x0e2Q.huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts.IpInterfaceCount.IfPhyTypeR\tifPhyType\"\xb3\x0e\n" +
	"\tIfPhyType\x12\x11\n" +
	"\rIfPhyType_ATM\x10\x00\x12\x19\n" +
	"\x15IfPhyType_ATMX_BUNDLE\x10\x01\x12\x12\n" +
	"\x0eIfPhyType_CPOS\x10\x02\x12\x19\n" +
	"\x15IfPhyType_CPOSX_TRUNK\x10\x03\x12\x1a\n" +
	"\x16IfPhyType_DCNINTERFACE\x10\x04\x12\x10\n" +
	"\fIfPhyType_E1\x10\x05\x12\x10\n" +
	"\fIfPhyType_E3\x10\x06\x12\x16\n" +
	"\x12IfPhyType_ETHERNET\x10\a\x12\x18\n" +
	"\x14IfPhyType_ETHX_TRUNK\x10\b\x12\x1a\n" +
	"\x16IfPhyType_FABRICX_PORT\x10\t\x12\x10\n" +
	"\fIfPhyType_FC\x10\n" +
	"\x12\x18\n" +
	"\x14IfPhyType_FCOEX_PORT\x10\v\x12\x1c\n" +
	"\x18IfPhyType_FIBERX_CHANNEL\x10\f\x12\x13\n" +
	"\x0fIfPhyType_FLEXE\x10\r\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_100G\x10\x0e\x12\x1a\n" +
	"\x16IfPhyType_FLEXEX_200GE\x10\x0f\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_400G\x10\x10\x12\x18\n" +
	"\x14IfPhyType_FLEXEX_50G\x10\x11\x12\x1d\n" +
	"\x19IfPhyType_FLEXEX_50X_100G\x10\x12\x12\x15\n" +
	"\x11IfPhyType_GEBRIEF\x10\x13\x12\x1d\n" +
	"\x19IfPhyType_GIGABITETHERNET\x10\x14\x12 \n" +
	"\x1cIfPhyType_GLOBALX_IMAX_GROUP\x10\x15\x12\x1f\n" +
	"\x1bIfPhyType_GLOBALX_MPX_GROUP\x10\x16\x12\x18\n" +
	"\x14IfPhyType_GLOBALX_VE\x10\x17\x12\x18\n" +
	"\x14IfPhyType_GMPLSX_UNI\x10\x18\x12\x12\n" +
	"\x0eIfPhyType_HPGE\x10\x19\x12\x18\n" +
	"\x14IfPhyType_IMAX_GROUP\x10\x1a\x12\x13\n" +
	"\x0fIfPhyType_IMETH\x10\x1b\x12\x18\n" +
	"\x14IfPhyType_INFINIBAND\x10\x1c\x12\x17\n" +
	"\x13IfPhyType_IPX_TRUNK\x10\x1d\x12\x13\n" +
	"\x0fIfPhyType_LMPIF\x10\x1e\x12\x16\n" +
	"\x12IfPhyType_LOOPBACK\x10\x1f\x12\x12\n" +
	"\x0eIfPhyType_METH\x10 \x12\x17\n" +
	"\x13IfPhyType_MPX_GROUP\x10!\x12\x15\n" +
	"\x11IfPhyType_MTUNNEL\x10\"\x12\x12\n" +
	"\x0eIfPhyType_NULL\x10#\x12\x11\n" +
	"\rIfPhyType_NVE\x10$\x12\x11\n" +
	"\rIfPhyType_OTN\x10%\x12\x11\n" +
	"\rIfPhyType_POS\x10&\x12\x18\n" +
	"\x14IfPhyType_POSX_TRUNK\x10'\x12\x14\n" +
	"\x10IfPhyType_PWX_VE\x10(\x12\x18\n" +
	"\x14IfPhyType_REMOTEX_AP\x10)\x12\x14\n" +
	"\x10IfPhyType_SERIAL\x10*\x12\x17\n" +
	"\x13IfPhyType_SERVICEIF\x10+\x12\x11\n" +
	"\rIfPhyType_SIP\x10,\x12\x19\n" +
	"\x15IfPhyType_STACKX_PORT\x10-\x12\x10\n" +
	"\fIfPhyType_T1\x10.\x12\x10\n" +
	"\fIfPhyType_T3\x10/\x12\x1b\n" +
	"\x17IfPhyType_TRUNKX_SERIAL\x100\x12\x14\n" +
	"\x10IfPhyType_TUNNEL\x101\x12\x13\n" +
	"\x0fIfPhyType_VBDIF\x102\x12\x15\n" +
	"\x11IfPhyType_VBRIDGE\x103\x12\x12\n" +
	"\x0eIfPhyType_VC12\x104\x12\x11\n" +
	"\rIfPhyType_VC4\x105\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_ETHERNET\x106\x12\x1b\n" +
	"\x17IfPhyType_VIRTUALX_ODUK\x107\x12\x1d\n" +
	"\x19IfPhyType_VIRTUALX_SERIAL\x108\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_TEMPLATE\x109\x12\x14\n" +
	"\x10IfPhyType_VLANIF\x10:\x12\x13\n" +
	"\x0fIfPhyType_VMETH\x10;\x12\x10\n" +
	"\fIfPhyType_VP\x10<\x12\x18\n" +
	"\x14IfPhyType_VXX_TUNNEL\x10=\x12\x11\n" +
	"\rIfPhyType_WDM\x10>\x12\x1e\n" +
	"\x1aIfPhyType_XGIGABITETHERNET\x10?\x12\x15\n" +
	"\x11IfPhyType_X_100GE\x10@\x12\x14\n" +
	"\x10IfPhyType_X_10GE\x10A\x12\x17\n" +
	"\x13IfPhyType_X_10X10GE\x10B\x12\x15\n" +
	"\x11IfPhyType_X_200GE\x10C\x12\x14\n" +
	"\x10IfPhyType_X_25GE\x10D\x12\x16\n" +
	"\x12IfPhyType_X_3X40GE\x10E\x12\x15\n" +
	"\x11IfPhyType_X_400GE\x10F\x12\x14\n" +
	"\x10IfPhyType_X_40GE\x10G\x12\x16\n" +
	"\x12IfPhyType_X_4X10GE\x10H\x12\x16\n" +
	"\x12IfPhyType_X_4X25GE\x10I\x12\x14\n" +
	"\x10IfPhyType_X_50GE\x10J\x12\x19\n" +
	"\x15IfPhyType_X_50X_100GE\x10K\x1a\x8f\x13\n" +
	"\x16Ipv6InterfaceCountOper\x12&\n" +
	"\x0eifPhyDownCount\x18\x01 \x01(\rR\x0eifPhyDownCount\x12\"\n" +
	"\fifPhyUpCount\x18\x02 \x01(\rR\fifPhyUpCount\x12$\n" +
	"\rifV6DownCount\x18\x03 \x01(\rR\rifV6DownCount\x12 \n" +
	"\vifV6UpCount\x18\x04 \x01(\rR\vifV6UpCount\x12l\n" +
	"\x13ipv6InterfaceCounts\x18\x05 \x01(\v2:.huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCountsR\x13ipv6InterfaceCounts\x1a\xf2\x10\n" +
	"\x13Ipv6InterfaceCounts\x12}\n" +
	"\x12ipv6InterfaceCount\x18\x01 \x03(\v2M.huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts.Ipv6InterfaceCountR\x12ipv6InterfaceCount\x1a\xdb\x0f\n" +
	"\x12Ipv6InterfaceCount\x12\x18\n" +
	"\aifCount\x18\x01 \x01(\rR\aifCount\x12u\n" +
	"\tifPhyType\x18\x02 \x01(\x0e2W.huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts.Ipv6InterfaceCount.IfPhyTypeR\tifPhyType\"\xb3\x0e\n" +
	"\tIfPhyType\x12\x11\n" +
	"\rIfPhyType_ATM\x10\x00\x12\x19\n" +
	"\x15IfPhyType_ATMX_BUNDLE\x10\x01\x12\x12\n" +
	"\x0eIfPhyType_CPOS\x10\x02\x12\x19\n" +
	"\x15IfPhyType_CPOSX_TRUNK\x10\x03\x12\x1a\n" +
	"\x16IfPhyType_DCNINTERFACE\x10\x04\x12\x10\n" +
	"\fIfPhyType_E1\x10\x05\x12\x10\n" +
	"\fIfPhyType_E3\x10\x06\x12\x16\n" +
	"\x12IfPhyType_ETHERNET\x10\a\x12\x18\n" +
	"\x14IfPhyType_ETHX_TRUNK\x10\b\x12\x1a\n" +
	"\x16IfPhyType_FABRICX_PORT\x10\t\x12\x10\n" +
	"\fIfPhyType_FC\x10\n" +
	"\x12\x18\n" +
	"\x14IfPhyType_FCOEX_PORT\x10\v\x12\x1c\n" +
	"\x18IfPhyType_FIBERX_CHANNEL\x10\f\x12\x13\n" +
	"\x0fIfPhyType_FLEXE\x10\r\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_100G\x10\x0e\x12\x1a\n" +
	"\x16IfPhyType_FLEXEX_200GE\x10\x0f\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_400G\x10\x10\x12\x18\n" +
	"\x14IfPhyType_FLEXEX_50G\x10\x11\x12\x1d\n" +
	"\x19IfPhyType_FLEXEX_50X_100G\x10\x12\x12\x15\n" +
	"\x11IfPhyType_GEBRIEF\x10\x13\x12\x1d\n" +
	"\x19IfPhyType_GIGABITETHERNET\x10\x14\x12 \n" +
	"\x1cIfPhyType_GLOBALX_IMAX_GROUP\x10\x15\x12\x1f\n" +
	"\x1bIfPhyType_GLOBALX_MPX_GROUP\x10\x16\x12\x18\n" +
	"\x14IfPhyType_GLOBALX_VE\x10\x17\x12\x18\n" +
	"\x14IfPhyType_GMPLSX_UNI\x10\x18\x12\x12\n" +
	"\x0eIfPhyType_HPGE\x10\x19\x12\x18\n" +
	"\x14IfPhyType_IMAX_GROUP\x10\x1a\x12\x13\n" +
	"\x0fIfPhyType_IMETH\x10\x1b\x12\x18\n" +
	"\x14IfPhyType_INFINIBAND\x10\x1c\x12\x17\n" +
	"\x13IfPhyType_IPX_TRUNK\x10\x1d\x12\x13\n" +
	"\x0fIfPhyType_LMPIF\x10\x1e\x12\x16\n" +
	"\x12IfPhyType_LOOPBACK\x10\x1f\x12\x12\n" +
	"\x0eIfPhyType_METH\x10 \x12\x17\n" +
	"\x13IfPhyType_MPX_GROUP\x10!\x12\x15\n" +
	"\x11IfPhyType_MTUNNEL\x10\"\x12\x12\n" +
	"\x0eIfPhyType_NULL\x10#\x12\x11\n" +
	"\rIfPhyType_NVE\x10$\x12\x11\n" +
	"\rIfPhyType_OTN\x10%\x12\x11\n" +
	"\rIfPhyType_POS\x10&\x12\x18\n" +
	"\x14IfPhyType_POSX_TRUNK\x10'\x12\x14\n" +
	"\x10IfPhyType_PWX_VE\x10(\x12\x18\n" +
	"\x14IfPhyType_REMOTEX_AP\x10)\x12\x14\n" +
	"\x10IfPhyType_SERIAL\x10*\x12\x17\n" +
	"\x13IfPhyType_SERVICEIF\x10+\x12\x11\n" +
	"\rIfPhyType_SIP\x10,\x12\x19\n" +
	"\x15IfPhyType_STACKX_PORT\x10-\x12\x10\n" +
	"\fIfPhyType_T1\x10.\x12\x10\n" +
	"\fIfPhyType_T3\x10/\x12\x1b\n" +
	"\x17IfPhyType_TRUNKX_SERIAL\x100\x12\x14\n" +
	"\x10IfPhyType_TUNNEL\x101\x12\x13\n" +
	"\x0fIfPhyType_VBDIF\x102\x12\x15\n" +
	"\x11IfPhyType_VBRIDGE\x103\x12\x12\n" +
	"\x0eIfPhyType_VC12\x104\x12\x11\n" +
	"\rIfPhyType_VC4\x105\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_ETHERNET\x106\x12\x1b\n" +
	"\x17IfPhyType_VIRTUALX_ODUK\x107\x12\x1d\n" +
	"\x19IfPhyType_VIRTUALX_SERIAL\x108\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_TEMPLATE\x109\x12\x14\n" +
	"\x10IfPhyType_VLANIF\x10:\x12\x13\n" +
	"\x0fIfPhyType_VMETH\x10;\x12\x10\n" +
	"\fIfPhyType_VP\x10<\x12\x18\n" +
	"\x14IfPhyType_VXX_TUNNEL\x10=\x12\x11\n" +
	"\rIfPhyType_WDM\x10>\x12\x1e\n" +
	"\x1aIfPhyType_XGIGABITETHERNET\x10?\x12\x15\n" +
	"\x11IfPhyType_X_100GE\x10@\x12\x14\n" +
	"\x10IfPhyType_X_10GE\x10A\x12\x17\n" +
	"\x13IfPhyType_X_10X10GE\x10B\x12\x15\n" +
	"\x11IfPhyType_X_200GE\x10C\x12\x14\n" +
	"\x10IfPhyType_X_25GE\x10D\x12\x16\n" +
	"\x12IfPhyType_X_3X40GE\x10E\x12\x15\n" +
	"\x11IfPhyType_X_400GE\x10F\x12\x14\n" +
	"\x10IfPhyType_X_40GE\x10G\x12\x16\n" +
	"\x12IfPhyType_X_4X10GE\x10H\x12\x16\n" +
	"\x12IfPhyType_X_4X25GE\x10I\x12\x14\n" +
	"\x10IfPhyType_X_50GE\x10J\x12\x19\n" +
	"\x15IfPhyType_X_50X_100GE\x10K\x1a\x87\x03\n" +
	"\aPppDamp\x12$\n" +
	"\rpppDampEnable\x18\x01 \x01(\bR\rpppDampEnable\x12H\n" +
	"\fpppDampLevel\x18\x02 \x01(\x0e2$.huawei_ifm.Ifm.PppDamp.PppDampLevelR\fpppDampLevel\x12,\n" +
	"\x11pppHalfLifePeriod\x18\x03 \x01(\rR\x11pppHalfLifePeriod\x12.\n" +
	"\x12pppMaxSuppressTime\x18\x04 \x01(\rR\x12pppMaxSuppressTime\x12\x1a\n" +
	"\bpppReuse\x18\x05 \x01(\rR\bpppReuse\x12 \n" +
	"\vpppSuppress\x18\x06 \x01(\rR\vpppSuppress\"p\n" +
	"\fPppDampLevel\x12\x16\n" +
	"\x12PppDampLevel_HEAVY\x10\x00\x12\x16\n" +
	"\x12PppDampLevel_LIGHT\x10\x01\x12\x17\n" +
	"\x13PppDampLevel_MANUAL\x10\x02\x12\x17\n" +
	"\x13PppDampLevel_MIDDLE\x10\x03\x1a\xec\x05\n" +
	"\x10RemoteInterfaces\x12Z\n" +
	"\x0fremoteInterface\x18\x01 \x03(\v20.huawei_ifm.Ifm.RemoteInterfaces.RemoteInterfaceR\x0fremoteInterface\x1a\xfb\x04\n" +
	"\x0fRemoteInterface\x12\x18\n" +
	"\aifIndex\x18\x01 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x02 \x01(\tR\x06ifName\x12m\n" +
	"\x10remoteIfStatOper\x18\x03 \x01(\v2A.huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface.RemoteIfStatOperR\x10remoteIfStatOper\x1a\xc6\x03\n" +
	"\x10RemoteIfStatOper\x12\x1c\n" +
	"\tinBitRate\x18\x01 \x01(\x04R\tinBitRate\x12\"\n" +
	"\finPacketRate\x18\x02 \x01(\x04R\finPacketRate\x12$\n" +
	"\rinPeakBitRate\x18\x03 \x01(\x04R\rinPeakBitRate\x128\n" +
	"\x17inPeakBitRateRecordTime\x18\x04 \x01(\tR\x17inPeakBitRateRecordTime\x12\x1c\n" +
	"\tinUseRate\x18\x05 \x01(\tR\tinUseRate\x12(\n" +
	"\x0flastclearedTime\x18\x06 \x01(\tR\x0flastclearedTime\x12\x1e\n" +
	"\n" +
	"outBitRate\x18\a \x01(\x04R\n" +
	"outBitRate\x12$\n" +
	"\routPacketRate\x18\b \x01(\x04R\routPacketRate\x12&\n" +
	"\x0eoutPeakBitRate\x18\t \x01(\x04R\x0eoutPeakBitRate\x12:\n" +
	"\x18outPeakBitRateRecordTime\x18\n" +
	" \x01(\tR\x18outPeakBitRateRecordTime\x12\x1e\n" +
	"\n" +
	"outUseRate\x18\v \x01(\tR\n" +
	"outUseRate\x1a\x88\x11\n" +
	"\x0fStaticDimRanges\x12V\n" +
	"\x0estaticDimRange\x18\x01 \x03(\v2..huawei_ifm.Ifm.StaticDimRanges.StaticDimRangeR\x0estaticDimRange\x1a\x9c\x10\n" +
	"\x0eStaticDimRange\x12\x1c\n" +
	"\tcardRange\x18\x01 \x01(\tR\tcardRange\x12\"\n" +
	"\fchassisRange\x18\x02 \x01(\tR\fchassisRange\x12V\n" +
	"\tifPhyType\x18\x03 \x01(\x0e28.huawei_ifm.Ifm.StaticDimRanges.StaticDimRange.IfPhyTypeR\tifPhyType\x12\x1c\n" +
	"\tportRange\x18\x04 \x01(\tR\tportRange\x12\x1c\n" +
	"\tslotRange\x18\x05 \x01(\tR\tslotRange\"\xb3\x0e\n" +
	"\tIfPhyType\x12\x11\n" +
	"\rIfPhyType_ATM\x10\x00\x12\x19\n" +
	"\x15IfPhyType_ATMX_BUNDLE\x10\x01\x12\x12\n" +
	"\x0eIfPhyType_CPOS\x10\x02\x12\x19\n" +
	"\x15IfPhyType_CPOSX_TRUNK\x10\x03\x12\x1a\n" +
	"\x16IfPhyType_DCNINTERFACE\x10\x04\x12\x10\n" +
	"\fIfPhyType_E1\x10\x05\x12\x10\n" +
	"\fIfPhyType_E3\x10\x06\x12\x16\n" +
	"\x12IfPhyType_ETHERNET\x10\a\x12\x18\n" +
	"\x14IfPhyType_ETHX_TRUNK\x10\b\x12\x1a\n" +
	"\x16IfPhyType_FABRICX_PORT\x10\t\x12\x10\n" +
	"\fIfPhyType_FC\x10\n" +
	"\x12\x18\n" +
	"\x14IfPhyType_FCOEX_PORT\x10\v\x12\x1c\n" +
	"\x18IfPhyType_FIBERX_CHANNEL\x10\f\x12\x13\n" +
	"\x0fIfPhyType_FLEXE\x10\r\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_100G\x10\x0e\x12\x1a\n" +
	"\x16IfPhyType_FLEXEX_200GE\x10\x0f\x12\x19\n" +
	"\x15IfPhyType_FLEXEX_400G\x10\x10\x12\x18\n" +
	"\x14IfPhyType_FLEXEX_50G\x10\x11\x12\x1d\n" +
	"\x19IfPhyType_FLEXEX_50X_100G\x10\x12\x12\x15\n" +
	"\x11IfPhyType_GEBRIEF\x10\x13\x12\x1d\n" +
	"\x19IfPhyType_GIGABITETHERNET\x10\x14\x12 \n" +
	"\x1cIfPhyType_GLOBALX_IMAX_GROUP\x10\x15\x12\x1f\n" +
	"\x1bIfPhyType_GLOBALX_MPX_GROUP\x10\x16\x12\x18\n" +
	"\x14IfPhyType_GLOBALX_VE\x10\x17\x12\x18\n" +
	"\x14IfPhyType_GMPLSX_UNI\x10\x18\x12\x12\n" +
	"\x0eIfPhyType_HPGE\x10\x19\x12\x18\n" +
	"\x14IfPhyType_IMAX_GROUP\x10\x1a\x12\x13\n" +
	"\x0fIfPhyType_IMETH\x10\x1b\x12\x18\n" +
	"\x14IfPhyType_INFINIBAND\x10\x1c\x12\x17\n" +
	"\x13IfPhyType_IPX_TRUNK\x10\x1d\x12\x13\n" +
	"\x0fIfPhyType_LMPIF\x10\x1e\x12\x16\n" +
	"\x12IfPhyType_LOOPBACK\x10\x1f\x12\x12\n" +
	"\x0eIfPhyType_METH\x10 \x12\x17\n" +
	"\x13IfPhyType_MPX_GROUP\x10!\x12\x15\n" +
	"\x11IfPhyType_MTUNNEL\x10\"\x12\x12\n" +
	"\x0eIfPhyType_NULL\x10#\x12\x11\n" +
	"\rIfPhyType_NVE\x10$\x12\x11\n" +
	"\rIfPhyType_OTN\x10%\x12\x11\n" +
	"\rIfPhyType_POS\x10&\x12\x18\n" +
	"\x14IfPhyType_POSX_TRUNK\x10'\x12\x14\n" +
	"\x10IfPhyType_PWX_VE\x10(\x12\x18\n" +
	"\x14IfPhyType_REMOTEX_AP\x10)\x12\x14\n" +
	"\x10IfPhyType_SERIAL\x10*\x12\x17\n" +
	"\x13IfPhyType_SERVICEIF\x10+\x12\x11\n" +
	"\rIfPhyType_SIP\x10,\x12\x19\n" +
	"\x15IfPhyType_STACKX_PORT\x10-\x12\x10\n" +
	"\fIfPhyType_T1\x10.\x12\x10\n" +
	"\fIfPhyType_T3\x10/\x12\x1b\n" +
	"\x17IfPhyType_TRUNKX_SERIAL\x100\x12\x14\n" +
	"\x10IfPhyType_TUNNEL\x101\x12\x13\n" +
	"\x0fIfPhyType_VBDIF\x102\x12\x15\n" +
	"\x11IfPhyType_VBRIDGE\x103\x12\x12\n" +
	"\x0eIfPhyType_VC12\x104\x12\x11\n" +
	"\rIfPhyType_VC4\x105\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_ETHERNET\x106\x12\x1b\n" +
	"\x17IfPhyType_VIRTUALX_ODUK\x107\x12\x1d\n" +
	"\x19IfPhyType_VIRTUALX_SERIAL\x108\x12\x1f\n" +
	"\x1bIfPhyType_VIRTUALX_TEMPLATE\x109\x12\x14\n" +
	"\x10IfPhyType_VLANIF\x10:\x12\x13\n" +
	"\x0fIfPhyType_VMETH\x10;\x12\x10\n" +
	"\fIfPhyType_VP\x10<\x12\x18\n" +
	"\x14IfPhyType_VXX_TUNNEL\x10=\x12\x11\n" +
	"\rIfPhyType_WDM\x10>\x12\x1e\n" +
	"\x1aIfPhyType_XGIGABITETHERNET\x10?\x12\x15\n" +
	"\x11IfPhyType_X_100GE\x10@\x12\x14\n" +
	"\x10IfPhyType_X_10GE\x10A\x12\x17\n" +
	"\x13IfPhyType_X_10X10GE\x10B\x12\x15\n" +
	"\x11IfPhyType_X_200GE\x10C\x12\x14\n" +
	"\x10IfPhyType_X_25GE\x10D\x12\x16\n" +
	"\x12IfPhyType_X_3X40GE\x10E\x12\x15\n" +
	"\x11IfPhyType_X_400GE\x10F\x12\x14\n" +
	"\x10IfPhyType_X_40GE\x10G\x12\x16\n" +
	"\x12IfPhyType_X_4X10GE\x10H\x12\x16\n" +
	"\x12IfPhyType_X_4X25GE\x10I\x12\x14\n" +
	"\x10IfPhyType_X_50GE\x10J\x12\x19\n" +
	"\x15IfPhyType_X_50X_100GE\x10K\"y\n" +
	"\vHwErrordown\x12\x14\n" +
	"\x05Cause\x18\x01 \x01(\tR\x05Cause\x12\x18\n" +
	"\aIfIndex\x18\x02 \x01(\rR\aIfIndex\x12\x16\n" +
	"\x06IfName\x18\x03 \x01(\tR\x06IfName\x12\"\n" +
	"\fRecoveryType\x18\x04 \x01(\tR\fRecoveryType\"\x81\x01\n" +
	"\x13HwErrordownRecovery\x12\x14\n" +
	"\x05Cause\x18\x01 \x01(\tR\x05Cause\x12\x18\n" +
	"\aIfIndex\x18\x02 \x01(\rR\aIfIndex\x12\x16\n" +
	"\x06IfName\x18\x03 \x01(\tR\x06IfName\x12\"\n" +
	"\fRecoveryType\x18\x04 \x01(\tR\fRecoveryType\"g\n" +
	"\x17HwHdlcLoopbackDetResume\x12&\n" +
	"\x0eInterfaceIndex\x18\x01 \x01(\x05R\x0eInterfaceIndex\x12$\n" +
	"\rInterfaceName\x18\x02 \x01(\tR\rInterfaceName\"d\n" +
	"\x14HwHdlcLoopbackDetect\x12&\n" +
	"\x0eInterfaceIndex\x18\x01 \x01(\x05R\x0eInterfaceIndex\x12$\n" +
	"\rInterfaceName\x18\x02 \x01(\tR\rInterfaceName\"\xb9\x01\n" +
	"\x15HwIfControlFlapResume\x12,\n" +
	"\x11InterfaceExtIndex\x18\x01 \x01(\rR\x11InterfaceExtIndex\x12&\n" +
	"\x0eInterfaceIndex\x18\x02 \x01(\rR\x0eInterfaceIndex\x12$\n" +
	"\rInterfaceName\x18\x03 \x01(\tR\rInterfaceName\x12$\n" +
	"\rSuppressState\x18\x04 \x01(\rR\rSuppressState\"\xbb\x01\n" +
	"\x17HwIfControlFlapSuppress\x12,\n" +
	"\x11InterfaceExtIndex\x18\x01 \x01(\rR\x11InterfaceExtIndex\x12&\n" +
	"\x0eInterfaceIndex\x18\x02 \x01(\rR\x0eInterfaceIndex\x12$\n" +
	"\rInterfaceName\x18\x03 \x01(\tR\rInterfaceName\x12$\n" +
	"\rSuppressState\x18\x04 \x01(\rR\rSuppressState\"h\n" +
	"\x14HwLcpNegotiateFailed\x12\x18\n" +
	"\aifIndex\x18\x01 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x02 \x01(\tR\x06ifName\x12\x1e\n" +
	"\n" +
	"reasonCode\x18\x03 \x01(\tR\n" +
	"reasonCode\"i\n" +
	"\x15HwLcpNegotiateResumed\x12\x18\n" +
	"\aifIndex\x18\x01 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x02 \x01(\tR\x06ifName\x12\x1e\n" +
	"\n" +
	"reasonCode\x18\x03 \x01(\tR\n" +
	"reasonCode\"<\n" +
	"\bHwMpDown\x12\x18\n" +
	"\aIfIndex\x18\x01 \x01(\rR\aIfIndex\x12\x16\n" +
	"\x06IfName\x18\x02 \x01(\tR\x06IfName\"\xa9\x01\n" +
	"\x1bHwMpSonChannelDampingDetect\x12\x1c\n" +
	"\tMpIfIndex\x18\x01 \x01(\rR\tMpIfIndex\x12\x1a\n" +
	"\bMpIfName\x18\x02 \x01(\tR\bMpIfName\x12(\n" +
	"\x0fMpMemberIfIndex\x18\x03 \x01(\rR\x0fMpMemberIfIndex\x12&\n" +
	"\x0eMpMemberIfName\x18\x04 \x01(\tR\x0eMpMemberIfName\"\xa9\x01\n" +
	"\x1bHwMpSonChannelDampingResume\x12\x1c\n" +
	"\tMpIfIndex\x18\x01 \x01(\rR\tMpIfIndex\x12\x1a\n" +
	"\bMpIfName\x18\x02 \x01(\tR\bMpIfName\x12(\n" +
	"\x0fMpMemberIfIndex\x18\x03 \x01(\rR\x0fMpMemberIfIndex\x12&\n" +
	"\x0eMpMemberIfName\x18\x04 \x01(\tR\x0eMpMemberIfName\":\n" +
	"\x06HwMpUp\x12\x18\n" +
	"\aIfIndex\x18\x01 \x01(\rR\aIfIndex\x12\x16\n" +
	"\x06IfName\x18\x02 \x01(\tR\x06IfName\"\xac\x01\n" +
	"\x14HwNcpNegotiateFailed\x12\"\n" +
	"\fhwPppNcpName\x18\x01 \x01(\tR\fhwPppNcpName\x12>\n" +
	"\x1ahwPppNegotiationFailReason\x18\x02 \x01(\tR\x1ahwPppNegotiationFailReason\x12\x18\n" +
	"\aifIndex\x18\x03 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x04 \x01(\tR\x06ifName\"\xad\x01\n" +
	"\x15HwNcpNegotiateResumed\x12\"\n" +
	"\fhwPppNcpName\x18\x01 \x01(\tR\fhwPppNcpName\x12>\n" +
	"\x1ahwPppNegotiationFailReason\x18\x02 \x01(\tR\x1ahwPppNegotiationFailReason\x12\x18\n" +
	"\aifIndex\x18\x03 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x04 \x01(\tR\x06ifName\"m\n" +
	"\x15HwPhysicalAdminIfDown\x12\x18\n" +
	"\aifIndex\x18\x01 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x02 \x01(\tR\x06ifName\x12\"\n" +
	"\fifOperStatus\x18\x03 \x01(\tR\fifOperStatus\"k\n" +
	"\x13HwPhysicalAdminIfUp\x12\x18\n" +
	"\aifIndex\x18\x01 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x02 \x01(\tR\x06ifName\x12\"\n" +
	"\fifOperStatus\x18\x03 \x01(\tR\fifOperStatus\"\xe6\x01\n" +
	"\x16HwPppLoopbackDetResume\x120\n" +
	"\x13HwBaseTrapEventType\x18\x01 \x01(\rR\x13HwBaseTrapEventType\x128\n" +
	"\x17HwBaseTrapProbableCause\x18\x02 \x01(\rR\x17HwBaseTrapProbableCause\x12.\n" +
	"\x12HwBaseTrapSeverity\x18\x03 \x01(\rR\x12HwBaseTrapSeverity\x12\x18\n" +
	"\aIfIndex\x18\x04 \x01(\rR\aIfIndex\x12\x16\n" +
	"\x06IfName\x18\x05 \x01(\tR\x06IfName\"\xe3\x01\n" +
	"\x13HwPppLoopbackDetect\x120\n" +
	"\x13HwBaseTrapEventType\x18\x01 \x01(\rR\x13HwBaseTrapEventType\x128\n" +
	"\x17HwBaseTrapProbableCause\x18\x02 \x01(\rR\x17HwBaseTrapProbableCause\x12.\n" +
	"\x12HwBaseTrapSeverity\x18\x03 \x01(\rR\x12HwBaseTrapSeverity\x12\x18\n" +
	"\aIfIndex\x18\x04 \x01(\rR\aIfIndex\x12\x16\n" +
	"\x06IfName\x18\x05 \x01(\tR\x06IfName\"\xb0\x01\n" +
	"\fHwifflowdown\x12,\n" +
	"\x11hwIFExtFlowStatus\x18\x01 \x01(\rR\x11hwIFExtFlowStatus\x12\"\n" +
	"\fhwIFExtIndex\x18\x02 \x01(\rR\fhwIFExtIndex\x12\x18\n" +
	"\aifIndex\x18\x03 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x04 \x01(\tR\x06ifName\x12\x1c\n" +
	"\tsysUpTime\x18\x05 \x01(\rR\tsysUpTime\"\xae\x01\n" +
	"\n" +
	"Hwifflowup\x12,\n" +
	"\x11hwIFExtFlowStatus\x18\x01 \x01(\rR\x11hwIFExtFlowStatus\x12\"\n" +
	"\fhwIFExtIndex\x18\x02 \x01(\rR\fhwIFExtIndex\x12\x18\n" +
	"\aifIndex\x18\x03 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x04 \x01(\tR\x06ifName\x12\x1c\n" +
	"\tsysUpTime\x18\x05 \x01(\rR\tsysUpTime\"\xa7\x02\n" +
	"\x11Ipv6IfStateChange\x12\x16\n" +
	"\x06Reason\x18\x01 \x01(\fR\x06Reason\x12\x1e\n" +
	"\n" +
	"ReasonCode\x18\x02 \x01(\rR\n" +
	"ReasonCode\x12,\n" +
	"\x11ipv6IfAdminStatus\x18\x03 \x01(\tR\x11ipv6IfAdminStatus\x12 \n" +
	"\vipv6IfDescr\x18\x04 \x01(\tR\vipv6IfDescr\x12 \n" +
	"\vipv6IfIndex\x18\x05 \x01(\rR\vipv6IfIndex\x12*\n" +
	"\x10ipv6IfOperStatus\x18\x06 \x01(\tR\x10ipv6IfOperStatus\x12\x1e\n" +
	"\n" +
	"ipv6MainIf\x18\a \x01(\tR\n" +
	"ipv6MainIf\x12\x1c\n" +
	"\trootIndex\x18\b \x01(\rR\trootIndex\"\x9a\x02\n" +
	"\bLinkdown\x12$\n" +
	"\rPhysicalIndex\x18\x01 \x01(\rR\rPhysicalIndex\x12\x16\n" +
	"\x06Reason\x18\x02 \x01(\fR\x06Reason\x12$\n" +
	"\rifAdminStatus\x18\x03 \x01(\tR\rifAdminStatus\x12\x18\n" +
	"\aifIndex\x18\x04 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x05 \x01(\tR\x06ifName\x12\"\n" +
	"\fifOperStatus\x18\x06 \x01(\tR\fifOperStatus\x12\x16\n" +
	"\x06mainIf\x18\a \x01(\tR\x06mainIf\x12\x1e\n" +
	"\n" +
	"reasonCode\x18\b \x01(\rR\n" +
	"reasonCode\x12\x1c\n" +
	"\trootIndex\x18\t \x01(\rR\trootIndex\"\x98\x02\n" +
	"\x06Linkup\x12$\n" +
	"\rPhysicalIndex\x18\x01 \x01(\rR\rPhysicalIndex\x12\x16\n" +
	"\x06Reason\x18\x02 \x01(\fR\x06Reason\x12$\n" +
	"\rifAdminStatus\x18\x03 \x01(\tR\rifAdminStatus\x12\x18\n" +
	"\aifIndex\x18\x04 \x01(\rR\aifIndex\x12\x16\n" +
	"\x06ifName\x18\x05 \x01(\tR\x06ifName\x12\"\n" +
	"\fifOperStatus\x18\x06 \x01(\tR\fifOperStatus\x12\x16\n" +
	"\x06mainIf\x18\a \x01(\tR\x06mainIf\x12\x1e\n" +
	"\n" +
	"reasonCode\x18\b \x01(\rR\n" +
	"reasonCode\x12\x1c\n" +
	"\trootIndex\x18\t \x01(\rR\trootIndexB[ZYgithub.com/influxdata/telegraf/plugins/parsers/huawei_grpc_gpb/telemetry_proto/huawei_ifmb\x06proto3"

var (
	file_huawei_ifm_proto_rawDescOnce sync.Once
	file_huawei_ifm_proto_rawDescData []byte
)

func file_huawei_ifm_proto_rawDescGZIP() []byte {
	file_huawei_ifm_proto_rawDescOnce.Do(func() {
		file_huawei_ifm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_huawei_ifm_proto_rawDesc), len(file_huawei_ifm_proto_rawDesc)))
	})
	return file_huawei_ifm_proto_rawDescData
}

var file_huawei_ifm_proto_enumTypes = make([]protoimpl.EnumInfo, 66)
var file_huawei_ifm_proto_msgTypes = make([]protoimpl.MessageInfo, 105)
var file_huawei_ifm_proto_goTypes = []any{
	(Ifm_Interfaces_Interface_IfAdminStatus)(0),                                      // 0: huawei_ifm.Ifm.Interfaces.Interface.IfAdminStatus
	(Ifm_Interfaces_Interface_IfCfgEncapType)(0),                                     // 1: huawei_ifm.Ifm.Interfaces.Interface.IfCfgEncapType
	(Ifm_Interfaces_Interface_IfClass)(0),                                            // 2: huawei_ifm.Ifm.Interfaces.Interface.IfClass
	(Ifm_Interfaces_Interface_IfLinkProtocol)(0),                                     // 3: huawei_ifm.Ifm.Interfaces.Interface.IfLinkProtocol
	(Ifm_Interfaces_Interface_IfNetworkLayerStatus)(0),                               // 4: huawei_ifm.Ifm.Interfaces.Interface.IfNetworkLayerStatus
	(Ifm_Interfaces_Interface_IfOperEncapType)(0),                                    // 5: huawei_ifm.Ifm.Interfaces.Interface.IfOperEncapType
	(Ifm_Interfaces_Interface_IfPhyType)(0),                                          // 6: huawei_ifm.Ifm.Interfaces.Interface.IfPhyType
	(Ifm_Interfaces_Interface_IfRouterType)(0),                                       // 7: huawei_ifm.Ifm.Interfaces.Interface.IfRouterType
	(Ifm_Interfaces_Interface_IfServiceType)(0),                                      // 8: huawei_ifm.Ifm.Interfaces.Interface.IfServiceType
	(Ifm_Interfaces_Interface_PortMode)(0),                                           // 9: huawei_ifm.Ifm.Interfaces.Interface.PortMode
	(Ifm_Interfaces_Interface_StatMode)(0),                                           // 10: huawei_ifm.Ifm.Interfaces.Interface.StatMode
	(Ifm_Interfaces_Interface_IfDynamicInfo_IfOperStatus)(0),                         // 11: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfOperStatus
	(Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkQualityGrade)(0),                   // 12: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfLinkQualityGrade
	(Ifm_Interfaces_Interface_IfDynamicInfo_IfLinkStatus)(0),                         // 13: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfLinkStatus
	(Ifm_Interfaces_Interface_IfDynamicInfo_IfPhyStatus)(0),                          // 14: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfPhyStatus
	(Ifm_Interfaces_Interface_IfDynamicInfo_IfV4State)(0),                            // 15: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfV4State
	(Ifm_Interfaces_Interface_IfDynamicInfo_IfV6State)(0),                            // 16: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfV6State
	(Ifm_Interfaces_Interface_ForwardMode_VeForwarMode)(0),                           // 17: huawei_ifm.Ifm.Interfaces.Interface.ForwardMode.VeForwarMode
	(Ifm_Interfaces_Interface_Fr_IfType)(0),                                          // 18: huawei_ifm.Ifm.Interfaces.Interface.Fr.IfType
	(Ifm_Interfaces_Interface_Fr_LmiType)(0),                                         // 19: huawei_ifm.Ifm.Interfaces.Interface.Fr.LmiType
	(Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiEnable)(0),                  // 20: huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.IfIpStatiEnable
	(Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv4Enable)(0),              // 21: huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.IfIpStatiIpv4Enable
	(Ifm_Interfaces_Interface_IfCeIpStatiEnable_IfIpStatiIpv6Enable)(0),              // 22: huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.IfIpStatiIpv6Enable
	(Ifm_Interfaces_Interface_IfErrorDown_ErrorDownCause)(0),                         // 23: huawei_ifm.Ifm.Interfaces.Interface.IfErrorDown.ErrorDownCause
	(Ifm_Interfaces_Interface_IfIpStatiCfg_IfIpStatiMode)(0),                         // 24: huawei_ifm.Ifm.Interfaces.Interface.IfIpStatiCfg.IfIpStatiMode
	(Ifm_Interfaces_Interface_Ipv4Config_AddrCfgType)(0),                             // 25: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.AddrCfgType
	(Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr_AddrType)(0),         // 26: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs.Am4CfgAddr.AddrType
	(Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr_AddrType)(0),               // 27: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs.Ipv4Addr.AddrType
	(Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_AddrType6)(0),        // 28: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr.AddrType6
	(Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr_IfIDGenType)(0),      // 29: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr.IfIDGenType
	(Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_AddrType6)(0),              // 30: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.AddrType6
	(Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_IfIDGenType)(0),            // 31: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.IfIDGenType
	(Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr_Status)(0),                 // 32: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.Status
	(Ifm_Interfaces_Interface_MainIpAddr_IpAddrCfgType)(0),                           // 33: huawei_ifm.Ifm.Interfaces.Interface.MainIpAddr.IpAddrCfgType
	(Ifm_Interfaces_Interface_PhyDampIfCfg_IfDampLevel)(0),                           // 34: huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfCfg.IfDampLevel
	(Ifm_Interfaces_Interface_PhyDampIfOper_IfSuppressStatus)(0),                     // 35: huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfOper.IfSuppressStatus
	(Ifm_Interfaces_Interface_Ppp_MplscpNego)(0),                                     // 36: huawei_ifm.Ifm.Interfaces.Interface.Ppp.MplscpNego
	(Ifm_Interfaces_Interface_Ppp_MruNegoMtd)(0),                                     // 37: huawei_ifm.Ifm.Interfaces.Interface.Ppp.MruNegoMtd
	(Ifm_Interfaces_Interface_Ppp_OsicpNego)(0),                                      // 38: huawei_ifm.Ifm.Interfaces.Interface.Ppp.OsicpNego
	(Ifm_Interfaces_Interface_Ppp_CrcParam_CrcBit)(0),                                // 39: huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam.CrcBit
	(Ifm_Interfaces_Interface_Ppp_CrcParam_ErrType)(0),                               // 40: huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam.ErrType
	(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_Ip6CpState)(0),                     // 41: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.Ip6CpState
	(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_IpcpState)(0),                      // 42: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.IpcpState
	(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_LcpState)(0),                       // 43: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.LcpState
	(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_MplscpState)(0),                    // 44: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.MplscpState
	(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_OsicpState)(0),                     // 45: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.OsicpState
	(Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent_LinkType)(0),  // 46: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents.DownEvent.LinkType
	(Ifm_Interfaces_Interface_TransAlarmDown_Oof)(0),                                 // 47: huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.Oof
	(Ifm_Interfaces_Interface_TransAlarmDown_Pais)(0),                                // 48: huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.Pais
	(Ifm_Interfaces_Interface_TransAlarmDown_Prdi)(0),                                // 49: huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.Prdi
	(Ifm_Interfaces_Interface_VeGroup_VeIfType)(0),                                   // 50: huawei_ifm.Ifm.Interfaces.Interface.VeGroup.VeIfType
	(Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType)(0),                        // 51: huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.ErrorDownType
	(Ifm_GlobalConfig_Ipv4IgnorePrimarySub)(0),                                       // 52: huawei_ifm.Ifm.GlobalConfig.Ipv4IgnorePrimarySub
	(Ifm_GlobalConfig_SysAttriControlMtu)(0),                                         // 53: huawei_ifm.Ifm.GlobalConfig.SysAttriControlMtu
	(Ifm_HdlcDamp_HdlcDampLevel)(0),                                                  // 54: huawei_ifm.Ifm.HdlcDamp.HdlcDampLevel
	(Ifm_IfDamp_IfDampLevel)(0),                                                      // 55: huawei_ifm.Ifm.IfDamp.IfDampLevel
	(Ifm_InterfaceCounts_InterfaceCount_IfClass)(0),                                  // 56: huawei_ifm.Ifm.InterfaceCounts.InterfaceCount.IfClass
	(Ifm_InterfaceCounts_InterfaceCount_IfPhyType)(0),                                // 57: huawei_ifm.Ifm.InterfaceCounts.InterfaceCount.IfPhyType
	(Ifm_IpConflictConfig_IpConflictCheck)(0),                                        // 58: huawei_ifm.Ifm.IpConflictConfig.IpConflictCheck
	(Ifm_IpConflictConfig_IpConflictPreempt)(0),                                      // 59: huawei_ifm.Ifm.IpConflictConfig.IpConflictPreempt
	(Ifm_IpConflictConfig_Ipv6ConflictCheck)(0),                                      // 60: huawei_ifm.Ifm.IpConflictConfig.Ipv6ConflictCheck
	(Ifm_IpConflictConfig_Ipv6ConflictPreempt)(0),                                    // 61: huawei_ifm.Ifm.IpConflictConfig.Ipv6ConflictPreempt
	(Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount_IfPhyType)(0),       // 62: huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts.IpInterfaceCount.IfPhyType
	(Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount_IfPhyType)(0), // 63: huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts.Ipv6InterfaceCount.IfPhyType
	(Ifm_PppDamp_PppDampLevel)(0),                                                    // 64: huawei_ifm.Ifm.PppDamp.PppDampLevel
	(Ifm_StaticDimRanges_StaticDimRange_IfPhyType)(0),                                // 65: huawei_ifm.Ifm.StaticDimRanges.StaticDimRange.IfPhyType
	(*Ifm)(nil),                                                               // 66: huawei_ifm.Ifm
	(*HwErrordown)(nil),                                                       // 67: huawei_ifm.HwErrordown
	(*HwErrordownRecovery)(nil),                                               // 68: huawei_ifm.HwErrordownRecovery
	(*HwHdlcLoopbackDetResume)(nil),                                           // 69: huawei_ifm.HwHdlcLoopbackDetResume
	(*HwHdlcLoopbackDetect)(nil),                                              // 70: huawei_ifm.HwHdlcLoopbackDetect
	(*HwIfControlFlapResume)(nil),                                             // 71: huawei_ifm.HwIfControlFlapResume
	(*HwIfControlFlapSuppress)(nil),                                           // 72: huawei_ifm.HwIfControlFlapSuppress
	(*HwLcpNegotiateFailed)(nil),                                              // 73: huawei_ifm.HwLcpNegotiateFailed
	(*HwLcpNegotiateResumed)(nil),                                             // 74: huawei_ifm.HwLcpNegotiateResumed
	(*HwMpDown)(nil),                                                          // 75: huawei_ifm.HwMpDown
	(*HwMpSonChannelDampingDetect)(nil),                                       // 76: huawei_ifm.HwMpSonChannelDampingDetect
	(*HwMpSonChannelDampingResume)(nil),                                       // 77: huawei_ifm.HwMpSonChannelDampingResume
	(*HwMpUp)(nil),                                                            // 78: huawei_ifm.HwMpUp
	(*HwNcpNegotiateFailed)(nil),                                              // 79: huawei_ifm.HwNcpNegotiateFailed
	(*HwNcpNegotiateResumed)(nil),                                             // 80: huawei_ifm.HwNcpNegotiateResumed
	(*HwPhysicalAdminIfDown)(nil),                                             // 81: huawei_ifm.HwPhysicalAdminIfDown
	(*HwPhysicalAdminIfUp)(nil),                                               // 82: huawei_ifm.HwPhysicalAdminIfUp
	(*HwPppLoopbackDetResume)(nil),                                            // 83: huawei_ifm.HwPppLoopbackDetResume
	(*HwPppLoopbackDetect)(nil),                                               // 84: huawei_ifm.HwPppLoopbackDetect
	(*Hwifflowdown)(nil),                                                      // 85: huawei_ifm.Hwifflowdown
	(*Hwifflowup)(nil),                                                        // 86: huawei_ifm.Hwifflowup
	(*Ipv6IfStateChange)(nil),                                                 // 87: huawei_ifm.Ipv6IfStateChange
	(*Linkdown)(nil),                                                          // 88: huawei_ifm.Linkdown
	(*Linkup)(nil),                                                            // 89: huawei_ifm.Linkup
	(*Ifm_Interfaces)(nil),                                                    // 90: huawei_ifm.Ifm.Interfaces
	(*Ifm_AutoRecoveryTimes)(nil),                                             // 91: huawei_ifm.Ifm.AutoRecoveryTimes
	(*Ifm_GlobalConfig)(nil),                                                  // 92: huawei_ifm.Ifm.GlobalConfig
	(*Ifm_HdlcDamp)(nil),                                                      // 93: huawei_ifm.Ifm.HdlcDamp
	(*Ifm_IfDamp)(nil),                                                        // 94: huawei_ifm.Ifm.IfDamp
	(*Ifm_InterfaceCounts)(nil),                                               // 95: huawei_ifm.Ifm.InterfaceCounts
	(*Ifm_IpConflictConfig)(nil),                                              // 96: huawei_ifm.Ifm.IpConflictConfig
	(*Ifm_IpInterfaceCountOper)(nil),                                          // 97: huawei_ifm.Ifm.IpInterfaceCountOper
	(*Ifm_Ipv6InterfaceCountOper)(nil),                                        // 98: huawei_ifm.Ifm.Ipv6InterfaceCountOper
	(*Ifm_PppDamp)(nil),                                                       // 99: huawei_ifm.Ifm.PppDamp
	(*Ifm_RemoteInterfaces)(nil),                                              // 100: huawei_ifm.Ifm.RemoteInterfaces
	(*Ifm_StaticDimRanges)(nil),                                               // 101: huawei_ifm.Ifm.StaticDimRanges
	(*Ifm_Interfaces_Interface)(nil),                                          // 102: huawei_ifm.Ifm.Interfaces.Interface
	(*Ifm_Interfaces_Interface_IfClearedStat)(nil),                            // 103: huawei_ifm.Ifm.Interfaces.Interface.IfClearedStat
	(*Ifm_Interfaces_Interface_IfDynamicInfo)(nil),                            // 104: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo
	(*Ifm_Interfaces_Interface_IfStatistics)(nil),                             // 105: huawei_ifm.Ifm.Interfaces.Interface.IfStatistics
	(*Ifm_Interfaces_Interface_FlowAlarm)(nil),                                // 106: huawei_ifm.Ifm.Interfaces.Interface.FlowAlarm
	(*Ifm_Interfaces_Interface_ForwardMode)(nil),                              // 107: huawei_ifm.Ifm.Interfaces.Interface.ForwardMode
	(*Ifm_Interfaces_Interface_Fr)(nil),                                       // 108: huawei_ifm.Ifm.Interfaces.Interface.Fr
	(*Ifm_Interfaces_Interface_Hdlc)(nil),                                     // 109: huawei_ifm.Ifm.Interfaces.Interface.Hdlc
	(*Ifm_Interfaces_Interface_IfCeIpStatiEnable)(nil),                        // 110: huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable
	(*Ifm_Interfaces_Interface_IfCeIpStatisticsInfo)(nil),                     // 111: huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatisticsInfo
	(*Ifm_Interfaces_Interface_IfControlFlap)(nil),                            // 112: huawei_ifm.Ifm.Interfaces.Interface.IfControlFlap
	(*Ifm_Interfaces_Interface_IfErrorDown)(nil),                              // 113: huawei_ifm.Ifm.Interfaces.Interface.IfErrorDown
	(*Ifm_Interfaces_Interface_IfIpIcmpStatistics)(nil),                       // 114: huawei_ifm.Ifm.Interfaces.Interface.IfIpIcmpStatistics
	(*Ifm_Interfaces_Interface_IfIpStatiCfg)(nil),                             // 115: huawei_ifm.Ifm.Interfaces.Interface.IfIpStatiCfg
	(*Ifm_Interfaces_Interface_IfMru)(nil),                                    // 116: huawei_ifm.Ifm.Interfaces.Interface.IfMru
	(*Ifm_Interfaces_Interface_IfMruDiscardStat)(nil),                         // 117: huawei_ifm.Ifm.Interfaces.Interface.IfMruDiscardStat
	(*Ifm_Interfaces_Interface_IfMruStatEnable)(nil),                          // 118: huawei_ifm.Ifm.Interfaces.Interface.IfMruStatEnable
	(*Ifm_Interfaces_Interface_IfTcpMss)(nil),                                 // 119: huawei_ifm.Ifm.Interfaces.Interface.IfTcpMss
	(*Ifm_Interfaces_Interface_IfTrackRtMtg)(nil),                             // 120: huawei_ifm.Ifm.Interfaces.Interface.IfTrackRtMtg
	(*Ifm_Interfaces_Interface_IfTrapThreshold)(nil),                          // 121: huawei_ifm.Ifm.Interfaces.Interface.IfTrapThreshold
	(*Ifm_Interfaces_Interface_Ipv4Config)(nil),                               // 122: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config
	(*Ifm_Interfaces_Interface_Ipv4Oper)(nil),                                 // 123: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper
	(*Ifm_Interfaces_Interface_Ipv6Config)(nil),                               // 124: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config
	(*Ifm_Interfaces_Interface_Ipv6Oper)(nil),                                 // 125: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper
	(*Ifm_Interfaces_Interface_MainIpAddr)(nil),                               // 126: huawei_ifm.Ifm.Interfaces.Interface.MainIpAddr
	(*Ifm_Interfaces_Interface_NetSlices)(nil),                                // 127: huawei_ifm.Ifm.Interfaces.Interface.NetSlices
	(*Ifm_Interfaces_Interface_PhyDampIfCfg)(nil),                             // 128: huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfCfg
	(*Ifm_Interfaces_Interface_PhyDampIfOper)(nil),                            // 129: huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfOper
	(*Ifm_Interfaces_Interface_PhyIfMacStat)(nil),                             // 130: huawei_ifm.Ifm.Interfaces.Interface.PhyIfMacStat
	(*Ifm_Interfaces_Interface_Ppp)(nil),                                      // 131: huawei_ifm.Ifm.Interfaces.Interface.Ppp
	(*Ifm_Interfaces_Interface_RemoteIfStat)(nil),                             // 132: huawei_ifm.Ifm.Interfaces.Interface.RemoteIfStat
	(*Ifm_Interfaces_Interface_TransAlarmDown)(nil),                           // 133: huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown
	(*Ifm_Interfaces_Interface_VPosition)(nil),                                // 134: huawei_ifm.Ifm.Interfaces.Interface.VPosition
	(*Ifm_Interfaces_Interface_VbdIfForwardMode)(nil),                         // 135: huawei_ifm.Ifm.Interfaces.Interface.VbdIfForwardMode
	(*Ifm_Interfaces_Interface_VeGroup)(nil),                                  // 136: huawei_ifm.Ifm.Interfaces.Interface.VeGroup
	(*Ifm_Interfaces_Interface_VeMemberSlot)(nil),                             // 137: huawei_ifm.Ifm.Interfaces.Interface.VeMemberSlot
	(*Ifm_Interfaces_Interface_VllPwLoopChk)(nil),                             // 138: huawei_ifm.Ifm.Interfaces.Interface.VllPwLoopChk
	(*Ifm_Interfaces_Interface_IfClearedStat_IfMacMtuDiscardStat)(nil),        // 139: huawei_ifm.Ifm.Interfaces.Interface.IfClearedStat.IfMacMtuDiscardStat
	(*Ifm_Interfaces_Interface_IfStatistics_EthPortErrSts)(nil),               // 140: huawei_ifm.Ifm.Interfaces.Interface.IfStatistics.EthPortErrSts
	(*Ifm_Interfaces_Interface_Fr_Dlcis)(nil),                                 // 141: huawei_ifm.Ifm.Interfaces.Interface.Fr.Dlcis
	(*Ifm_Interfaces_Interface_Fr_IfLink)(nil),                                // 142: huawei_ifm.Ifm.Interfaces.Interface.Fr.IfLink
	(*Ifm_Interfaces_Interface_Hdlc_IfLink)(nil),                              // 143: huawei_ifm.Ifm.Interfaces.Interface.Hdlc.IfLink
	(*Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs)(nil),                   // 144: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs
	(*Ifm_Interfaces_Interface_Ipv4Config_Am4CfgAddrs_Am4CfgAddr)(nil),        // 145: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs.Am4CfgAddr
	(*Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs)(nil),                       // 146: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs
	(*Ifm_Interfaces_Interface_Ipv4Oper_Ipv4Addrs_Ipv4Addr)(nil),              // 147: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs.Ipv4Addr
	(*Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs)(nil),                   // 148: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs
	(*Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos)(nil),                   // 149: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CgaInfos
	(*Ifm_Interfaces_Interface_Ipv6Config_Am6CfgAddrs_Am6CfgAddr)(nil),        // 150: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr
	(*Ifm_Interfaces_Interface_Ipv6Config_Am6CgaInfos_Am6CgaInfo)(nil),        // 151: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CgaInfos.Am6CgaInfo
	(*Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs)(nil),                       // 152: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs
	(*Ifm_Interfaces_Interface_Ipv6Oper_Ipv6Addrs_Ipv6Addr)(nil),              // 153: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr
	(*Ifm_Interfaces_Interface_NetSlices_NetSlice)(nil),                       // 154: huawei_ifm.Ifm.Interfaces.Interface.NetSlices.NetSlice
	(*Ifm_Interfaces_Interface_Ppp_CrcParam)(nil),                             // 155: huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam
	(*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode)(nil),                      // 156: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode
	(*Ifm_Interfaces_Interface_Ppp_IfLink)(nil),                               // 157: huawei_ifm.Ifm.Interfaces.Interface.Ppp.IfLink
	(*Ifm_Interfaces_Interface_Ppp_PppStatistics)(nil),                        // 158: huawei_ifm.Ifm.Interfaces.Interface.Ppp.PppStatistics
	(*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents)(nil),           // 159: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents
	(*Ifm_Interfaces_Interface_Ppp_DispPppInfoNode_DownEvents_DownEvent)(nil), // 160: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents.DownEvent
	(*Ifm_AutoRecoveryTimes_AutoRecoveryTime)(nil),                            // 161: huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime
	(*Ifm_GlobalConfig_DualStat)(nil),                                         // 162: huawei_ifm.Ifm.GlobalConfig.DualStat
	(*Ifm_InterfaceCounts_InterfaceCount)(nil),                                // 163: huawei_ifm.Ifm.InterfaceCounts.InterfaceCount
	(*Ifm_IpInterfaceCountOper_IpInterfaceCounts)(nil),                        // 164: huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts
	(*Ifm_IpInterfaceCountOper_IpInterfaceCounts_IpInterfaceCount)(nil),       // 165: huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts.IpInterfaceCount
	(*Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts)(nil),                    // 166: huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts
	(*Ifm_Ipv6InterfaceCountOper_Ipv6InterfaceCounts_Ipv6InterfaceCount)(nil), // 167: huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts.Ipv6InterfaceCount
	(*Ifm_RemoteInterfaces_RemoteInterface)(nil),                              // 168: huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface
	(*Ifm_RemoteInterfaces_RemoteInterface_RemoteIfStatOper)(nil),             // 169: huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface.RemoteIfStatOper
	(*Ifm_StaticDimRanges_StaticDimRange)(nil),                                // 170: huawei_ifm.Ifm.StaticDimRanges.StaticDimRange
}
var file_huawei_ifm_proto_depIdxs = []int32{
	90,  // 0: huawei_ifm.Ifm.interfaces:type_name -> huawei_ifm.Ifm.Interfaces
	91,  // 1: huawei_ifm.Ifm.autoRecoveryTimes:type_name -> huawei_ifm.Ifm.AutoRecoveryTimes
	92,  // 2: huawei_ifm.Ifm.globalConfig:type_name -> huawei_ifm.Ifm.GlobalConfig
	93,  // 3: huawei_ifm.Ifm.hdlcDamp:type_name -> huawei_ifm.Ifm.HdlcDamp
	94,  // 4: huawei_ifm.Ifm.ifDamp:type_name -> huawei_ifm.Ifm.IfDamp
	95,  // 5: huawei_ifm.Ifm.interfaceCounts:type_name -> huawei_ifm.Ifm.InterfaceCounts
	96,  // 6: huawei_ifm.Ifm.ipConflictConfig:type_name -> huawei_ifm.Ifm.IpConflictConfig
	97,  // 7: huawei_ifm.Ifm.ipInterfaceCountOper:type_name -> huawei_ifm.Ifm.IpInterfaceCountOper
	98,  // 8: huawei_ifm.Ifm.ipv6InterfaceCountOper:type_name -> huawei_ifm.Ifm.Ipv6InterfaceCountOper
	99,  // 9: huawei_ifm.Ifm.pppDamp:type_name -> huawei_ifm.Ifm.PppDamp
	100, // 10: huawei_ifm.Ifm.remoteInterfaces:type_name -> huawei_ifm.Ifm.RemoteInterfaces
	101, // 11: huawei_ifm.Ifm.staticDimRanges:type_name -> huawei_ifm.Ifm.StaticDimRanges
	102, // 12: huawei_ifm.Ifm.Interfaces.interface:type_name -> huawei_ifm.Ifm.Interfaces.Interface
	161, // 13: huawei_ifm.Ifm.AutoRecoveryTimes.autoRecoveryTime:type_name -> huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime
	162, // 14: huawei_ifm.Ifm.GlobalConfig.dualStat:type_name -> huawei_ifm.Ifm.GlobalConfig.DualStat
	52,  // 15: huawei_ifm.Ifm.GlobalConfig.ipv4IgnorePrimarySub:type_name -> huawei_ifm.Ifm.GlobalConfig.Ipv4IgnorePrimarySub
	53,  // 16: huawei_ifm.Ifm.GlobalConfig.sysAttriControlMtu:type_name -> huawei_ifm.Ifm.GlobalConfig.SysAttriControlMtu
	54,  // 17: huawei_ifm.Ifm.HdlcDamp.hdlcDampLevel:type_name -> huawei_ifm.Ifm.HdlcDamp.HdlcDampLevel
	55,  // 18: huawei_ifm.Ifm.IfDamp.ifDampLevel:type_name -> huawei_ifm.Ifm.IfDamp.IfDampLevel
	163, // 19: huawei_ifm.Ifm.InterfaceCounts.interfaceCount:type_name -> huawei_ifm.Ifm.InterfaceCounts.InterfaceCount
	58,  // 20: huawei_ifm.Ifm.IpConflictConfig.ipConflictCheck:type_name -> huawei_ifm.Ifm.IpConflictConfig.IpConflictCheck
	59,  // 21: huawei_ifm.Ifm.IpConflictConfig.ipConflictPreempt:type_name -> huawei_ifm.Ifm.IpConflictConfig.IpConflictPreempt
	60,  // 22: huawei_ifm.Ifm.IpConflictConfig.ipv6ConflictCheck:type_name -> huawei_ifm.Ifm.IpConflictConfig.Ipv6ConflictCheck
	61,  // 23: huawei_ifm.Ifm.IpConflictConfig.ipv6ConflictPreempt:type_name -> huawei_ifm.Ifm.IpConflictConfig.Ipv6ConflictPreempt
	164, // 24: huawei_ifm.Ifm.IpInterfaceCountOper.ipInterfaceCounts:type_name -> huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts
	166, // 25: huawei_ifm.Ifm.Ipv6InterfaceCountOper.ipv6InterfaceCounts:type_name -> huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts
	64,  // 26: huawei_ifm.Ifm.PppDamp.pppDampLevel:type_name -> huawei_ifm.Ifm.PppDamp.PppDampLevel
	168, // 27: huawei_ifm.Ifm.RemoteInterfaces.remoteInterface:type_name -> huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface
	170, // 28: huawei_ifm.Ifm.StaticDimRanges.staticDimRange:type_name -> huawei_ifm.Ifm.StaticDimRanges.StaticDimRange
	0,   // 29: huawei_ifm.Ifm.Interfaces.Interface.ifAdminStatus:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfAdminStatus
	103, // 30: huawei_ifm.Ifm.Interfaces.Interface.ifClearedStat:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfClearedStat
	104, // 31: huawei_ifm.Ifm.Interfaces.Interface.ifDynamicInfo:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo
	105, // 32: huawei_ifm.Ifm.Interfaces.Interface.ifStatistics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfStatistics
	106, // 33: huawei_ifm.Ifm.Interfaces.Interface.flowAlarm:type_name -> huawei_ifm.Ifm.Interfaces.Interface.FlowAlarm
	107, // 34: huawei_ifm.Ifm.Interfaces.Interface.forwardMode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ForwardMode
	108, // 35: huawei_ifm.Ifm.Interfaces.Interface.fr:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Fr
	109, // 36: huawei_ifm.Ifm.Interfaces.Interface.hdlc:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Hdlc
	110, // 37: huawei_ifm.Ifm.Interfaces.Interface.ifCeIpStatiEnable:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable
	111, // 38: huawei_ifm.Ifm.Interfaces.Interface.ifCeIpStatisticsInfo:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatisticsInfo
	1,   // 39: huawei_ifm.Ifm.Interfaces.Interface.ifCfgEncapType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfCfgEncapType
	2,   // 40: huawei_ifm.Ifm.Interfaces.Interface.ifClass:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfClass
	112, // 41: huawei_ifm.Ifm.Interfaces.Interface.ifControlFlap:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfControlFlap
	113, // 42: huawei_ifm.Ifm.Interfaces.Interface.ifErrorDown:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfErrorDown
	114, // 43: huawei_ifm.Ifm.Interfaces.Interface.ifIpIcmpStatistics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIpIcmpStatistics
	115, // 44: huawei_ifm.Ifm.Interfaces.Interface.ifIpStatiCfg:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIpStatiCfg
	3,   // 45: huawei_ifm.Ifm.Interfaces.Interface.ifLinkProtocol:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfLinkProtocol
	116, // 46: huawei_ifm.Ifm.Interfaces.Interface.ifMru:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfMru
	117, // 47: huawei_ifm.Ifm.Interfaces.Interface.ifMruDiscardStat:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfMruDiscardStat
	118, // 48: huawei_ifm.Ifm.Interfaces.Interface.ifMruStatEnable:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfMruStatEnable
	4,   // 49: huawei_ifm.Ifm.Interfaces.Interface.ifNetworkLayerStatus:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfNetworkLayerStatus
	5,   // 50: huawei_ifm.Ifm.Interfaces.Interface.ifOperEncapType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfOperEncapType
	6,   // 51: huawei_ifm.Ifm.Interfaces.Interface.ifPhyType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfPhyType
	7,   // 52: huawei_ifm.Ifm.Interfaces.Interface.ifRouterType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfRouterType
	8,   // 53: huawei_ifm.Ifm.Interfaces.Interface.ifServiceType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfServiceType
	119, // 54: huawei_ifm.Ifm.Interfaces.Interface.ifTcpMss:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfTcpMss
	120, // 55: huawei_ifm.Ifm.Interfaces.Interface.ifTrackRtMtg:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfTrackRtMtg
	121, // 56: huawei_ifm.Ifm.Interfaces.Interface.ifTrapThreshold:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfTrapThreshold
	122, // 57: huawei_ifm.Ifm.Interfaces.Interface.ipv4Config:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config
	123, // 58: huawei_ifm.Ifm.Interfaces.Interface.ipv4Oper:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper
	124, // 59: huawei_ifm.Ifm.Interfaces.Interface.ipv6Config:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config
	125, // 60: huawei_ifm.Ifm.Interfaces.Interface.ipv6Oper:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper
	126, // 61: huawei_ifm.Ifm.Interfaces.Interface.mainIpAddr:type_name -> huawei_ifm.Ifm.Interfaces.Interface.MainIpAddr
	127, // 62: huawei_ifm.Ifm.Interfaces.Interface.netSlices:type_name -> huawei_ifm.Ifm.Interfaces.Interface.NetSlices
	128, // 63: huawei_ifm.Ifm.Interfaces.Interface.phyDampIfCfg:type_name -> huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfCfg
	129, // 64: huawei_ifm.Ifm.Interfaces.Interface.phyDampIfOper:type_name -> huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfOper
	130, // 65: huawei_ifm.Ifm.Interfaces.Interface.phyIfMacStat:type_name -> huawei_ifm.Ifm.Interfaces.Interface.PhyIfMacStat
	9,   // 66: huawei_ifm.Ifm.Interfaces.Interface.portMode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.PortMode
	131, // 67: huawei_ifm.Ifm.Interfaces.Interface.ppp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp
	132, // 68: huawei_ifm.Ifm.Interfaces.Interface.remoteIfStat:type_name -> huawei_ifm.Ifm.Interfaces.Interface.RemoteIfStat
	10,  // 69: huawei_ifm.Ifm.Interfaces.Interface.statMode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.StatMode
	133, // 70: huawei_ifm.Ifm.Interfaces.Interface.transAlarmDown:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown
	134, // 71: huawei_ifm.Ifm.Interfaces.Interface.vPosition:type_name -> huawei_ifm.Ifm.Interfaces.Interface.VPosition
	135, // 72: huawei_ifm.Ifm.Interfaces.Interface.vbdIfForwardMode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.VbdIfForwardMode
	136, // 73: huawei_ifm.Ifm.Interfaces.Interface.veGroup:type_name -> huawei_ifm.Ifm.Interfaces.Interface.VeGroup
	137, // 74: huawei_ifm.Ifm.Interfaces.Interface.veMemberSlot:type_name -> huawei_ifm.Ifm.Interfaces.Interface.VeMemberSlot
	138, // 75: huawei_ifm.Ifm.Interfaces.Interface.vllPwLoopChk:type_name -> huawei_ifm.Ifm.Interfaces.Interface.VllPwLoopChk
	139, // 76: huawei_ifm.Ifm.Interfaces.Interface.IfClearedStat.ifMacMtuDiscardStat:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfClearedStat.IfMacMtuDiscardStat
	11,  // 77: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.ifOperStatus:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfOperStatus
	12,  // 78: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.ifLinkQualityGrade:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfLinkQualityGrade
	13,  // 79: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.ifLinkStatus:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfLinkStatus
	14,  // 80: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.ifPhyStatus:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfPhyStatus
	15,  // 81: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.ifV4State:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfV4State
	16,  // 82: huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.ifV6State:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfDynamicInfo.IfV6State
	140, // 83: huawei_ifm.Ifm.Interfaces.Interface.IfStatistics.ethPortErrSts:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfStatistics.EthPortErrSts
	17,  // 84: huawei_ifm.Ifm.Interfaces.Interface.ForwardMode.veForwarMode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ForwardMode.VeForwarMode
	141, // 85: huawei_ifm.Ifm.Interfaces.Interface.Fr.dlcis:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Fr.Dlcis
	142, // 86: huawei_ifm.Ifm.Interfaces.Interface.Fr.ifLink:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Fr.IfLink
	18,  // 87: huawei_ifm.Ifm.Interfaces.Interface.Fr.ifType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Fr.IfType
	19,  // 88: huawei_ifm.Ifm.Interfaces.Interface.Fr.lmiType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Fr.LmiType
	143, // 89: huawei_ifm.Ifm.Interfaces.Interface.Hdlc.ifLink:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Hdlc.IfLink
	20,  // 90: huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.ifIpStatiEnable:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.IfIpStatiEnable
	21,  // 91: huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.ifIpStatiIpv4Enable:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.IfIpStatiIpv4Enable
	22,  // 92: huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.ifIpStatiIpv6Enable:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfCeIpStatiEnable.IfIpStatiIpv6Enable
	23,  // 93: huawei_ifm.Ifm.Interfaces.Interface.IfErrorDown.errorDownCause:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfErrorDown.ErrorDownCause
	24,  // 94: huawei_ifm.Ifm.Interfaces.Interface.IfIpStatiCfg.ifIpStatiMode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIpStatiCfg.IfIpStatiMode
	25,  // 95: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.addrCfgType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.AddrCfgType
	144, // 96: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.am4CfgAddrs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs
	146, // 97: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.ipv4Addrs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs
	148, // 98: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.am6CfgAddrs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs
	149, // 99: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.am6CgaInfos:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CgaInfos
	152, // 100: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.ipv6Addrs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs
	33,  // 101: huawei_ifm.Ifm.Interfaces.Interface.MainIpAddr.ipAddrCfgType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.MainIpAddr.IpAddrCfgType
	154, // 102: huawei_ifm.Ifm.Interfaces.Interface.NetSlices.netSlice:type_name -> huawei_ifm.Ifm.Interfaces.Interface.NetSlices.NetSlice
	34,  // 103: huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfCfg.ifDampLevel:type_name -> huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfCfg.IfDampLevel
	35,  // 104: huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfOper.ifSuppressStatus:type_name -> huawei_ifm.Ifm.Interfaces.Interface.PhyDampIfOper.IfSuppressStatus
	155, // 105: huawei_ifm.Ifm.Interfaces.Interface.Ppp.crcParam:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam
	156, // 106: huawei_ifm.Ifm.Interfaces.Interface.Ppp.dispPppInfoNode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode
	157, // 107: huawei_ifm.Ifm.Interfaces.Interface.Ppp.ifLink:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.IfLink
	36,  // 108: huawei_ifm.Ifm.Interfaces.Interface.Ppp.mplscpNego:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.MplscpNego
	37,  // 109: huawei_ifm.Ifm.Interfaces.Interface.Ppp.mruNegoMtd:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.MruNegoMtd
	38,  // 110: huawei_ifm.Ifm.Interfaces.Interface.Ppp.osicpNego:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.OsicpNego
	158, // 111: huawei_ifm.Ifm.Interfaces.Interface.Ppp.pppStatistics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.PppStatistics
	47,  // 112: huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.oof:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.Oof
	48,  // 113: huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.pais:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.Pais
	49,  // 114: huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.prdi:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TransAlarmDown.Prdi
	50,  // 115: huawei_ifm.Ifm.Interfaces.Interface.VeGroup.veIfType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.VeGroup.VeIfType
	145, // 116: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs.am4CfgAddr:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs.Am4CfgAddr
	26,  // 117: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs.Am4CfgAddr.addrType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4Config.Am4CfgAddrs.Am4CfgAddr.AddrType
	147, // 118: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs.ipv4Addr:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs.Ipv4Addr
	27,  // 119: huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs.Ipv4Addr.addrType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4Oper.Ipv4Addrs.Ipv4Addr.AddrType
	150, // 120: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.am6CfgAddr:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr
	151, // 121: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CgaInfos.am6CgaInfo:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CgaInfos.Am6CgaInfo
	28,  // 122: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr.addrType6:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr.AddrType6
	29,  // 123: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr.ifIDGenType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Config.Am6CfgAddrs.Am6CfgAddr.IfIDGenType
	153, // 124: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.ipv6Addr:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr
	30,  // 125: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.addrType6:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.AddrType6
	31,  // 126: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.ifIDGenType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.IfIDGenType
	32,  // 127: huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6Oper.Ipv6Addrs.Ipv6Addr.Status
	39,  // 128: huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam.crcBit:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam.CrcBit
	40,  // 129: huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam.errType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.CrcParam.ErrType
	159, // 130: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.downEvents:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents
	41,  // 131: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.ip6cpState:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.Ip6CpState
	42,  // 132: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.ipcpState:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.IpcpState
	43,  // 133: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.lcpState:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.LcpState
	44,  // 134: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.mplscpState:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.MplscpState
	45,  // 135: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.osicpState:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.OsicpState
	160, // 136: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents.downEvent:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents.DownEvent
	46,  // 137: huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents.DownEvent.linkType:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ppp.DispPppInfoNode.DownEvents.DownEvent.LinkType
	51,  // 138: huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.errorDownType:type_name -> huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.ErrorDownType
	56,  // 139: huawei_ifm.Ifm.InterfaceCounts.InterfaceCount.ifClass:type_name -> huawei_ifm.Ifm.InterfaceCounts.InterfaceCount.IfClass
	57,  // 140: huawei_ifm.Ifm.InterfaceCounts.InterfaceCount.ifPhyType:type_name -> huawei_ifm.Ifm.InterfaceCounts.InterfaceCount.IfPhyType
	165, // 141: huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts.ipInterfaceCount:type_name -> huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts.IpInterfaceCount
	62,  // 142: huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts.IpInterfaceCount.ifPhyType:type_name -> huawei_ifm.Ifm.IpInterfaceCountOper.IpInterfaceCounts.IpInterfaceCount.IfPhyType
	167, // 143: huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts.ipv6InterfaceCount:type_name -> huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts.Ipv6InterfaceCount
	63,  // 144: huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts.Ipv6InterfaceCount.ifPhyType:type_name -> huawei_ifm.Ifm.Ipv6InterfaceCountOper.Ipv6InterfaceCounts.Ipv6InterfaceCount.IfPhyType
	169, // 145: huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface.remoteIfStatOper:type_name -> huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface.RemoteIfStatOper
	65,  // 146: huawei_ifm.Ifm.StaticDimRanges.StaticDimRange.ifPhyType:type_name -> huawei_ifm.Ifm.StaticDimRanges.StaticDimRange.IfPhyType
	147, // [147:147] is the sub-list for method output_type
	147, // [147:147] is the sub-list for method input_type
	147, // [147:147] is the sub-list for extension type_name
	147, // [147:147] is the sub-list for extension extendee
	0,   // [0:147] is the sub-list for field type_name
}

func init() { file_huawei_ifm_proto_init() }
func file_huawei_ifm_proto_init() {
	if File_huawei_ifm_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_huawei_ifm_proto_rawDesc), len(file_huawei_ifm_proto_rawDesc)),
			NumEnums:      66,
			NumMessages:   105,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huawei_ifm_proto_goTypes,
		DependencyIndexes: file_huawei_ifm_proto_depIdxs,
		EnumInfos:         file_huawei_ifm_proto_enumTypes,
		MessageInfos:      file_huawei_ifm_proto_msgTypes,
	}.Build()
	File_huawei_ifm_proto = out.File
	file_huawei_ifm_proto_goTypes = nil
	file_huawei_ifm_proto_depIdxs = nil
}
