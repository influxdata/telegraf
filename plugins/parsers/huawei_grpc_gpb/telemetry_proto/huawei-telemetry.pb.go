// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: huawei-telemetry.proto

package telemetry

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HuaweiTelemetry_Encoding int32

const (
	HuaweiTelemetry_Encoding_GPB  HuaweiTelemetry_Encoding = 0 //GPB encoding format.
	HuaweiTelemetry_Encoding_JSON HuaweiTelemetry_Encoding = 1 //JSON encoding format.
)

// Enum value maps for HuaweiTelemetry_Encoding.
var (
	HuaweiTelemetry_Encoding_name = map[int32]string{
		0: "Encoding_GPB",
		1: "Encoding_JSON",
	}
	HuaweiTelemetry_Encoding_value = map[string]int32{
		"Encoding_GPB":  0,
		"Encoding_JSON": 1,
	}
)

func (x HuaweiTelemetry_Encoding) Enum() *HuaweiTelemetry_Encoding {
	p := new(HuaweiTelemetry_Encoding)
	*p = x
	return p
}

func (x HuaweiTelemetry_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HuaweiTelemetry_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_telemetry_proto_enumTypes[0].Descriptor()
}

func (HuaweiTelemetry_Encoding) Type() protoreflect.EnumType {
	return &file_huawei_telemetry_proto_enumTypes[0]
}

func (x HuaweiTelemetry_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HuaweiTelemetry_Encoding.Descriptor instead.
func (HuaweiTelemetry_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{0, 0}
}

type HuaweiTelemetrySelfDefinedEvent_ThresholdRelation int32

const (
	HuaweiTelemetrySelfDefinedEvent_ThresholdRelation_INVALID HuaweiTelemetrySelfDefinedEvent_ThresholdRelation = 0 //The relationship between thresholds is not configured.
	HuaweiTelemetrySelfDefinedEvent_ThresholdRelation_AND     HuaweiTelemetrySelfDefinedEvent_ThresholdRelation = 1 //The relationship between thresholds is And.
	HuaweiTelemetrySelfDefinedEvent_ThresholdRelation_OR      HuaweiTelemetrySelfDefinedEvent_ThresholdRelation = 2 //The relationship between thresholds is Or.
)

// Enum value maps for HuaweiTelemetrySelfDefinedEvent_ThresholdRelation.
var (
	HuaweiTelemetrySelfDefinedEvent_ThresholdRelation_name = map[int32]string{
		0: "ThresholdRelation_INVALID",
		1: "ThresholdRelation_AND",
		2: "ThresholdRelation_OR",
	}
	HuaweiTelemetrySelfDefinedEvent_ThresholdRelation_value = map[string]int32{
		"ThresholdRelation_INVALID": 0,
		"ThresholdRelation_AND":     1,
		"ThresholdRelation_OR":      2,
	}
)

func (x HuaweiTelemetrySelfDefinedEvent_ThresholdRelation) Enum() *HuaweiTelemetrySelfDefinedEvent_ThresholdRelation {
	p := new(HuaweiTelemetrySelfDefinedEvent_ThresholdRelation)
	*p = x
	return p
}

func (x HuaweiTelemetrySelfDefinedEvent_ThresholdRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HuaweiTelemetrySelfDefinedEvent_ThresholdRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_telemetry_proto_enumTypes[1].Descriptor()
}

func (HuaweiTelemetrySelfDefinedEvent_ThresholdRelation) Type() protoreflect.EnumType {
	return &file_huawei_telemetry_proto_enumTypes[1]
}

func (x HuaweiTelemetrySelfDefinedEvent_ThresholdRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HuaweiTelemetrySelfDefinedEvent_ThresholdRelation.Descriptor instead.
func (HuaweiTelemetrySelfDefinedEvent_ThresholdRelation) EnumDescriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{7, 0}
}

type HuaweiTelemetryThreshold_ThresholdOpType int32

const (
	HuaweiTelemetryThreshold_ThresholdOpType_EQ HuaweiTelemetryThreshold_ThresholdOpType = 0 //The actual value in the data sent equals to the configured data threshold.
	HuaweiTelemetryThreshold_ThresholdOpType_GT HuaweiTelemetryThreshold_ThresholdOpType = 1 //The actual value in the data sent is greater than the configured data threshold.
	HuaweiTelemetryThreshold_ThresholdOpType_GE HuaweiTelemetryThreshold_ThresholdOpType = 2 //The actual value in the data sent is greater than or equals to the configured data threshold.
	HuaweiTelemetryThreshold_ThresholdOpType_LT HuaweiTelemetryThreshold_ThresholdOpType = 3 //The actual value in the data sent is less than the configured data threshold.
	HuaweiTelemetryThreshold_ThresholdOpType_LE HuaweiTelemetryThreshold_ThresholdOpType = 4 //The actual value in the data sent is less than or equals to the configured data threshold.
)

// Enum value maps for HuaweiTelemetryThreshold_ThresholdOpType.
var (
	HuaweiTelemetryThreshold_ThresholdOpType_name = map[int32]string{
		0: "ThresholdOpType_EQ",
		1: "ThresholdOpType_GT",
		2: "ThresholdOpType_GE",
		3: "ThresholdOpType_LT",
		4: "ThresholdOpType_LE",
	}
	HuaweiTelemetryThreshold_ThresholdOpType_value = map[string]int32{
		"ThresholdOpType_EQ": 0,
		"ThresholdOpType_GT": 1,
		"ThresholdOpType_GE": 2,
		"ThresholdOpType_LT": 3,
		"ThresholdOpType_LE": 4,
	}
)

func (x HuaweiTelemetryThreshold_ThresholdOpType) Enum() *HuaweiTelemetryThreshold_ThresholdOpType {
	p := new(HuaweiTelemetryThreshold_ThresholdOpType)
	*p = x
	return p
}

func (x HuaweiTelemetryThreshold_ThresholdOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HuaweiTelemetryThreshold_ThresholdOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_telemetry_proto_enumTypes[2].Descriptor()
}

func (HuaweiTelemetryThreshold_ThresholdOpType) Type() protoreflect.EnumType {
	return &file_huawei_telemetry_proto_enumTypes[2]
}

func (x HuaweiTelemetryThreshold_ThresholdOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HuaweiTelemetryThreshold_ThresholdOpType.Descriptor instead.
func (HuaweiTelemetryThreshold_ThresholdOpType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{9, 0}
}

type HuaweiTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIdStr           string                   `protobuf:"bytes,1,opt,name=node_id_str,json=nodeIdStr,proto3" json:"node_id_str,omitempty"`                                //Device name.
	SubscriptionIdStr   string                   `protobuf:"bytes,2,opt,name=subscription_id_str,json=subscriptionIdStr,proto3" json:"subscription_id_str,omitempty"`        //Subscription name during static subscription configuration.
	SensorPath          string                   `protobuf:"bytes,3,opt,name=sensor_path,json=sensorPath,proto3" json:"sensor_path,omitempty"`                               //Subscription path.
	ProtoPath           string                   `protobuf:"bytes,13,opt,name=proto_path,json=protoPath,proto3" json:"proto_path,omitempty"`                                 //Message path for the sampling path in the proto file.
	CollectionId        uint64                   `protobuf:"varint,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`                        //Sampling round.
	CollectionStartTime uint64                   `protobuf:"varint,5,opt,name=collection_start_time,json=collectionStartTime,proto3" json:"collection_start_time,omitempty"` //Start time of a sampling round.
	MsgTimestamp        uint64                   `protobuf:"varint,6,opt,name=msg_timestamp,json=msgTimestamp,proto3" json:"msg_timestamp,omitempty"`                        //Timestamp when the current message is generated.
	DataGpb             *HuaweiTelemetryGPBTable `protobuf:"bytes,7,opt,name=data_gpb,json=dataGpb,proto3" json:"data_gpb,omitempty"`                                        //Indicates that the data carried is defined in HuaweiTelemetryGPBTable.
	CollectionEndTime   uint64                   `protobuf:"varint,8,opt,name=collection_end_time,json=collectionEndTime,proto3" json:"collection_end_time,omitempty"`       //End time of a sampling round.
	CurrentPeriod       uint32                   `protobuf:"varint,9,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty"`                     //Sampling precision, in milliseconds.
	ExceptDesc          string                   `protobuf:"bytes,10,opt,name=except_desc,json=exceptDesc,proto3" json:"except_desc,omitempty"`                              //Exception description. It is used to report exception information when a sampling exception occurs.
	ProductName         string                   `protobuf:"bytes,11,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                           //Product name.
	Encoding            HuaweiTelemetry_Encoding `protobuf:"varint,12,opt,name=encoding,proto3,enum=huaweitelemetry.HuaweiTelemetry_Encoding" json:"encoding,omitempty"`     //Data encoding format. If the GPB encoding format is used, the data_gpb field is valid. Otherwise, the data_str field is valid.
	DataStr             string                   `protobuf:"bytes,14,opt,name=data_str,json=dataStr,proto3" json:"data_str,omitempty"`                                       //This field is valid only when a non-GPB encoding format is used.
	NeId                string                   `protobuf:"bytes,15,opt,name=ne_id,json=neId,proto3" json:"ne_id,omitempty"`                                                //Unique ID of an NE. In the gateway scenario, this parameter is used to identify the NE to which data belongs.
	SoftwareVersion     string                   `protobuf:"bytes,16,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`               //Software version number.
}

func (x *HuaweiTelemetry) Reset() {
	*x = HuaweiTelemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiTelemetry) ProtoMessage() {}

func (x *HuaweiTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiTelemetry.ProtoReflect.Descriptor instead.
func (*HuaweiTelemetry) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *HuaweiTelemetry) GetNodeIdStr() string {
	if x != nil {
		return x.NodeIdStr
	}
	return ""
}

func (x *HuaweiTelemetry) GetSubscriptionIdStr() string {
	if x != nil {
		return x.SubscriptionIdStr
	}
	return ""
}

func (x *HuaweiTelemetry) GetSensorPath() string {
	if x != nil {
		return x.SensorPath
	}
	return ""
}

func (x *HuaweiTelemetry) GetProtoPath() string {
	if x != nil {
		return x.ProtoPath
	}
	return ""
}

func (x *HuaweiTelemetry) GetCollectionId() uint64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *HuaweiTelemetry) GetCollectionStartTime() uint64 {
	if x != nil {
		return x.CollectionStartTime
	}
	return 0
}

func (x *HuaweiTelemetry) GetMsgTimestamp() uint64 {
	if x != nil {
		return x.MsgTimestamp
	}
	return 0
}

func (x *HuaweiTelemetry) GetDataGpb() *HuaweiTelemetryGPBTable {
	if x != nil {
		return x.DataGpb
	}
	return nil
}

func (x *HuaweiTelemetry) GetCollectionEndTime() uint64 {
	if x != nil {
		return x.CollectionEndTime
	}
	return 0
}

func (x *HuaweiTelemetry) GetCurrentPeriod() uint32 {
	if x != nil {
		return x.CurrentPeriod
	}
	return 0
}

func (x *HuaweiTelemetry) GetExceptDesc() string {
	if x != nil {
		return x.ExceptDesc
	}
	return ""
}

func (x *HuaweiTelemetry) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *HuaweiTelemetry) GetEncoding() HuaweiTelemetry_Encoding {
	if x != nil {
		return x.Encoding
	}
	return HuaweiTelemetry_Encoding_GPB
}

func (x *HuaweiTelemetry) GetDataStr() string {
	if x != nil {
		return x.DataStr
	}
	return ""
}

func (x *HuaweiTelemetry) GetNeId() string {
	if x != nil {
		return x.NeId
	}
	return ""
}

func (x *HuaweiTelemetry) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

type HuaweiTelemetryGPBTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row       []*HuaweiTelemetryRowGPB `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"`             //Array definition. Its member is HuaweiTelemetryRowGPB structure.
	Delete    []*DataPath              `protobuf:"bytes,2,rep,name=delete,proto3" json:"delete,omitempty"`       //Delete the data path.
	Generator *Generator               `protobuf:"bytes,3,opt,name=generator,proto3" json:"generator,omitempty"` //Data source description. This applies to the OnChange+ service that requires high reliability.
}

func (x *HuaweiTelemetryGPBTable) Reset() {
	*x = HuaweiTelemetryGPBTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiTelemetryGPBTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiTelemetryGPBTable) ProtoMessage() {}

func (x *HuaweiTelemetryGPBTable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiTelemetryGPBTable.ProtoReflect.Descriptor instead.
func (*HuaweiTelemetryGPBTable) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *HuaweiTelemetryGPBTable) GetRow() []*HuaweiTelemetryRowGPB {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *HuaweiTelemetryGPBTable) GetDelete() []*DataPath {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *HuaweiTelemetryGPBTable) GetGenerator() *Generator {
	if x != nil {
		return x.Generator
	}
	return nil
}

type Generator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneratorId   uint64 `protobuf:"varint,1,opt,name=generator_id,json=generatorId,proto3" json:"generator_id,omitempty"`       //Data source ID. Multiple data sources can provide data concurrently and maintain their own reliability.
	GeneratorSn   uint32 `protobuf:"varint,2,opt,name=generator_sn,json=generatorSn,proto3" json:"generator_sn,omitempty"`       //Message sequence number. The sequence numbers of messages sent by each data source must be consecutive. If the sequence numbers are not consecutive, data out-of-synchronization occurs, the collector should support automatic disconnection and reconnection in this case. The value ranges from 0 to 0xFFFFFFFF and can be reversed.
	GeneratorSync bool   `protobuf:"varint,3,opt,name=generator_sync,json=generatorSync,proto3" json:"generator_sync,omitempty"` //Data source synchronization Indicates whether to perform OnChange full data synchronization. In addition, if the value is true and no data is contained, the synchronization is complete.
}

func (x *Generator) Reset() {
	*x = Generator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Generator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generator) ProtoMessage() {}

func (x *Generator) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Generator.ProtoReflect.Descriptor instead.
func (*Generator) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *Generator) GetGeneratorId() uint64 {
	if x != nil {
		return x.GeneratorId
	}
	return 0
}

func (x *Generator) GetGeneratorSn() uint32 {
	if x != nil {
		return x.GeneratorSn
	}
	return 0
}

func (x *Generator) GetGeneratorSync() bool {
	if x != nil {
		return x.GeneratorSync
	}
	return false
}

type HuaweiTelemetryRowGPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //Timestamp of the current sampling instance.
	Content   []byte `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`     //Sampling instance data carried. The sensor_path field must be considered to determine which .proto file is used for encoding.
}

func (x *HuaweiTelemetryRowGPB) Reset() {
	*x = HuaweiTelemetryRowGPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiTelemetryRowGPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiTelemetryRowGPB) ProtoMessage() {}

func (x *HuaweiTelemetryRowGPB) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiTelemetryRowGPB.ProtoReflect.Descriptor instead.
func (*HuaweiTelemetryRowGPB) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *HuaweiTelemetryRowGPB) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HuaweiTelemetryRowGPB) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type DataPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //Timestamp of the current sampling instance.
	Path      *Path  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`            //A data tree node that contains only the data path and key field information.
}

func (x *DataPath) Reset() {
	*x = DataPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPath) ProtoMessage() {}

func (x *DataPath) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPath.ProtoReflect.Descriptor instead.
func (*DataPath) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *DataPath) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataPath) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node []*PathElem `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"` //A data tree node that contains only the data path and key field information.
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *Path) GetNode() []*PathElem {
	if x != nil {
		return x.Node
	}
	return nil
}

type PathElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                       //Data tree node name
	Key  map[string]string `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //Key field name and value mapping table of the data tree node
}

func (x *PathElem) Reset() {
	*x = PathElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathElem) ProtoMessage() {}

func (x *PathElem) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathElem.ProtoReflect.Descriptor instead.
func (*PathElem) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *PathElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PathElem) GetKey() map[string]string {
	if x != nil {
		return x.Key
	}
	return nil
}

type HuaweiTelemetrySelfDefinedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path              string                                            `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                                                                                   //Sampling path that triggers the customized event, which describes the method of parsing the content.
	ProtoPath         string                                            `protobuf:"bytes,13,opt,name=proto_path,json=protoPath,proto3" json:"proto_path,omitempty"`                                                                       //Message path for the sampling path in the proto file.
	Level             uint32                                            `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                                                                                //Level of the user-defined event.
	Description       string                                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                                     //Description of the user-defined event.
	FieldName         string                                            `protobuf:"bytes,4,opt,name=fieldName,proto3" json:"fieldName,omitempty"`                                                                                         //Name of the field that triggers the customized event.
	FieldValue        uint32                                            `protobuf:"varint,5,opt,name=fieldValue,proto3" json:"fieldValue,omitempty"`                                                                                      //Value of the field that triggers the customized event.
	DataThreshold     *HuaweiTelemetrySelfDefineThresTable              `protobuf:"bytes,6,opt,name=data_threshold,json=dataThreshold,proto3" json:"data_threshold,omitempty"`                                                            //Threshold filter criteria when the customized event is triggered.
	ThresholdRelation HuaweiTelemetrySelfDefinedEvent_ThresholdRelation `protobuf:"varint,7,opt,name=thresholdRelation,proto3,enum=huaweitelemetry.HuaweiTelemetrySelfDefinedEvent_ThresholdRelation" json:"thresholdRelation,omitempty"` //Relationship between threshold filter criteria when the customized event is triggered.
	Content           []byte                                            `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`                                                                                             //Sampled data that triggers the customized event.
}

func (x *HuaweiTelemetrySelfDefinedEvent) Reset() {
	*x = HuaweiTelemetrySelfDefinedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiTelemetrySelfDefinedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiTelemetrySelfDefinedEvent) ProtoMessage() {}

func (x *HuaweiTelemetrySelfDefinedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiTelemetrySelfDefinedEvent.ProtoReflect.Descriptor instead.
func (*HuaweiTelemetrySelfDefinedEvent) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *HuaweiTelemetrySelfDefinedEvent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HuaweiTelemetrySelfDefinedEvent) GetProtoPath() string {
	if x != nil {
		return x.ProtoPath
	}
	return ""
}

func (x *HuaweiTelemetrySelfDefinedEvent) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *HuaweiTelemetrySelfDefinedEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HuaweiTelemetrySelfDefinedEvent) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *HuaweiTelemetrySelfDefinedEvent) GetFieldValue() uint32 {
	if x != nil {
		return x.FieldValue
	}
	return 0
}

func (x *HuaweiTelemetrySelfDefinedEvent) GetDataThreshold() *HuaweiTelemetrySelfDefineThresTable {
	if x != nil {
		return x.DataThreshold
	}
	return nil
}

func (x *HuaweiTelemetrySelfDefinedEvent) GetThresholdRelation() HuaweiTelemetrySelfDefinedEvent_ThresholdRelation {
	if x != nil {
		return x.ThresholdRelation
	}
	return HuaweiTelemetrySelfDefinedEvent_ThresholdRelation_INVALID
}

func (x *HuaweiTelemetrySelfDefinedEvent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type HuaweiTelemetrySelfDefineThresTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row []*HuaweiTelemetryThreshold `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"` //Multiple thresholds are included.
}

func (x *HuaweiTelemetrySelfDefineThresTable) Reset() {
	*x = HuaweiTelemetrySelfDefineThresTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiTelemetrySelfDefineThresTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiTelemetrySelfDefineThresTable) ProtoMessage() {}

func (x *HuaweiTelemetrySelfDefineThresTable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiTelemetrySelfDefineThresTable.ProtoReflect.Descriptor instead.
func (*HuaweiTelemetrySelfDefineThresTable) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *HuaweiTelemetrySelfDefineThresTable) GetRow() []*HuaweiTelemetryThreshold {
	if x != nil {
		return x.Row
	}
	return nil
}

type HuaweiTelemetryThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThresholdValue  uint32                                   `protobuf:"varint,1,opt,name=thresholdValue,proto3" json:"thresholdValue,omitempty"`                                                                 //Delivered threshold.
	ThresholdOpType HuaweiTelemetryThreshold_ThresholdOpType `protobuf:"varint,2,opt,name=thresholdOpType,proto3,enum=huaweitelemetry.HuaweiTelemetryThreshold_ThresholdOpType" json:"thresholdOpType,omitempty"` //Threshold on the device.
}

func (x *HuaweiTelemetryThreshold) Reset() {
	*x = HuaweiTelemetryThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_telemetry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuaweiTelemetryThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuaweiTelemetryThreshold) ProtoMessage() {}

func (x *HuaweiTelemetryThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_telemetry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuaweiTelemetryThreshold.ProtoReflect.Descriptor instead.
func (*HuaweiTelemetryThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_telemetry_proto_rawDescGZIP(), []int{9}
}

func (x *HuaweiTelemetryThreshold) GetThresholdValue() uint32 {
	if x != nil {
		return x.ThresholdValue
	}
	return 0
}

func (x *HuaweiTelemetryThreshold) GetThresholdOpType() HuaweiTelemetryThreshold_ThresholdOpType {
	if x != nil {
		return x.ThresholdOpType
	}
	return HuaweiTelemetryThreshold_ThresholdOpType_EQ
}

var File_huawei_telemetry_proto protoreflect.FileDescriptor

var file_huawei_telemetry_proto_rawDesc = []byte{
	0x0a, 0x16, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0xd2, 0x05, 0x0a, 0x0f, 0x48, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d,
	0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x67, 0x70, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x48, 0x75, 0x61, 0x77, 0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x47,
	0x50, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x47, 0x70, 0x62,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x48, 0x75, 0x61, 0x77, 0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x12, 0x13, 0x0a,
	0x05, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a,
	0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x50, 0x42, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0xc0,
	0x01, 0x0a, 0x17, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x47, 0x50, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x72, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x47, 0x50, 0x42, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x78, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x4f, 0x0a, 0x15, 0x48,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x6f,
	0x77, 0x47, 0x50, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x35, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6c,
	0x65, 0x6d, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x74,
	0x68, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65,
	0x6d, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a,
	0x36, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c, 0x04, 0x0a, 0x1f, 0x48, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x48,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x6c, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x70, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x48,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x6c, 0x66, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a,
	0x11, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x62, 0x0a, 0x23, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a,
	0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x48, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0xb3, 0x02, 0x0a, 0x18, 0x48,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x63, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x48, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x51, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x47, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x45, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x45, 0x10, 0x04,
	0x42, 0x03, 0x5a, 0x01, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_huawei_telemetry_proto_rawDescOnce sync.Once
	file_huawei_telemetry_proto_rawDescData = file_huawei_telemetry_proto_rawDesc
)

func file_huawei_telemetry_proto_rawDescGZIP() []byte {
	file_huawei_telemetry_proto_rawDescOnce.Do(func() {
		file_huawei_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_huawei_telemetry_proto_rawDescData)
	})
	return file_huawei_telemetry_proto_rawDescData
}

var file_huawei_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_huawei_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_huawei_telemetry_proto_goTypes = []interface{}{
	(HuaweiTelemetry_Encoding)(0),                          // 0: huaweitelemetry.HuaweiTelemetry.Encoding
	(HuaweiTelemetrySelfDefinedEvent_ThresholdRelation)(0), // 1: huaweitelemetry.HuaweiTelemetrySelfDefinedEvent.ThresholdRelation
	(HuaweiTelemetryThreshold_ThresholdOpType)(0),          // 2: huaweitelemetry.HuaweiTelemetryThreshold.ThresholdOpType
	(*HuaweiTelemetry)(nil),                                // 3: huaweitelemetry.HuaweiTelemetry
	(*HuaweiTelemetryGPBTable)(nil),                        // 4: huaweitelemetry.HuaweiTelemetryGPBTable
	(*Generator)(nil),                                      // 5: huaweitelemetry.Generator
	(*HuaweiTelemetryRowGPB)(nil),                          // 6: huaweitelemetry.HuaweiTelemetryRowGPB
	(*DataPath)(nil),                                       // 7: huaweitelemetry.DataPath
	(*Path)(nil),                                           // 8: huaweitelemetry.Path
	(*PathElem)(nil),                                       // 9: huaweitelemetry.PathElem
	(*HuaweiTelemetrySelfDefinedEvent)(nil),                // 10: huaweitelemetry.HuaweiTelemetrySelfDefinedEvent
	(*HuaweiTelemetrySelfDefineThresTable)(nil),            // 11: huaweitelemetry.HuaweiTelemetrySelfDefineThresTable
	(*HuaweiTelemetryThreshold)(nil),                       // 12: huaweitelemetry.HuaweiTelemetryThreshold
	nil,                                                    // 13: huaweitelemetry.PathElem.KeyEntry
}
var file_huawei_telemetry_proto_depIdxs = []int32{
	4,  // 0: huaweitelemetry.HuaweiTelemetry.data_gpb:type_name -> huaweitelemetry.HuaweiTelemetryGPBTable
	0,  // 1: huaweitelemetry.HuaweiTelemetry.encoding:type_name -> huaweitelemetry.HuaweiTelemetry.Encoding
	6,  // 2: huaweitelemetry.HuaweiTelemetryGPBTable.row:type_name -> huaweitelemetry.HuaweiTelemetryRowGPB
	7,  // 3: huaweitelemetry.HuaweiTelemetryGPBTable.delete:type_name -> huaweitelemetry.DataPath
	5,  // 4: huaweitelemetry.HuaweiTelemetryGPBTable.generator:type_name -> huaweitelemetry.Generator
	8,  // 5: huaweitelemetry.DataPath.path:type_name -> huaweitelemetry.Path
	9,  // 6: huaweitelemetry.Path.node:type_name -> huaweitelemetry.PathElem
	13, // 7: huaweitelemetry.PathElem.key:type_name -> huaweitelemetry.PathElem.KeyEntry
	11, // 8: huaweitelemetry.HuaweiTelemetrySelfDefinedEvent.data_threshold:type_name -> huaweitelemetry.HuaweiTelemetrySelfDefineThresTable
	1,  // 9: huaweitelemetry.HuaweiTelemetrySelfDefinedEvent.thresholdRelation:type_name -> huaweitelemetry.HuaweiTelemetrySelfDefinedEvent.ThresholdRelation
	12, // 10: huaweitelemetry.HuaweiTelemetrySelfDefineThresTable.row:type_name -> huaweitelemetry.HuaweiTelemetryThreshold
	2,  // 11: huaweitelemetry.HuaweiTelemetryThreshold.thresholdOpType:type_name -> huaweitelemetry.HuaweiTelemetryThreshold.ThresholdOpType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_huawei_telemetry_proto_init() }
func file_huawei_telemetry_proto_init() {
	if File_huawei_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huawei_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiTelemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiTelemetryGPBTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Generator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiTelemetryRowGPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiTelemetrySelfDefinedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiTelemetrySelfDefineThresTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_telemetry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuaweiTelemetryThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huawei_telemetry_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huawei_telemetry_proto_goTypes,
		DependencyIndexes: file_huawei_telemetry_proto_depIdxs,
		EnumInfos:         file_huawei_telemetry_proto_enumTypes,
		MessageInfos:      file_huawei_telemetry_proto_msgTypes,
	}.Build()
	File_huawei_telemetry_proto = out.File
	file_huawei_telemetry_proto_rawDesc = nil
	file_huawei_telemetry_proto_goTypes = nil
	file_huawei_telemetry_proto_depIdxs = nil
}
