// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: proto.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Diskio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Diskio_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Diskio_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64        `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Diskio) Reset() {
	*x = Diskio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diskio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diskio) ProtoMessage() {}

func (x *Diskio) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diskio.ProtoReflect.Descriptor instead.
func (*Diskio) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{0}
}

func (x *Diskio) GetFields() *Diskio_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Diskio) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Diskio) GetTags() *Diskio_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Diskio) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Glog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Glog_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Glog_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64      `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Glog) Reset() {
	*x = Glog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Glog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Glog) ProtoMessage() {}

func (x *Glog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Glog.ProtoReflect.Descriptor instead.
func (*Glog) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{1}
}

func (x *Glog) GetFields() *Glog_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Glog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Glog) GetTags() *Glog_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Glog) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type LTE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *LTE_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *LTE_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64     `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *LTE) Reset() {
	*x = LTE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTE) ProtoMessage() {}

func (x *LTE) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTE.ProtoReflect.Descriptor instead.
func (*LTE) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{2}
}

func (x *LTE) GetFields() *LTE_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LTE) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LTE) GetTags() *LTE_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *LTE) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Wireless struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Wireless_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Wireless_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64          `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Wireless) Reset() {
	*x = Wireless{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wireless) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wireless) ProtoMessage() {}

func (x *Wireless) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wireless.ProtoReflect.Descriptor instead.
func (*Wireless) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{3}
}

func (x *Wireless) GetFields() *Wireless_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Wireless) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Wireless) GetTags() *Wireless_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Wireless) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SMART struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *SMART_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *SMART_TAGS   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64       `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SMART) Reset() {
	*x = SMART{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMART) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMART) ProtoMessage() {}

func (x *SMART) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMART.ProtoReflect.Descriptor instead.
func (*SMART) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{4}
}

func (x *SMART) GetFields() *SMART_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SMART) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SMART) GetTags() *SMART_TAGS {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SMART) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Tegrastats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Tegrastats_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Tegrastats_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64            `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Tegrastats) Reset() {
	*x = Tegrastats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tegrastats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tegrastats) ProtoMessage() {}

func (x *Tegrastats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tegrastats.ProtoReflect.Descriptor instead.
func (*Tegrastats) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{5}
}

func (x *Tegrastats) GetFields() *Tegrastats_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Tegrastats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tegrastats) GetTags() *Tegrastats_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Tegrastats) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type CPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *CPU_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *CPU_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64     `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CPU) Reset() {
	*x = CPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPU) ProtoMessage() {}

func (x *CPU) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPU.ProtoReflect.Descriptor instead.
func (*CPU) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{6}
}

func (x *CPU) GetFields() *CPU_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CPU) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CPU) GetTags() *CPU_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPU) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Kernel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields    *Kernel_Fields `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	Tags      *Kernel_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64        `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Kernel) Reset() {
	*x = Kernel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kernel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kernel) ProtoMessage() {}

func (x *Kernel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kernel.ProtoReflect.Descriptor instead.
func (*Kernel) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{7}
}

func (x *Kernel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Kernel) GetFields() *Kernel_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Kernel) GetTags() *Kernel_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Kernel) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type LinuxSysctlFs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *LinuxSysctlFs_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *LinuxSysctlFs_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64               `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *LinuxSysctlFs) Reset() {
	*x = LinuxSysctlFs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxSysctlFs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSysctlFs) ProtoMessage() {}

func (x *LinuxSysctlFs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSysctlFs.ProtoReflect.Descriptor instead.
func (*LinuxSysctlFs) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{8}
}

func (x *LinuxSysctlFs) GetFields() *LinuxSysctlFs_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LinuxSysctlFs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LinuxSysctlFs) GetTags() *LinuxSysctlFs_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *LinuxSysctlFs) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *System_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *System_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64        `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{9}
}

func (x *System) GetFields() *System_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *System) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *System) GetTags() *System_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *System) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Net struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Net_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Net_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64     `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Net) Reset() {
	*x = Net{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net) ProtoMessage() {}

func (x *Net) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net.ProtoReflect.Descriptor instead.
func (*Net) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{10}
}

func (x *Net) GetFields() *Net_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Net) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Net) GetTags() *Net_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Net) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Interrupts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Interrupts_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Interrupts_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64            `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Interrupts) Reset() {
	*x = Interrupts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interrupts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interrupts) ProtoMessage() {}

func (x *Interrupts) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interrupts.ProtoReflect.Descriptor instead.
func (*Interrupts) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{11}
}

func (x *Interrupts) GetFields() *Interrupts_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Interrupts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interrupts) GetTags() *Interrupts_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Interrupts) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Mem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Mem_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Mem_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64     `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Mem) Reset() {
	*x = Mem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mem) ProtoMessage() {}

func (x *Mem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mem.ProtoReflect.Descriptor instead.
func (*Mem) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{12}
}

func (x *Mem) GetFields() *Mem_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Mem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mem) GetTags() *Mem_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Mem) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Disk_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Disk_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64      `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{13}
}

func (x *Disk) GetFields() *Disk_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Disk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Disk) GetTags() *Disk_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Disk) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Swap_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Swap_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64      `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Swap) Reset() {
	*x = Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{14}
}

func (x *Swap) GetFields() *Swap_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Swap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Swap) GetTags() *Swap_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Swap) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Processes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Processes_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Processes_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Processes) Reset() {
	*x = Processes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processes) ProtoMessage() {}

func (x *Processes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processes.ProtoReflect.Descriptor instead.
func (*Processes) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{15}
}

func (x *Processes) GetFields() *Processes_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Processes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Processes) GetTags() *Processes_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Processes) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DockerBlkio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *DockerBlkio_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *DockerBlkio_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64             `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *DockerBlkio) Reset() {
	*x = DockerBlkio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerBlkio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerBlkio) ProtoMessage() {}

func (x *DockerBlkio) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerBlkio.ProtoReflect.Descriptor instead.
func (*DockerBlkio) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{16}
}

func (x *DockerBlkio) GetFields() *DockerBlkio_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DockerBlkio) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DockerBlkio) GetTags() *DockerBlkio_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DockerBlkio) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DockerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *DockerStats_FIELDS `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *DockerStats_TAGS   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64             `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *DockerStats) Reset() {
	*x = DockerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerStats) ProtoMessage() {}

func (x *DockerStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerStats.ProtoReflect.Descriptor instead.
func (*DockerStats) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{17}
}

func (x *DockerStats) GetFields() *DockerStats_FIELDS {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DockerStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DockerStats) GetTags() *DockerStats_TAGS {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DockerStats) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DockerMem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *DockerMem_Fields `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *DockerMem_Tags   `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *DockerMem) Reset() {
	*x = DockerMem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerMem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerMem) ProtoMessage() {}

func (x *DockerMem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerMem.ProtoReflect.Descriptor instead.
func (*DockerMem) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{18}
}

func (x *DockerMem) GetFields() *DockerMem_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DockerMem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DockerMem) GetTags() *DockerMem_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DockerMem) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DockerCpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *DockerCpu_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *DockerCpu_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *DockerCpu) Reset() {
	*x = DockerCpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerCpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCpu) ProtoMessage() {}

func (x *DockerCpu) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCpu.ProtoReflect.Descriptor instead.
func (*DockerCpu) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{19}
}

func (x *DockerCpu) GetFields() *DockerCpu_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DockerCpu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DockerCpu) GetTags() *DockerCpu_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DockerCpu) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DockerNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *DockerNet_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *DockerNet_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *DockerNet) Reset() {
	*x = DockerNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerNet) ProtoMessage() {}

func (x *DockerNet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerNet.ProtoReflect.Descriptor instead.
func (*DockerNet) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{20}
}

func (x *DockerNet) GetFields() *DockerNet_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DockerNet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DockerNet) GetTags() *DockerNet_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DockerNet) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Netstat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Netstat_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Netstat_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64         `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Netstat) Reset() {
	*x = Netstat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Netstat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Netstat) ProtoMessage() {}

func (x *Netstat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Netstat.ProtoReflect.Descriptor instead.
func (*Netstat) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{21}
}

func (x *Netstat) GetFields() *Netstat_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Netstat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Netstat) GetTags() *Netstat_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Netstat) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *GPS_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *GPS_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64     `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GPS) Reset() {
	*x = GPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPS) ProtoMessage() {}

func (x *GPS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPS.ProtoReflect.Descriptor instead.
func (*GPS) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{22}
}

func (x *GPS) GetFields() *GPS_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GPS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GPS) GetTags() *GPS_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GPS) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Uploader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Uploader_Fields  `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"` // DEPRECATED - use fields_map instead
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Uploader_Tags    `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FieldsMap map[string]string `protobuf:"bytes,5,rep,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Uploader) Reset() {
	*x = Uploader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uploader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uploader) ProtoMessage() {}

func (x *Uploader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uploader.ProtoReflect.Descriptor instead.
func (*Uploader) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{23}
}

func (x *Uploader) GetFields() *Uploader_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Uploader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Uploader) GetTags() *Uploader_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Uploader) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Uploader) GetFieldsMap() map[string]string {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

type UploaderStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *UploaderStats_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *UploaderStats_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64               `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *UploaderStats) Reset() {
	*x = UploaderStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploaderStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploaderStats) ProtoMessage() {}

func (x *UploaderStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploaderStats.ProtoReflect.Descriptor instead.
func (*UploaderStats) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{24}
}

func (x *UploaderStats) GetFields() *UploaderStats_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UploaderStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploaderStats) GetTags() *UploaderStats_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UploaderStats) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type DetectNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *DetectNet_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"` // DEPRECATED - use fields_map instead
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *DetectNet_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FieldsMap map[string]string `protobuf:"bytes,5,rep,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DetectNet) Reset() {
	*x = DetectNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectNet) ProtoMessage() {}

func (x *DetectNet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectNet.ProtoReflect.Descriptor instead.
func (*DetectNet) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{25}
}

func (x *DetectNet) GetFields() *DetectNet_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DetectNet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DetectNet) GetTags() *DetectNet_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DetectNet) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DetectNet) GetFieldsMap() map[string]string {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

type SegNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *SegNet_Fields    `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"` // DEPRECATED - use fields_map instead
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *SegNet_Tags      `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FieldsMap map[string]string `protobuf:"bytes,5,rep,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SegNet) Reset() {
	*x = SegNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegNet) ProtoMessage() {}

func (x *SegNet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegNet.ProtoReflect.Descriptor instead.
func (*SegNet) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{26}
}

func (x *SegNet) GetFields() *SegNet_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SegNet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SegNet) GetTags() *SegNet_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SegNet) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SegNet) GetFieldsMap() map[string]string {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

type PPCorrection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *PPCorrection_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"` // DEPRECATED - use fields_map instead
	Name      string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *PPCorrection_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64              `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FieldsMap map[string]string    `protobuf:"bytes,5,rep,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PPCorrection) Reset() {
	*x = PPCorrection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPCorrection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPCorrection) ProtoMessage() {}

func (x *PPCorrection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPCorrection.ProtoReflect.Descriptor instead.
func (*PPCorrection) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{27}
}

func (x *PPCorrection) GetFields() *PPCorrection_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PPCorrection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PPCorrection) GetTags() *PPCorrection_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PPCorrection) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PPCorrection) GetFieldsMap() map[string]string {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

type Able struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *Able_Fields      `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"` // DEPRECATED - use fields_map instead
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Able_Tags        `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FieldsMap map[string]string `protobuf:"bytes,5,rep,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Able) Reset() {
	*x = Able{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Able) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Able) ProtoMessage() {}

func (x *Able) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Able.ProtoReflect.Descriptor instead.
func (*Able) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{28}
}

func (x *Able) GetFields() *Able_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Able) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Able) GetTags() *Able_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Able) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Able) GetFieldsMap() map[string]string {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

type AbleStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *AbleStats_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *AbleStats_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AbleStats) Reset() {
	*x = AbleStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbleStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbleStats) ProtoMessage() {}

func (x *AbleStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbleStats.ProtoReflect.Descriptor instead.
func (*AbleStats) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{29}
}

func (x *AbleStats) GetFields() *AbleStats_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *AbleStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbleStats) GetTags() *AbleStats_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AbleStats) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type CameraControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *CameraControl_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"` // DEPRECATED - use fields_map instead
	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *CameraControl_Tags   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64               `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FieldsMap map[string]string     `protobuf:"bytes,5,rep,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CameraControl) Reset() {
	*x = CameraControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraControl) ProtoMessage() {}

func (x *CameraControl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraControl.ProtoReflect.Descriptor instead.
func (*CameraControl) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{30}
}

func (x *CameraControl) GetFields() *CameraControl_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CameraControl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CameraControl) GetTags() *CameraControl_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CameraControl) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CameraControl) GetFieldsMap() map[string]string {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

type EventDataCutter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *EventDataCutter_Tags `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64               `protobuf:"fixed64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FieldsMap map[string]string     `protobuf:"bytes,4,rep,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventDataCutter) Reset() {
	*x = EventDataCutter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDataCutter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDataCutter) ProtoMessage() {}

func (x *EventDataCutter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDataCutter.ProtoReflect.Descriptor instead.
func (*EventDataCutter) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{31}
}

func (x *EventDataCutter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventDataCutter) GetTags() *EventDataCutter_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EventDataCutter) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventDataCutter) GetFieldsMap() map[string]string {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

type EventDataCutterStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *EventDataCutterStats_Tags `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64                    `protobuf:"fixed64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FieldsMap map[string]int64           `protobuf:"bytes,4,rep,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EventDataCutterStats) Reset() {
	*x = EventDataCutterStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDataCutterStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDataCutterStats) ProtoMessage() {}

func (x *EventDataCutterStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDataCutterStats.ProtoReflect.Descriptor instead.
func (*EventDataCutterStats) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{32}
}

func (x *EventDataCutterStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventDataCutterStats) GetTags() *EventDataCutterStats_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EventDataCutterStats) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventDataCutterStats) GetFieldsMap() map[string]int64 {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

type Recorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *Recorder_Tags    `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64           `protobuf:"fixed64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FieldsMap map[string]string `protobuf:"bytes,4,rep,name=fields_map,json=fieldsMap,proto3" json:"fields_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Recorder) Reset() {
	*x = Recorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recorder) ProtoMessage() {}

func (x *Recorder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recorder.ProtoReflect.Descriptor instead.
func (*Recorder) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{33}
}

func (x *Recorder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Recorder) GetTags() *Recorder_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Recorder) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Recorder) GetFieldsMap() map[string]string {
	if x != nil {
		return x.FieldsMap
	}
	return nil
}

type SMARTAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields    *SMARTAttribute_Fields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags      *SMARTAttribute_TAGS   `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Timestamp float64                `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SMARTAttribute) Reset() {
	*x = SMARTAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMARTAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMARTAttribute) ProtoMessage() {}

func (x *SMARTAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMARTAttribute.ProtoReflect.Descriptor instead.
func (*SMARTAttribute) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{34}
}

func (x *SMARTAttribute) GetFields() *SMARTAttribute_Fields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SMARTAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SMARTAttribute) GetTags() *SMARTAttribute_TAGS {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SMARTAttribute) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Influx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kernel               []*Kernel               `protobuf:"bytes,1,rep,name=kernel,proto3" json:"kernel,omitempty"`
	LinuxSysctlFs        []*LinuxSysctlFs        `protobuf:"bytes,2,rep,name=linux_sysctl_fs,json=linuxSysctlFs,proto3" json:"linux_sysctl_fs,omitempty"`
	System               []*System               `protobuf:"bytes,3,rep,name=system,proto3" json:"system,omitempty"`
	Net                  []*Net                  `protobuf:"bytes,4,rep,name=net,proto3" json:"net,omitempty"`
	Interrupts           []*Interrupts           `protobuf:"bytes,5,rep,name=interrupts,proto3" json:"interrupts,omitempty"`
	Mem                  []*Mem                  `protobuf:"bytes,6,rep,name=mem,proto3" json:"mem,omitempty"`
	Disk                 []*Disk                 `protobuf:"bytes,7,rep,name=disk,proto3" json:"disk,omitempty"`
	Processes            []*Processes            `protobuf:"bytes,8,rep,name=processes,proto3" json:"processes,omitempty"`
	Cpu                  []*CPU                  `protobuf:"bytes,9,rep,name=cpu,proto3" json:"cpu,omitempty"`
	Swap                 []*Swap                 `protobuf:"bytes,10,rep,name=swap,proto3" json:"swap,omitempty"`
	Tegrastats           []*Tegrastats           `protobuf:"bytes,11,rep,name=tegrastats,proto3" json:"tegrastats,omitempty"`
	DockerBlkio          []*DockerBlkio          `protobuf:"bytes,12,rep,name=dockerBlkio,proto3" json:"dockerBlkio,omitempty"`
	DockerNet            []*DockerNet            `protobuf:"bytes,13,rep,name=dockerNet,proto3" json:"dockerNet,omitempty"`
	DockerCpu            []*DockerCpu            `protobuf:"bytes,14,rep,name=dockerCpu,proto3" json:"dockerCpu,omitempty"`
	DockerMem            []*DockerMem            `protobuf:"bytes,15,rep,name=dockerMem,proto3" json:"dockerMem,omitempty"`
	DockerStats          []*DockerStats          `protobuf:"bytes,16,rep,name=dockerStats,proto3" json:"dockerStats,omitempty"`
	Smart                []*SMART                `protobuf:"bytes,17,rep,name=smart,proto3" json:"smart,omitempty"`
	Lte                  []*LTE                  `protobuf:"bytes,18,rep,name=lte,proto3" json:"lte,omitempty"`
	Glog                 []*Glog                 `protobuf:"bytes,19,rep,name=glog,proto3" json:"glog,omitempty"`
	Diskio               []*Diskio               `protobuf:"bytes,20,rep,name=diskio,proto3" json:"diskio,omitempty"`
	Netstat              []*Netstat              `protobuf:"bytes,21,rep,name=netstat,proto3" json:"netstat,omitempty"`
	Gps                  []*GPS                  `protobuf:"bytes,22,rep,name=gps,proto3" json:"gps,omitempty"`
	Able                 []*Able                 `protobuf:"bytes,23,rep,name=able,proto3" json:"able,omitempty"`
	CameraControl        []*CameraControl        `protobuf:"bytes,24,rep,name=cameraControl,proto3" json:"cameraControl,omitempty"`
	SegNet               []*SegNet               `protobuf:"bytes,25,rep,name=segNet,proto3" json:"segNet,omitempty"`
	Detectnet            []*DetectNet            `protobuf:"bytes,26,rep,name=detectnet,proto3" json:"detectnet,omitempty"`
	Uploader             []*Uploader             `protobuf:"bytes,27,rep,name=uploader,proto3" json:"uploader,omitempty"`
	UploaderStats        []*UploaderStats        `protobuf:"bytes,28,rep,name=uploader_stats,json=uploaderStats,proto3" json:"uploader_stats,omitempty"`
	Wireless             []*Wireless             `protobuf:"bytes,29,rep,name=wireless,proto3" json:"wireless,omitempty"`
	PpCorrection         []*PPCorrection         `protobuf:"bytes,30,rep,name=ppCorrection,proto3" json:"ppCorrection,omitempty"`
	EventDataCutter      []*EventDataCutter      `protobuf:"bytes,31,rep,name=eventDataCutter,proto3" json:"eventDataCutter,omitempty"`
	EventDataCutterStats []*EventDataCutterStats `protobuf:"bytes,32,rep,name=eventDataCutterStats,proto3" json:"eventDataCutterStats,omitempty"`
	Recorder             []*Recorder             `protobuf:"bytes,33,rep,name=recorder,proto3" json:"recorder,omitempty"`
	AbleStats            []*AbleStats            `protobuf:"bytes,34,rep,name=ableStats,proto3" json:"ableStats,omitempty"`
	SmartAttribute       []*SMARTAttribute       `protobuf:"bytes,35,rep,name=smartAttribute,proto3" json:"smartAttribute,omitempty"`
}

func (x *Influx) Reset() {
	*x = Influx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Influx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Influx) ProtoMessage() {}

func (x *Influx) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Influx.ProtoReflect.Descriptor instead.
func (*Influx) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{35}
}

func (x *Influx) GetKernel() []*Kernel {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *Influx) GetLinuxSysctlFs() []*LinuxSysctlFs {
	if x != nil {
		return x.LinuxSysctlFs
	}
	return nil
}

func (x *Influx) GetSystem() []*System {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Influx) GetNet() []*Net {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Influx) GetInterrupts() []*Interrupts {
	if x != nil {
		return x.Interrupts
	}
	return nil
}

func (x *Influx) GetMem() []*Mem {
	if x != nil {
		return x.Mem
	}
	return nil
}

func (x *Influx) GetDisk() []*Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *Influx) GetProcesses() []*Processes {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *Influx) GetCpu() []*CPU {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Influx) GetSwap() []*Swap {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *Influx) GetTegrastats() []*Tegrastats {
	if x != nil {
		return x.Tegrastats
	}
	return nil
}

func (x *Influx) GetDockerBlkio() []*DockerBlkio {
	if x != nil {
		return x.DockerBlkio
	}
	return nil
}

func (x *Influx) GetDockerNet() []*DockerNet {
	if x != nil {
		return x.DockerNet
	}
	return nil
}

func (x *Influx) GetDockerCpu() []*DockerCpu {
	if x != nil {
		return x.DockerCpu
	}
	return nil
}

func (x *Influx) GetDockerMem() []*DockerMem {
	if x != nil {
		return x.DockerMem
	}
	return nil
}

func (x *Influx) GetDockerStats() []*DockerStats {
	if x != nil {
		return x.DockerStats
	}
	return nil
}

func (x *Influx) GetSmart() []*SMART {
	if x != nil {
		return x.Smart
	}
	return nil
}

func (x *Influx) GetLte() []*LTE {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *Influx) GetGlog() []*Glog {
	if x != nil {
		return x.Glog
	}
	return nil
}

func (x *Influx) GetDiskio() []*Diskio {
	if x != nil {
		return x.Diskio
	}
	return nil
}

func (x *Influx) GetNetstat() []*Netstat {
	if x != nil {
		return x.Netstat
	}
	return nil
}

func (x *Influx) GetGps() []*GPS {
	if x != nil {
		return x.Gps
	}
	return nil
}

func (x *Influx) GetAble() []*Able {
	if x != nil {
		return x.Able
	}
	return nil
}

func (x *Influx) GetCameraControl() []*CameraControl {
	if x != nil {
		return x.CameraControl
	}
	return nil
}

func (x *Influx) GetSegNet() []*SegNet {
	if x != nil {
		return x.SegNet
	}
	return nil
}

func (x *Influx) GetDetectnet() []*DetectNet {
	if x != nil {
		return x.Detectnet
	}
	return nil
}

func (x *Influx) GetUploader() []*Uploader {
	if x != nil {
		return x.Uploader
	}
	return nil
}

func (x *Influx) GetUploaderStats() []*UploaderStats {
	if x != nil {
		return x.UploaderStats
	}
	return nil
}

func (x *Influx) GetWireless() []*Wireless {
	if x != nil {
		return x.Wireless
	}
	return nil
}

func (x *Influx) GetPpCorrection() []*PPCorrection {
	if x != nil {
		return x.PpCorrection
	}
	return nil
}

func (x *Influx) GetEventDataCutter() []*EventDataCutter {
	if x != nil {
		return x.EventDataCutter
	}
	return nil
}

func (x *Influx) GetEventDataCutterStats() []*EventDataCutterStats {
	if x != nil {
		return x.EventDataCutterStats
	}
	return nil
}

func (x *Influx) GetRecorder() []*Recorder {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *Influx) GetAbleStats() []*AbleStats {
	if x != nil {
		return x.AbleStats
	}
	return nil
}

func (x *Influx) GetSmartAttribute() []*SMARTAttribute {
	if x != nil {
		return x.SmartAttribute
	}
	return nil
}

type Diskio_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IoTime         float64 `protobuf:"fixed64,1,opt,name=io_time,json=ioTime,proto3" json:"io_time,omitempty"`
	IopsInProgress float64 `protobuf:"fixed64,2,opt,name=iops_in_progress,json=iopsInProgress,proto3" json:"iops_in_progress,omitempty"`
	MergedReads    float64 `protobuf:"fixed64,3,opt,name=merged_reads,json=mergedReads,proto3" json:"merged_reads,omitempty"`
	MergedWrites   float64 `protobuf:"fixed64,4,opt,name=merged_writes,json=mergedWrites,proto3" json:"merged_writes,omitempty"`
	ReadBytes      float64 `protobuf:"fixed64,5,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`
	ReadTime       float64 `protobuf:"fixed64,6,opt,name=read_time,json=readTime,proto3" json:"read_time,omitempty"`
	Reads          float64 `protobuf:"fixed64,7,opt,name=reads,proto3" json:"reads,omitempty"`
	WeightedIoTime float64 `protobuf:"fixed64,8,opt,name=weighted_io_time,json=weightedIoTime,proto3" json:"weighted_io_time,omitempty"`
	WriteBytes     float64 `protobuf:"fixed64,9,opt,name=write_bytes,json=writeBytes,proto3" json:"write_bytes,omitempty"`
	WriteTime      float64 `protobuf:"fixed64,10,opt,name=write_time,json=writeTime,proto3" json:"write_time,omitempty"`
	Writes         float64 `protobuf:"fixed64,11,opt,name=writes,proto3" json:"writes,omitempty"`
}

func (x *Diskio_Fields) Reset() {
	*x = Diskio_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diskio_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diskio_Fields) ProtoMessage() {}

func (x *Diskio_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diskio_Fields.ProtoReflect.Descriptor instead.
func (*Diskio_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Diskio_Fields) GetIoTime() float64 {
	if x != nil {
		return x.IoTime
	}
	return 0
}

func (x *Diskio_Fields) GetIopsInProgress() float64 {
	if x != nil {
		return x.IopsInProgress
	}
	return 0
}

func (x *Diskio_Fields) GetMergedReads() float64 {
	if x != nil {
		return x.MergedReads
	}
	return 0
}

func (x *Diskio_Fields) GetMergedWrites() float64 {
	if x != nil {
		return x.MergedWrites
	}
	return 0
}

func (x *Diskio_Fields) GetReadBytes() float64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *Diskio_Fields) GetReadTime() float64 {
	if x != nil {
		return x.ReadTime
	}
	return 0
}

func (x *Diskio_Fields) GetReads() float64 {
	if x != nil {
		return x.Reads
	}
	return 0
}

func (x *Diskio_Fields) GetWeightedIoTime() float64 {
	if x != nil {
		return x.WeightedIoTime
	}
	return 0
}

func (x *Diskio_Fields) GetWriteBytes() float64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *Diskio_Fields) GetWriteTime() float64 {
	if x != nil {
		return x.WriteTime
	}
	return 0
}

func (x *Diskio_Fields) GetWrites() float64 {
	if x != nil {
		return x.Writes
	}
	return 0
}

type Diskio_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Diskio_Tags) Reset() {
	*x = Diskio_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diskio_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diskio_Tags) ProtoMessage() {}

func (x *Diskio_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diskio_Tags.ProtoReflect.Descriptor instead.
func (*Diskio_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Diskio_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Diskio_Tags) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Glog_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel  string `protobuf:"bytes,1,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	Logcode   string `protobuf:"bytes,2,opt,name=logcode,proto3" json:"logcode,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Glog_Fields) Reset() {
	*x = Glog_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Glog_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Glog_Fields) ProtoMessage() {}

func (x *Glog_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Glog_Fields.ProtoReflect.Descriptor instead.
func (*Glog_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Glog_Fields) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Glog_Fields) GetLogcode() string {
	if x != nil {
		return x.Logcode
	}
	return ""
}

func (x *Glog_Fields) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Glog_Fields) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type Glog_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host   string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Glog_Tags) Reset() {
	*x = Glog_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Glog_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Glog_Tags) ProtoMessage() {}

func (x *Glog_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Glog_Tags.ProtoReflect.Descriptor instead.
func (*Glog_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Glog_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Glog_Tags) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Glog_Tags) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type LTE_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId      string  `protobuf:"bytes,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	DlBandwidth float64 `protobuf:"fixed64,2,opt,name=dl_bandwidth,json=dlBandwidth,proto3" json:"dl_bandwidth,omitempty"`
	Earfcn      float64 `protobuf:"fixed64,3,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	FreqBandInd float64 `protobuf:"fixed64,4,opt,name=freq_band_ind,json=freqBandInd,proto3" json:"freq_band_ind,omitempty"`
	IsTdd       string  `protobuf:"bytes,5,opt,name=is_tdd,json=isTdd,proto3" json:"is_tdd,omitempty"`
	Mmc         float64 `protobuf:"fixed64,6,opt,name=mmc,proto3" json:"mmc,omitempty"`
	Mnc         float64 `protobuf:"fixed64,7,opt,name=mnc,proto3" json:"mnc,omitempty"`
	PcId        float64 `protobuf:"fixed64,8,opt,name=pc_id,json=pcId,proto3" json:"pc_id,omitempty"`
	Rsrp        string  `protobuf:"bytes,9,opt,name=rsrp,proto3" json:"rsrp,omitempty"` // deprecated use rsrp_num
	Rsrq        float64 `protobuf:"fixed64,10,opt,name=rsrq,proto3" json:"rsrq,omitempty"`
	Rssi        float64 `protobuf:"fixed64,11,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Sinr        float64 `protobuf:"fixed64,12,opt,name=sinr,proto3" json:"sinr,omitempty"`
	Srxlev      float64 `protobuf:"fixed64,13,opt,name=srxlev,proto3" json:"srxlev,omitempty"`
	State       string  `protobuf:"bytes,14,opt,name=state,proto3" json:"state,omitempty"`
	UlBandwidth float64 `protobuf:"fixed64,15,opt,name=ul_bandwidth,json=ulBandwidth,proto3" json:"ul_bandwidth,omitempty"`
	RsrpNum     float64 `protobuf:"fixed64,16,opt,name=rsrp_num,json=rsrpNum,proto3" json:"rsrp_num,omitempty"`
}

func (x *LTE_Fields) Reset() {
	*x = LTE_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTE_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTE_Fields) ProtoMessage() {}

func (x *LTE_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTE_Fields.ProtoReflect.Descriptor instead.
func (*LTE_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{2, 0}
}

func (x *LTE_Fields) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

func (x *LTE_Fields) GetDlBandwidth() float64 {
	if x != nil {
		return x.DlBandwidth
	}
	return 0
}

func (x *LTE_Fields) GetEarfcn() float64 {
	if x != nil {
		return x.Earfcn
	}
	return 0
}

func (x *LTE_Fields) GetFreqBandInd() float64 {
	if x != nil {
		return x.FreqBandInd
	}
	return 0
}

func (x *LTE_Fields) GetIsTdd() string {
	if x != nil {
		return x.IsTdd
	}
	return ""
}

func (x *LTE_Fields) GetMmc() float64 {
	if x != nil {
		return x.Mmc
	}
	return 0
}

func (x *LTE_Fields) GetMnc() float64 {
	if x != nil {
		return x.Mnc
	}
	return 0
}

func (x *LTE_Fields) GetPcId() float64 {
	if x != nil {
		return x.PcId
	}
	return 0
}

func (x *LTE_Fields) GetRsrp() string {
	if x != nil {
		return x.Rsrp
	}
	return ""
}

func (x *LTE_Fields) GetRsrq() float64 {
	if x != nil {
		return x.Rsrq
	}
	return 0
}

func (x *LTE_Fields) GetRssi() float64 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *LTE_Fields) GetSinr() float64 {
	if x != nil {
		return x.Sinr
	}
	return 0
}

func (x *LTE_Fields) GetSrxlev() float64 {
	if x != nil {
		return x.Srxlev
	}
	return 0
}

func (x *LTE_Fields) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LTE_Fields) GetUlBandwidth() float64 {
	if x != nil {
		return x.UlBandwidth
	}
	return 0
}

func (x *LTE_Fields) GetRsrpNum() float64 {
	if x != nil {
		return x.RsrpNum
	}
	return 0
}

type LTE_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *LTE_Tags) Reset() {
	*x = LTE_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LTE_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTE_Tags) ProtoMessage() {}

func (x *LTE_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTE_Tags.ProtoReflect.Descriptor instead.
func (*LTE_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{2, 1}
}

func (x *LTE_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *LTE_Tags) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Wireless_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Link         int64 `protobuf:"varint,2,opt,name=link,proto3" json:"link,omitempty"`
	Level        int64 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Noise        int64 `protobuf:"varint,4,opt,name=noise,proto3" json:"noise,omitempty"`
	Nwid         int64 `protobuf:"varint,5,opt,name=nwid,proto3" json:"nwid,omitempty"`
	Crypt        int64 `protobuf:"varint,6,opt,name=crypt,proto3" json:"crypt,omitempty"`
	Frag         int64 `protobuf:"varint,7,opt,name=frag,proto3" json:"frag,omitempty"`
	Retry        int64 `protobuf:"varint,8,opt,name=retry,proto3" json:"retry,omitempty"`
	Misc         int64 `protobuf:"varint,9,opt,name=misc,proto3" json:"misc,omitempty"`
	MissedBeacon int64 `protobuf:"varint,10,opt,name=missed_beacon,json=missedBeacon,proto3" json:"missed_beacon,omitempty"`
}

func (x *Wireless_Fields) Reset() {
	*x = Wireless_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wireless_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wireless_Fields) ProtoMessage() {}

func (x *Wireless_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wireless_Fields.ProtoReflect.Descriptor instead.
func (*Wireless_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Wireless_Fields) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Wireless_Fields) GetLink() int64 {
	if x != nil {
		return x.Link
	}
	return 0
}

func (x *Wireless_Fields) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Wireless_Fields) GetNoise() int64 {
	if x != nil {
		return x.Noise
	}
	return 0
}

func (x *Wireless_Fields) GetNwid() int64 {
	if x != nil {
		return x.Nwid
	}
	return 0
}

func (x *Wireless_Fields) GetCrypt() int64 {
	if x != nil {
		return x.Crypt
	}
	return 0
}

func (x *Wireless_Fields) GetFrag() int64 {
	if x != nil {
		return x.Frag
	}
	return 0
}

func (x *Wireless_Fields) GetRetry() int64 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *Wireless_Fields) GetMisc() int64 {
	if x != nil {
		return x.Misc
	}
	return 0
}

func (x *Wireless_Fields) GetMissedBeacon() int64 {
	if x != nil {
		return x.MissedBeacon
	}
	return 0
}

type Wireless_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host      string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Wireless_Tags) Reset() {
	*x = Wireless_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wireless_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wireless_Tags) ProtoMessage() {}

func (x *Wireless_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wireless_Tags.ProtoReflect.Descriptor instead.
func (*Wireless_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Wireless_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Wireless_Tags) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

type SMART_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitStatus float64 `protobuf:"fixed64,1,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	HealthOk   bool    `protobuf:"varint,2,opt,name=health_ok,json=healthOk,proto3" json:"health_ok,omitempty"`
	TempC      float64 `protobuf:"fixed64,3,opt,name=temp_c,json=tempC,proto3" json:"temp_c,omitempty"`
}

func (x *SMART_Fields) Reset() {
	*x = SMART_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMART_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMART_Fields) ProtoMessage() {}

func (x *SMART_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMART_Fields.ProtoReflect.Descriptor instead.
func (*SMART_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SMART_Fields) GetExitStatus() float64 {
	if x != nil {
		return x.ExitStatus
	}
	return 0
}

func (x *SMART_Fields) GetHealthOk() bool {
	if x != nil {
		return x.HealthOk
	}
	return false
}

func (x *SMART_Fields) GetTempC() float64 {
	if x != nil {
		return x.TempC
	}
	return 0
}

type SMART_TAGS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device   string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Host     string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Model    string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	SerialNo string `protobuf:"bytes,4,opt,name=serial_no,json=serialNo,proto3" json:"serial_no,omitempty"`
}

func (x *SMART_TAGS) Reset() {
	*x = SMART_TAGS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMART_TAGS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMART_TAGS) ProtoMessage() {}

func (x *SMART_TAGS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMART_TAGS.ProtoReflect.Descriptor instead.
func (*SMART_TAGS) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{4, 1}
}

func (x *SMART_TAGS) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *SMART_TAGS) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SMART_TAGS) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SMART_TAGS) GetSerialNo() string {
	if x != nil {
		return x.SerialNo
	}
	return ""
}

type Tegrastats_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AoTemp                     float64 `protobuf:"fixed64,1,opt,name=ao_temp,json=aoTemp,proto3" json:"ao_temp,omitempty"`
	Ape                        float64 `protobuf:"fixed64,2,opt,name=ape,proto3" json:"ape,omitempty"`
	AuxTemp                    float64 `protobuf:"fixed64,3,opt,name=aux_temp,json=auxTemp,proto3" json:"aux_temp,omitempty"`
	Cpu1Freq                   float64 `protobuf:"fixed64,4,opt,name=cpu1freq,proto3" json:"cpu1freq,omitempty"`
	Cpu1Proc                   float64 `protobuf:"fixed64,5,opt,name=cpu1proc,proto3" json:"cpu1proc,omitempty"`
	Cpu2Freq                   float64 `protobuf:"fixed64,6,opt,name=cpu2freq,proto3" json:"cpu2freq,omitempty"`
	Cpu2Proc                   float64 `protobuf:"fixed64,7,opt,name=cpu2proc,proto3" json:"cpu2proc,omitempty"`
	CpuTemp                    float64 `protobuf:"fixed64,8,opt,name=cpu_temp,json=cpuTemp,proto3" json:"cpu_temp,omitempty"`
	Emcfreq                    float64 `protobuf:"fixed64,9,opt,name=emcfreq,proto3" json:"emcfreq,omitempty"`
	Emcfreqproc                float64 `protobuf:"fixed64,10,opt,name=emcfreqproc,proto3" json:"emcfreqproc,omitempty"`
	GpuTemp                    float64 `protobuf:"fixed64,11,opt,name=gpu_temp,json=gpuTemp,proto3" json:"gpu_temp,omitempty"`
	Gr3Dfreq                   float64 `protobuf:"fixed64,12,opt,name=gr3dfreq,proto3" json:"gr3dfreq,omitempty"`
	Gr3Dfreqproc               float64 `protobuf:"fixed64,13,opt,name=gr3dfreqproc,proto3" json:"gr3dfreqproc,omitempty"`
	MtsBg                      float64 `protobuf:"fixed64,14,opt,name=mts_bg,json=mtsBg,proto3" json:"mts_bg,omitempty"`
	MtsFg                      float64 `protobuf:"fixed64,15,opt,name=mts_fg,json=mtsFg,proto3" json:"mts_fg,omitempty"`
	LargestFreeBlockCount      float64 `protobuf:"fixed64,16,opt,name=largest_free_block_count,json=largestFreeBlockCount,proto3" json:"largest_free_block_count,omitempty"`
	RamTotal                   float64 `protobuf:"fixed64,17,opt,name=ram_total,json=ramTotal,proto3" json:"ram_total,omitempty"`
	RamUsed                    float64 `protobuf:"fixed64,18,opt,name=ram_used,json=ramUsed,proto3" json:"ram_used,omitempty"`
	SwapCached                 float64 `protobuf:"fixed64,19,opt,name=swap_cached,json=swapCached,proto3" json:"swap_cached,omitempty"`
	SwapTotal                  float64 `protobuf:"fixed64,20,opt,name=swap_total,json=swapTotal,proto3" json:"swap_total,omitempty"`
	SwapUsed                   float64 `protobuf:"fixed64,21,opt,name=swap_used,json=swapUsed,proto3" json:"swap_used,omitempty"`
	ThermalTemp                float64 `protobuf:"fixed64,22,opt,name=thermal_temp,json=thermalTemp,proto3" json:"thermal_temp,omitempty"`
	VddCpuGpuCvAvgMiliwats     float64 `protobuf:"fixed64,23,opt,name=vdd_cpu_gpu_cv_avg_miliwats,json=vddCpuGpuCvAvgMiliwats,proto3" json:"vdd_cpu_gpu_cv_avg_miliwats,omitempty"`
	VddCpuGpuCvCurrentMiliwats float64 `protobuf:"fixed64,24,opt,name=vdd_cpu_gpu_cv_current_miliwats,json=vddCpuGpuCvCurrentMiliwats,proto3" json:"vdd_cpu_gpu_cv_current_miliwats,omitempty"`
	VddInAvgMiliwats           float64 `protobuf:"fixed64,25,opt,name=vdd_in_avg_miliwats,json=vddInAvgMiliwats,proto3" json:"vdd_in_avg_miliwats,omitempty"`
	VddInCurrentMiliwats       float64 `protobuf:"fixed64,26,opt,name=vdd_in_current_miliwats,json=vddInCurrentMiliwats,proto3" json:"vdd_in_current_miliwats,omitempty"`
	VddSocAvgMiliwats          float64 `protobuf:"fixed64,27,opt,name=vdd_soc_avg_miliwats,json=vddSocAvgMiliwats,proto3" json:"vdd_soc_avg_miliwats,omitempty"`
	VddSocCurrentMiliwats      float64 `protobuf:"fixed64,28,opt,name=vdd_soc_current_miliwats,json=vddSocCurrentMiliwats,proto3" json:"vdd_soc_current_miliwats,omitempty"`
	LargestFreeBlockSizeMb     float64 `protobuf:"fixed64,29,opt,name=largest_free_block_size_mb,json=largestFreeBlockSizeMb,proto3" json:"largest_free_block_size_mb,omitempty"`
	Nvdec                      float64 `protobuf:"fixed64,30,opt,name=nvdec,proto3" json:"nvdec,omitempty"`
	Nvdec1                     float64 `protobuf:"fixed64,31,opt,name=nvdec1,proto3" json:"nvdec1,omitempty"`
	Nvenc                      float64 `protobuf:"fixed64,32,opt,name=nvenc,proto3" json:"nvenc,omitempty"`
	Nvenc1                     float64 `protobuf:"fixed64,33,opt,name=nvenc1,proto3" json:"nvenc1,omitempty"`
	Nvjpg                      float64 `protobuf:"fixed64,34,opt,name=nvjpg,proto3" json:"nvjpg,omitempty"`
}

func (x *Tegrastats_Fields) Reset() {
	*x = Tegrastats_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tegrastats_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tegrastats_Fields) ProtoMessage() {}

func (x *Tegrastats_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tegrastats_Fields.ProtoReflect.Descriptor instead.
func (*Tegrastats_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Tegrastats_Fields) GetAoTemp() float64 {
	if x != nil {
		return x.AoTemp
	}
	return 0
}

func (x *Tegrastats_Fields) GetApe() float64 {
	if x != nil {
		return x.Ape
	}
	return 0
}

func (x *Tegrastats_Fields) GetAuxTemp() float64 {
	if x != nil {
		return x.AuxTemp
	}
	return 0
}

func (x *Tegrastats_Fields) GetCpu1Freq() float64 {
	if x != nil {
		return x.Cpu1Freq
	}
	return 0
}

func (x *Tegrastats_Fields) GetCpu1Proc() float64 {
	if x != nil {
		return x.Cpu1Proc
	}
	return 0
}

func (x *Tegrastats_Fields) GetCpu2Freq() float64 {
	if x != nil {
		return x.Cpu2Freq
	}
	return 0
}

func (x *Tegrastats_Fields) GetCpu2Proc() float64 {
	if x != nil {
		return x.Cpu2Proc
	}
	return 0
}

func (x *Tegrastats_Fields) GetCpuTemp() float64 {
	if x != nil {
		return x.CpuTemp
	}
	return 0
}

func (x *Tegrastats_Fields) GetEmcfreq() float64 {
	if x != nil {
		return x.Emcfreq
	}
	return 0
}

func (x *Tegrastats_Fields) GetEmcfreqproc() float64 {
	if x != nil {
		return x.Emcfreqproc
	}
	return 0
}

func (x *Tegrastats_Fields) GetGpuTemp() float64 {
	if x != nil {
		return x.GpuTemp
	}
	return 0
}

func (x *Tegrastats_Fields) GetGr3Dfreq() float64 {
	if x != nil {
		return x.Gr3Dfreq
	}
	return 0
}

func (x *Tegrastats_Fields) GetGr3Dfreqproc() float64 {
	if x != nil {
		return x.Gr3Dfreqproc
	}
	return 0
}

func (x *Tegrastats_Fields) GetMtsBg() float64 {
	if x != nil {
		return x.MtsBg
	}
	return 0
}

func (x *Tegrastats_Fields) GetMtsFg() float64 {
	if x != nil {
		return x.MtsFg
	}
	return 0
}

func (x *Tegrastats_Fields) GetLargestFreeBlockCount() float64 {
	if x != nil {
		return x.LargestFreeBlockCount
	}
	return 0
}

func (x *Tegrastats_Fields) GetRamTotal() float64 {
	if x != nil {
		return x.RamTotal
	}
	return 0
}

func (x *Tegrastats_Fields) GetRamUsed() float64 {
	if x != nil {
		return x.RamUsed
	}
	return 0
}

func (x *Tegrastats_Fields) GetSwapCached() float64 {
	if x != nil {
		return x.SwapCached
	}
	return 0
}

func (x *Tegrastats_Fields) GetSwapTotal() float64 {
	if x != nil {
		return x.SwapTotal
	}
	return 0
}

func (x *Tegrastats_Fields) GetSwapUsed() float64 {
	if x != nil {
		return x.SwapUsed
	}
	return 0
}

func (x *Tegrastats_Fields) GetThermalTemp() float64 {
	if x != nil {
		return x.ThermalTemp
	}
	return 0
}

func (x *Tegrastats_Fields) GetVddCpuGpuCvAvgMiliwats() float64 {
	if x != nil {
		return x.VddCpuGpuCvAvgMiliwats
	}
	return 0
}

func (x *Tegrastats_Fields) GetVddCpuGpuCvCurrentMiliwats() float64 {
	if x != nil {
		return x.VddCpuGpuCvCurrentMiliwats
	}
	return 0
}

func (x *Tegrastats_Fields) GetVddInAvgMiliwats() float64 {
	if x != nil {
		return x.VddInAvgMiliwats
	}
	return 0
}

func (x *Tegrastats_Fields) GetVddInCurrentMiliwats() float64 {
	if x != nil {
		return x.VddInCurrentMiliwats
	}
	return 0
}

func (x *Tegrastats_Fields) GetVddSocAvgMiliwats() float64 {
	if x != nil {
		return x.VddSocAvgMiliwats
	}
	return 0
}

func (x *Tegrastats_Fields) GetVddSocCurrentMiliwats() float64 {
	if x != nil {
		return x.VddSocCurrentMiliwats
	}
	return 0
}

func (x *Tegrastats_Fields) GetLargestFreeBlockSizeMb() float64 {
	if x != nil {
		return x.LargestFreeBlockSizeMb
	}
	return 0
}

func (x *Tegrastats_Fields) GetNvdec() float64 {
	if x != nil {
		return x.Nvdec
	}
	return 0
}

func (x *Tegrastats_Fields) GetNvdec1() float64 {
	if x != nil {
		return x.Nvdec1
	}
	return 0
}

func (x *Tegrastats_Fields) GetNvenc() float64 {
	if x != nil {
		return x.Nvenc
	}
	return 0
}

func (x *Tegrastats_Fields) GetNvenc1() float64 {
	if x != nil {
		return x.Nvenc1
	}
	return 0
}

func (x *Tegrastats_Fields) GetNvjpg() float64 {
	if x != nil {
		return x.Nvjpg
	}
	return 0
}

type Tegrastats_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Tegrastats_Tags) Reset() {
	*x = Tegrastats_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tegrastats_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tegrastats_Tags) ProtoMessage() {}

func (x *Tegrastats_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tegrastats_Tags.ProtoReflect.Descriptor instead.
func (*Tegrastats_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Tegrastats_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Tegrastats_Tags) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CPU_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsageGuest     float64 `protobuf:"fixed64,1,opt,name=usage_guest,json=usageGuest,proto3" json:"usage_guest,omitempty"`
	UsageGuestNice float64 `protobuf:"fixed64,2,opt,name=usage_guest_nice,json=usageGuestNice,proto3" json:"usage_guest_nice,omitempty"`
	UsageIdle      float64 `protobuf:"fixed64,3,opt,name=usage_idle,json=usageIdle,proto3" json:"usage_idle,omitempty"`
	UsageIowait    float64 `protobuf:"fixed64,4,opt,name=usage_iowait,json=usageIowait,proto3" json:"usage_iowait,omitempty"`
	UsageIrq       float64 `protobuf:"fixed64,5,opt,name=usage_irq,json=usageIrq,proto3" json:"usage_irq,omitempty"`
	UsageNice      float64 `protobuf:"fixed64,6,opt,name=usage_nice,json=usageNice,proto3" json:"usage_nice,omitempty"`
	UsageSoftirq   float64 `protobuf:"fixed64,7,opt,name=usage_softirq,json=usageSoftirq,proto3" json:"usage_softirq,omitempty"`
	UsageSteal     float64 `protobuf:"fixed64,8,opt,name=usage_steal,json=usageSteal,proto3" json:"usage_steal,omitempty"`
	UsageSystem    float64 `protobuf:"fixed64,9,opt,name=usage_system,json=usageSystem,proto3" json:"usage_system,omitempty"`
	UsageUser      float64 `protobuf:"fixed64,10,opt,name=usage_user,json=usageUser,proto3" json:"usage_user,omitempty"`
}

func (x *CPU_Fields) Reset() {
	*x = CPU_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPU_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPU_Fields) ProtoMessage() {}

func (x *CPU_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPU_Fields.ProtoReflect.Descriptor instead.
func (*CPU_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CPU_Fields) GetUsageGuest() float64 {
	if x != nil {
		return x.UsageGuest
	}
	return 0
}

func (x *CPU_Fields) GetUsageGuestNice() float64 {
	if x != nil {
		return x.UsageGuestNice
	}
	return 0
}

func (x *CPU_Fields) GetUsageIdle() float64 {
	if x != nil {
		return x.UsageIdle
	}
	return 0
}

func (x *CPU_Fields) GetUsageIowait() float64 {
	if x != nil {
		return x.UsageIowait
	}
	return 0
}

func (x *CPU_Fields) GetUsageIrq() float64 {
	if x != nil {
		return x.UsageIrq
	}
	return 0
}

func (x *CPU_Fields) GetUsageNice() float64 {
	if x != nil {
		return x.UsageNice
	}
	return 0
}

func (x *CPU_Fields) GetUsageSoftirq() float64 {
	if x != nil {
		return x.UsageSoftirq
	}
	return 0
}

func (x *CPU_Fields) GetUsageSteal() float64 {
	if x != nil {
		return x.UsageSteal
	}
	return 0
}

func (x *CPU_Fields) GetUsageSystem() float64 {
	if x != nil {
		return x.UsageSystem
	}
	return 0
}

func (x *CPU_Fields) GetUsageUser() float64 {
	if x != nil {
		return x.UsageUser
	}
	return 0
}

type CPU_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu  string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *CPU_Tags) Reset() {
	*x = CPU_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPU_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPU_Tags) ProtoMessage() {}

func (x *CPU_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPU_Tags.ProtoReflect.Descriptor instead.
func (*CPU_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CPU_Tags) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *CPU_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type Kernel_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootTime        int64 `protobuf:"varint,1,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	ContextSwitches int64 `protobuf:"varint,2,opt,name=context_switches,json=contextSwitches,proto3" json:"context_switches,omitempty"`
	EntropyAvail    int64 `protobuf:"varint,3,opt,name=entropy_avail,json=entropyAvail,proto3" json:"entropy_avail,omitempty"`
	Interrupts      int64 `protobuf:"varint,4,opt,name=interrupts,proto3" json:"interrupts,omitempty"`
	ProcessesForked int64 `protobuf:"varint,5,opt,name=processes_forked,json=processesForked,proto3" json:"processes_forked,omitempty"`
}

func (x *Kernel_Fields) Reset() {
	*x = Kernel_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kernel_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kernel_Fields) ProtoMessage() {}

func (x *Kernel_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kernel_Fields.ProtoReflect.Descriptor instead.
func (*Kernel_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Kernel_Fields) GetBootTime() int64 {
	if x != nil {
		return x.BootTime
	}
	return 0
}

func (x *Kernel_Fields) GetContextSwitches() int64 {
	if x != nil {
		return x.ContextSwitches
	}
	return 0
}

func (x *Kernel_Fields) GetEntropyAvail() int64 {
	if x != nil {
		return x.EntropyAvail
	}
	return 0
}

func (x *Kernel_Fields) GetInterrupts() int64 {
	if x != nil {
		return x.Interrupts
	}
	return 0
}

func (x *Kernel_Fields) GetProcessesForked() int64 {
	if x != nil {
		return x.ProcessesForked
	}
	return 0
}

type Kernel_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Kernel_Tags) Reset() {
	*x = Kernel_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kernel_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kernel_Tags) ProtoMessage() {}

func (x *Kernel_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kernel_Tags.ProtoReflect.Descriptor instead.
func (*Kernel_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Kernel_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type LinuxSysctlFs_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AioMaxNr         float64 `protobuf:"fixed64,1,opt,name=aio_max_nr,json=aioMaxNr,proto3" json:"aio_max_nr,omitempty"`
	AioNr            float64 `protobuf:"fixed64,2,opt,name=aio_nr,json=aioNr,proto3" json:"aio_nr,omitempty"`
	DentryAgeLimit   float64 `protobuf:"fixed64,3,opt,name=dentry_age_limit,json=dentryAgeLimit,proto3" json:"dentry_age_limit,omitempty"`
	DentryNr         float64 `protobuf:"fixed64,4,opt,name=dentry_nr,json=dentryNr,proto3" json:"dentry_nr,omitempty"`
	DentryUnusedNr   float64 `protobuf:"fixed64,5,opt,name=dentry_unused_nr,json=dentryUnusedNr,proto3" json:"dentry_unused_nr,omitempty"`
	DentryWantPages  float64 `protobuf:"fixed64,6,opt,name=dentry_want_pages,json=dentryWantPages,proto3" json:"dentry_want_pages,omitempty"`
	FileMax          float64 `protobuf:"fixed64,7,opt,name=file_max,json=fileMax,proto3" json:"file_max,omitempty"`
	FileNr           float64 `protobuf:"fixed64,8,opt,name=file_nr,json=fileNr,proto3" json:"file_nr,omitempty"`
	InodeFreeNr      float64 `protobuf:"fixed64,9,opt,name=inode_free_nr,json=inodeFreeNr,proto3" json:"inode_free_nr,omitempty"`
	InodeNr          float64 `protobuf:"fixed64,10,opt,name=inode_nr,json=inodeNr,proto3" json:"inode_nr,omitempty"`
	InodePreshrinkNr float64 `protobuf:"fixed64,11,opt,name=inode_preshrink_nr,json=inodePreshrinkNr,proto3" json:"inode_preshrink_nr,omitempty"`
}

func (x *LinuxSysctlFs_Fields) Reset() {
	*x = LinuxSysctlFs_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxSysctlFs_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSysctlFs_Fields) ProtoMessage() {}

func (x *LinuxSysctlFs_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSysctlFs_Fields.ProtoReflect.Descriptor instead.
func (*LinuxSysctlFs_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{8, 0}
}

func (x *LinuxSysctlFs_Fields) GetAioMaxNr() float64 {
	if x != nil {
		return x.AioMaxNr
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetAioNr() float64 {
	if x != nil {
		return x.AioNr
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetDentryAgeLimit() float64 {
	if x != nil {
		return x.DentryAgeLimit
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetDentryNr() float64 {
	if x != nil {
		return x.DentryNr
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetDentryUnusedNr() float64 {
	if x != nil {
		return x.DentryUnusedNr
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetDentryWantPages() float64 {
	if x != nil {
		return x.DentryWantPages
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetFileMax() float64 {
	if x != nil {
		return x.FileMax
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetFileNr() float64 {
	if x != nil {
		return x.FileNr
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetInodeFreeNr() float64 {
	if x != nil {
		return x.InodeFreeNr
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetInodeNr() float64 {
	if x != nil {
		return x.InodeNr
	}
	return 0
}

func (x *LinuxSysctlFs_Fields) GetInodePreshrinkNr() float64 {
	if x != nil {
		return x.InodePreshrinkNr
	}
	return 0
}

type LinuxSysctlFs_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *LinuxSysctlFs_Tags) Reset() {
	*x = LinuxSysctlFs_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxSysctlFs_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSysctlFs_Tags) ProtoMessage() {}

func (x *LinuxSysctlFs_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSysctlFs_Tags.ProtoReflect.Descriptor instead.
func (*LinuxSysctlFs_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{8, 1}
}

func (x *LinuxSysctlFs_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type System_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Load1  float64 `protobuf:"fixed64,1,opt,name=load1,proto3" json:"load1,omitempty"`
	Load15 float64 `protobuf:"fixed64,2,opt,name=load15,proto3" json:"load15,omitempty"`
	Load5  float64 `protobuf:"fixed64,3,opt,name=load5,proto3" json:"load5,omitempty"`
	NCpus  int64   `protobuf:"varint,4,opt,name=n_cpus,json=nCpus,proto3" json:"n_cpus,omitempty"`
	Uptime int64   `protobuf:"varint,5,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *System_Fields) Reset() {
	*x = System_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Fields) ProtoMessage() {}

func (x *System_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Fields.ProtoReflect.Descriptor instead.
func (*System_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{9, 0}
}

func (x *System_Fields) GetLoad1() float64 {
	if x != nil {
		return x.Load1
	}
	return 0
}

func (x *System_Fields) GetLoad15() float64 {
	if x != nil {
		return x.Load15
	}
	return 0
}

func (x *System_Fields) GetLoad5() float64 {
	if x != nil {
		return x.Load5
	}
	return 0
}

func (x *System_Fields) GetNCpus() int64 {
	if x != nil {
		return x.NCpus
	}
	return 0
}

func (x *System_Fields) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

type System_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host  string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	VpnIp string `protobuf:"bytes,2,opt,name=vpn_ip,json=vpnIp,proto3" json:"vpn_ip,omitempty"`
}

func (x *System_Tags) Reset() {
	*x = System_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Tags) ProtoMessage() {}

func (x *System_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Tags.ProtoReflect.Descriptor instead.
func (*System_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{9, 1}
}

func (x *System_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *System_Tags) GetVpnIp() string {
	if x != nil {
		return x.VpnIp
	}
	return ""
}

type Net_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesRecv            int64 `protobuf:"varint,1,opt,name=bytes_recv,json=bytesRecv,proto3" json:"bytes_recv,omitempty"`
	BytesSent            int64 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	DropIn               int64 `protobuf:"varint,3,opt,name=drop_in,json=dropIn,proto3" json:"drop_in,omitempty"`
	DropOut              int64 `protobuf:"varint,4,opt,name=drop_out,json=dropOut,proto3" json:"drop_out,omitempty"`
	ErrIn                int64 `protobuf:"varint,5,opt,name=err_in,json=errIn,proto3" json:"err_in,omitempty"`
	ErrOut               int64 `protobuf:"varint,6,opt,name=err_out,json=errOut,proto3" json:"err_out,omitempty"`
	PacketsRecv          int64 `protobuf:"varint,7,opt,name=packets_recv,json=packetsRecv,proto3" json:"packets_recv,omitempty"`
	PacketsSent          int64 `protobuf:"varint,8,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	IcmpInaddrmaskreps   int64 `protobuf:"varint,9,opt,name=icmp_inaddrmaskreps,json=icmpInaddrmaskreps,proto3" json:"icmp_inaddrmaskreps,omitempty"`
	IcmpInaddrmasks      int64 `protobuf:"varint,10,opt,name=icmp_inaddrmasks,json=icmpInaddrmasks,proto3" json:"icmp_inaddrmasks,omitempty"`
	IcmpIncsumerrors     int64 `protobuf:"varint,11,opt,name=icmp_incsumerrors,json=icmpIncsumerrors,proto3" json:"icmp_incsumerrors,omitempty"`
	IcmpIndestunreachs   int64 `protobuf:"varint,12,opt,name=icmp_indestunreachs,json=icmpIndestunreachs,proto3" json:"icmp_indestunreachs,omitempty"`
	IcmpInechoreps       int64 `protobuf:"varint,13,opt,name=icmp_inechoreps,json=icmpInechoreps,proto3" json:"icmp_inechoreps,omitempty"`
	IcmpInechos          int64 `protobuf:"varint,14,opt,name=icmp_inechos,json=icmpInechos,proto3" json:"icmp_inechos,omitempty"`
	IcmpInerrors         int64 `protobuf:"varint,15,opt,name=icmp_inerrors,json=icmpInerrors,proto3" json:"icmp_inerrors,omitempty"`
	IcmpInmsgs           int64 `protobuf:"varint,16,opt,name=icmp_inmsgs,json=icmpInmsgs,proto3" json:"icmp_inmsgs,omitempty"`
	IcmpInparmprobs      int64 `protobuf:"varint,17,opt,name=icmp_inparmprobs,json=icmpInparmprobs,proto3" json:"icmp_inparmprobs,omitempty"`
	IcmpInredirects      int64 `protobuf:"varint,18,opt,name=icmp_inredirects,json=icmpInredirects,proto3" json:"icmp_inredirects,omitempty"`
	IcmpInsrcquenchs     int64 `protobuf:"varint,19,opt,name=icmp_insrcquenchs,json=icmpInsrcquenchs,proto3" json:"icmp_insrcquenchs,omitempty"`
	IcmpIntimeexcds      int64 `protobuf:"varint,20,opt,name=icmp_intimeexcds,json=icmpIntimeexcds,proto3" json:"icmp_intimeexcds,omitempty"`
	IcmpIntimestampreps  int64 `protobuf:"varint,21,opt,name=icmp_intimestampreps,json=icmpIntimestampreps,proto3" json:"icmp_intimestampreps,omitempty"`
	IcmpIntimestamps     int64 `protobuf:"varint,22,opt,name=icmp_intimestamps,json=icmpIntimestamps,proto3" json:"icmp_intimestamps,omitempty"`
	IcmpOutaddrmaskreps  int64 `protobuf:"varint,23,opt,name=icmp_outaddrmaskreps,json=icmpOutaddrmaskreps,proto3" json:"icmp_outaddrmaskreps,omitempty"`
	IcmpOutaddrmasks     int64 `protobuf:"varint,24,opt,name=icmp_outaddrmasks,json=icmpOutaddrmasks,proto3" json:"icmp_outaddrmasks,omitempty"`
	IcmpOutdestunreachs  int64 `protobuf:"varint,25,opt,name=icmp_outdestunreachs,json=icmpOutdestunreachs,proto3" json:"icmp_outdestunreachs,omitempty"`
	IcmpOutechoreps      int64 `protobuf:"varint,26,opt,name=icmp_outechoreps,json=icmpOutechoreps,proto3" json:"icmp_outechoreps,omitempty"`
	IcmpOutechos         int64 `protobuf:"varint,27,opt,name=icmp_outechos,json=icmpOutechos,proto3" json:"icmp_outechos,omitempty"`
	IcmpOuterrors        int64 `protobuf:"varint,28,opt,name=icmp_outerrors,json=icmpOuterrors,proto3" json:"icmp_outerrors,omitempty"`
	IcmpOutmsgs          int64 `protobuf:"varint,29,opt,name=icmp_outmsgs,json=icmpOutmsgs,proto3" json:"icmp_outmsgs,omitempty"`
	IcmpOutparmprobs     int64 `protobuf:"varint,30,opt,name=icmp_outparmprobs,json=icmpOutparmprobs,proto3" json:"icmp_outparmprobs,omitempty"`
	IcmpOutredirects     int64 `protobuf:"varint,31,opt,name=icmp_outredirects,json=icmpOutredirects,proto3" json:"icmp_outredirects,omitempty"`
	IcmpOutsrcquenchs    int64 `protobuf:"varint,32,opt,name=icmp_outsrcquenchs,json=icmpOutsrcquenchs,proto3" json:"icmp_outsrcquenchs,omitempty"`
	IcmpOuttimeexcds     int64 `protobuf:"varint,33,opt,name=icmp_outtimeexcds,json=icmpOuttimeexcds,proto3" json:"icmp_outtimeexcds,omitempty"`
	IcmpOuttimestampreps int64 `protobuf:"varint,34,opt,name=icmp_outtimestampreps,json=icmpOuttimestampreps,proto3" json:"icmp_outtimestampreps,omitempty"`
	IcmpOuttimestamps    int64 `protobuf:"varint,35,opt,name=icmp_outtimestamps,json=icmpOuttimestamps,proto3" json:"icmp_outtimestamps,omitempty"`
	IpDefaultttl         int64 `protobuf:"varint,36,opt,name=ip_defaultttl,json=ipDefaultttl,proto3" json:"ip_defaultttl,omitempty"`
	IpForwarding         int64 `protobuf:"varint,37,opt,name=ip_forwarding,json=ipForwarding,proto3" json:"ip_forwarding,omitempty"`
	IpForwdatagrams      int64 `protobuf:"varint,38,opt,name=ip_forwdatagrams,json=ipForwdatagrams,proto3" json:"ip_forwdatagrams,omitempty"`
	IpFragcreates        int64 `protobuf:"varint,39,opt,name=ip_fragcreates,json=ipFragcreates,proto3" json:"ip_fragcreates,omitempty"`
	IpFragfails          int64 `protobuf:"varint,40,opt,name=ip_fragfails,json=ipFragfails,proto3" json:"ip_fragfails,omitempty"`
	IpFragoks            int64 `protobuf:"varint,41,opt,name=ip_fragoks,json=ipFragoks,proto3" json:"ip_fragoks,omitempty"`
	IpInaddrerrors       int64 `protobuf:"varint,42,opt,name=ip_inaddrerrors,json=ipInaddrerrors,proto3" json:"ip_inaddrerrors,omitempty"`
	IpIndelivers         int64 `protobuf:"varint,43,opt,name=ip_indelivers,json=ipIndelivers,proto3" json:"ip_indelivers,omitempty"`
	IpIndiscards         int64 `protobuf:"varint,44,opt,name=ip_indiscards,json=ipIndiscards,proto3" json:"ip_indiscards,omitempty"`
	IpInhdrerrors        int64 `protobuf:"varint,45,opt,name=ip_inhdrerrors,json=ipInhdrerrors,proto3" json:"ip_inhdrerrors,omitempty"`
	IpInreceives         int64 `protobuf:"varint,46,opt,name=ip_inreceives,json=ipInreceives,proto3" json:"ip_inreceives,omitempty"`
	IpInunknownprotos    int64 `protobuf:"varint,47,opt,name=ip_inunknownprotos,json=ipInunknownprotos,proto3" json:"ip_inunknownprotos,omitempty"`
	IpOutdiscards        int64 `protobuf:"varint,48,opt,name=ip_outdiscards,json=ipOutdiscards,proto3" json:"ip_outdiscards,omitempty"`
	IpOutnoroutes        int64 `protobuf:"varint,49,opt,name=ip_outnoroutes,json=ipOutnoroutes,proto3" json:"ip_outnoroutes,omitempty"`
	IpOutrequests        int64 `protobuf:"varint,50,opt,name=ip_outrequests,json=ipOutrequests,proto3" json:"ip_outrequests,omitempty"`
	IpReasmfails         int64 `protobuf:"varint,51,opt,name=ip_reasmfails,json=ipReasmfails,proto3" json:"ip_reasmfails,omitempty"`
	IpReasmoks           int64 `protobuf:"varint,52,opt,name=ip_reasmoks,json=ipReasmoks,proto3" json:"ip_reasmoks,omitempty"`
	IpReasmreqds         int64 `protobuf:"varint,53,opt,name=ip_reasmreqds,json=ipReasmreqds,proto3" json:"ip_reasmreqds,omitempty"`
	IpReasmtimeout       int64 `protobuf:"varint,54,opt,name=ip_reasmtimeout,json=ipReasmtimeout,proto3" json:"ip_reasmtimeout,omitempty"`
	TcpActiveopens       int64 `protobuf:"varint,55,opt,name=tcp_activeopens,json=tcpActiveopens,proto3" json:"tcp_activeopens,omitempty"`
	TcpAttemptfails      int64 `protobuf:"varint,56,opt,name=tcp_attemptfails,json=tcpAttemptfails,proto3" json:"tcp_attemptfails,omitempty"`
	TcpCurrestab         int64 `protobuf:"varint,57,opt,name=tcp_currestab,json=tcpCurrestab,proto3" json:"tcp_currestab,omitempty"`
	TcpEstabresets       int64 `protobuf:"varint,58,opt,name=tcp_estabresets,json=tcpEstabresets,proto3" json:"tcp_estabresets,omitempty"`
	TcpIncsumerrors      int64 `protobuf:"varint,59,opt,name=tcp_incsumerrors,json=tcpIncsumerrors,proto3" json:"tcp_incsumerrors,omitempty"`
	TcpInerrs            int64 `protobuf:"varint,60,opt,name=tcp_inerrs,json=tcpInerrs,proto3" json:"tcp_inerrs,omitempty"`
	TcpInsegs            int64 `protobuf:"varint,61,opt,name=tcp_insegs,json=tcpInsegs,proto3" json:"tcp_insegs,omitempty"`
	TcpMaxconn           int64 `protobuf:"varint,62,opt,name=tcp_maxconn,json=tcpMaxconn,proto3" json:"tcp_maxconn,omitempty"`
	TcpOutrsts           int64 `protobuf:"varint,63,opt,name=tcp_outrsts,json=tcpOutrsts,proto3" json:"tcp_outrsts,omitempty"`
	TcpOutsegs           int64 `protobuf:"varint,64,opt,name=tcp_outsegs,json=tcpOutsegs,proto3" json:"tcp_outsegs,omitempty"`
	TcpPassiveopens      int64 `protobuf:"varint,65,opt,name=tcp_passiveopens,json=tcpPassiveopens,proto3" json:"tcp_passiveopens,omitempty"`
	TcpRetranssegs       int64 `protobuf:"varint,66,opt,name=tcp_retranssegs,json=tcpRetranssegs,proto3" json:"tcp_retranssegs,omitempty"`
	TcpRtoalgorithm      int64 `protobuf:"varint,67,opt,name=tcp_rtoalgorithm,json=tcpRtoalgorithm,proto3" json:"tcp_rtoalgorithm,omitempty"`
	TcpRtomax            int64 `protobuf:"varint,68,opt,name=tcp_rtomax,json=tcpRtomax,proto3" json:"tcp_rtomax,omitempty"`
	TcpRtomin            int64 `protobuf:"varint,69,opt,name=tcp_rtomin,json=tcpRtomin,proto3" json:"tcp_rtomin,omitempty"`
	UdpIgnoredmulti      int64 `protobuf:"varint,70,opt,name=udp_ignoredmulti,json=udpIgnoredmulti,proto3" json:"udp_ignoredmulti,omitempty"`
	UdpIncsumerrors      int64 `protobuf:"varint,71,opt,name=udp_incsumerrors,json=udpIncsumerrors,proto3" json:"udp_incsumerrors,omitempty"`
	UdpIndatagrams       int64 `protobuf:"varint,72,opt,name=udp_indatagrams,json=udpIndatagrams,proto3" json:"udp_indatagrams,omitempty"`
	UdpInerrors          int64 `protobuf:"varint,73,opt,name=udp_inerrors,json=udpInerrors,proto3" json:"udp_inerrors,omitempty"`
	UdpNoports           int64 `protobuf:"varint,74,opt,name=udp_noports,json=udpNoports,proto3" json:"udp_noports,omitempty"`
	UdpOutdatagrams      int64 `protobuf:"varint,75,opt,name=udp_outdatagrams,json=udpOutdatagrams,proto3" json:"udp_outdatagrams,omitempty"`
	UdpRcvbuferrors      int64 `protobuf:"varint,76,opt,name=udp_rcvbuferrors,json=udpRcvbuferrors,proto3" json:"udp_rcvbuferrors,omitempty"`
	UdpSndbuferrors      int64 `protobuf:"varint,77,opt,name=udp_sndbuferrors,json=udpSndbuferrors,proto3" json:"udp_sndbuferrors,omitempty"`
	UdpliteIgnoredmulti  int64 `protobuf:"varint,78,opt,name=udplite_ignoredmulti,json=udpliteIgnoredmulti,proto3" json:"udplite_ignoredmulti,omitempty"`
	UdpliteIncsumerrors  int64 `protobuf:"varint,79,opt,name=udplite_incsumerrors,json=udpliteIncsumerrors,proto3" json:"udplite_incsumerrors,omitempty"`
	UdpliteIndatagrams   int64 `protobuf:"varint,80,opt,name=udplite_indatagrams,json=udpliteIndatagrams,proto3" json:"udplite_indatagrams,omitempty"`
	UdpliteInerrors      int64 `protobuf:"varint,81,opt,name=udplite_inerrors,json=udpliteInerrors,proto3" json:"udplite_inerrors,omitempty"`
	UdpliteNoports       int64 `protobuf:"varint,82,opt,name=udplite_noports,json=udpliteNoports,proto3" json:"udplite_noports,omitempty"`
	UdpliteOutdatagrams  int64 `protobuf:"varint,83,opt,name=udplite_outdatagrams,json=udpliteOutdatagrams,proto3" json:"udplite_outdatagrams,omitempty"`
	UdpliteRcvbuferrors  int64 `protobuf:"varint,84,opt,name=udplite_rcvbuferrors,json=udpliteRcvbuferrors,proto3" json:"udplite_rcvbuferrors,omitempty"`
	UdpliteSndbuferrors  int64 `protobuf:"varint,85,opt,name=udplite_sndbuferrors,json=udpliteSndbuferrors,proto3" json:"udplite_sndbuferrors,omitempty"`
}

func (x *Net_Fields) Reset() {
	*x = Net_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Fields) ProtoMessage() {}

func (x *Net_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Fields.ProtoReflect.Descriptor instead.
func (*Net_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Net_Fields) GetBytesRecv() int64 {
	if x != nil {
		return x.BytesRecv
	}
	return 0
}

func (x *Net_Fields) GetBytesSent() int64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *Net_Fields) GetDropIn() int64 {
	if x != nil {
		return x.DropIn
	}
	return 0
}

func (x *Net_Fields) GetDropOut() int64 {
	if x != nil {
		return x.DropOut
	}
	return 0
}

func (x *Net_Fields) GetErrIn() int64 {
	if x != nil {
		return x.ErrIn
	}
	return 0
}

func (x *Net_Fields) GetErrOut() int64 {
	if x != nil {
		return x.ErrOut
	}
	return 0
}

func (x *Net_Fields) GetPacketsRecv() int64 {
	if x != nil {
		return x.PacketsRecv
	}
	return 0
}

func (x *Net_Fields) GetPacketsSent() int64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *Net_Fields) GetIcmpInaddrmaskreps() int64 {
	if x != nil {
		return x.IcmpInaddrmaskreps
	}
	return 0
}

func (x *Net_Fields) GetIcmpInaddrmasks() int64 {
	if x != nil {
		return x.IcmpInaddrmasks
	}
	return 0
}

func (x *Net_Fields) GetIcmpIncsumerrors() int64 {
	if x != nil {
		return x.IcmpIncsumerrors
	}
	return 0
}

func (x *Net_Fields) GetIcmpIndestunreachs() int64 {
	if x != nil {
		return x.IcmpIndestunreachs
	}
	return 0
}

func (x *Net_Fields) GetIcmpInechoreps() int64 {
	if x != nil {
		return x.IcmpInechoreps
	}
	return 0
}

func (x *Net_Fields) GetIcmpInechos() int64 {
	if x != nil {
		return x.IcmpInechos
	}
	return 0
}

func (x *Net_Fields) GetIcmpInerrors() int64 {
	if x != nil {
		return x.IcmpInerrors
	}
	return 0
}

func (x *Net_Fields) GetIcmpInmsgs() int64 {
	if x != nil {
		return x.IcmpInmsgs
	}
	return 0
}

func (x *Net_Fields) GetIcmpInparmprobs() int64 {
	if x != nil {
		return x.IcmpInparmprobs
	}
	return 0
}

func (x *Net_Fields) GetIcmpInredirects() int64 {
	if x != nil {
		return x.IcmpInredirects
	}
	return 0
}

func (x *Net_Fields) GetIcmpInsrcquenchs() int64 {
	if x != nil {
		return x.IcmpInsrcquenchs
	}
	return 0
}

func (x *Net_Fields) GetIcmpIntimeexcds() int64 {
	if x != nil {
		return x.IcmpIntimeexcds
	}
	return 0
}

func (x *Net_Fields) GetIcmpIntimestampreps() int64 {
	if x != nil {
		return x.IcmpIntimestampreps
	}
	return 0
}

func (x *Net_Fields) GetIcmpIntimestamps() int64 {
	if x != nil {
		return x.IcmpIntimestamps
	}
	return 0
}

func (x *Net_Fields) GetIcmpOutaddrmaskreps() int64 {
	if x != nil {
		return x.IcmpOutaddrmaskreps
	}
	return 0
}

func (x *Net_Fields) GetIcmpOutaddrmasks() int64 {
	if x != nil {
		return x.IcmpOutaddrmasks
	}
	return 0
}

func (x *Net_Fields) GetIcmpOutdestunreachs() int64 {
	if x != nil {
		return x.IcmpOutdestunreachs
	}
	return 0
}

func (x *Net_Fields) GetIcmpOutechoreps() int64 {
	if x != nil {
		return x.IcmpOutechoreps
	}
	return 0
}

func (x *Net_Fields) GetIcmpOutechos() int64 {
	if x != nil {
		return x.IcmpOutechos
	}
	return 0
}

func (x *Net_Fields) GetIcmpOuterrors() int64 {
	if x != nil {
		return x.IcmpOuterrors
	}
	return 0
}

func (x *Net_Fields) GetIcmpOutmsgs() int64 {
	if x != nil {
		return x.IcmpOutmsgs
	}
	return 0
}

func (x *Net_Fields) GetIcmpOutparmprobs() int64 {
	if x != nil {
		return x.IcmpOutparmprobs
	}
	return 0
}

func (x *Net_Fields) GetIcmpOutredirects() int64 {
	if x != nil {
		return x.IcmpOutredirects
	}
	return 0
}

func (x *Net_Fields) GetIcmpOutsrcquenchs() int64 {
	if x != nil {
		return x.IcmpOutsrcquenchs
	}
	return 0
}

func (x *Net_Fields) GetIcmpOuttimeexcds() int64 {
	if x != nil {
		return x.IcmpOuttimeexcds
	}
	return 0
}

func (x *Net_Fields) GetIcmpOuttimestampreps() int64 {
	if x != nil {
		return x.IcmpOuttimestampreps
	}
	return 0
}

func (x *Net_Fields) GetIcmpOuttimestamps() int64 {
	if x != nil {
		return x.IcmpOuttimestamps
	}
	return 0
}

func (x *Net_Fields) GetIpDefaultttl() int64 {
	if x != nil {
		return x.IpDefaultttl
	}
	return 0
}

func (x *Net_Fields) GetIpForwarding() int64 {
	if x != nil {
		return x.IpForwarding
	}
	return 0
}

func (x *Net_Fields) GetIpForwdatagrams() int64 {
	if x != nil {
		return x.IpForwdatagrams
	}
	return 0
}

func (x *Net_Fields) GetIpFragcreates() int64 {
	if x != nil {
		return x.IpFragcreates
	}
	return 0
}

func (x *Net_Fields) GetIpFragfails() int64 {
	if x != nil {
		return x.IpFragfails
	}
	return 0
}

func (x *Net_Fields) GetIpFragoks() int64 {
	if x != nil {
		return x.IpFragoks
	}
	return 0
}

func (x *Net_Fields) GetIpInaddrerrors() int64 {
	if x != nil {
		return x.IpInaddrerrors
	}
	return 0
}

func (x *Net_Fields) GetIpIndelivers() int64 {
	if x != nil {
		return x.IpIndelivers
	}
	return 0
}

func (x *Net_Fields) GetIpIndiscards() int64 {
	if x != nil {
		return x.IpIndiscards
	}
	return 0
}

func (x *Net_Fields) GetIpInhdrerrors() int64 {
	if x != nil {
		return x.IpInhdrerrors
	}
	return 0
}

func (x *Net_Fields) GetIpInreceives() int64 {
	if x != nil {
		return x.IpInreceives
	}
	return 0
}

func (x *Net_Fields) GetIpInunknownprotos() int64 {
	if x != nil {
		return x.IpInunknownprotos
	}
	return 0
}

func (x *Net_Fields) GetIpOutdiscards() int64 {
	if x != nil {
		return x.IpOutdiscards
	}
	return 0
}

func (x *Net_Fields) GetIpOutnoroutes() int64 {
	if x != nil {
		return x.IpOutnoroutes
	}
	return 0
}

func (x *Net_Fields) GetIpOutrequests() int64 {
	if x != nil {
		return x.IpOutrequests
	}
	return 0
}

func (x *Net_Fields) GetIpReasmfails() int64 {
	if x != nil {
		return x.IpReasmfails
	}
	return 0
}

func (x *Net_Fields) GetIpReasmoks() int64 {
	if x != nil {
		return x.IpReasmoks
	}
	return 0
}

func (x *Net_Fields) GetIpReasmreqds() int64 {
	if x != nil {
		return x.IpReasmreqds
	}
	return 0
}

func (x *Net_Fields) GetIpReasmtimeout() int64 {
	if x != nil {
		return x.IpReasmtimeout
	}
	return 0
}

func (x *Net_Fields) GetTcpActiveopens() int64 {
	if x != nil {
		return x.TcpActiveopens
	}
	return 0
}

func (x *Net_Fields) GetTcpAttemptfails() int64 {
	if x != nil {
		return x.TcpAttemptfails
	}
	return 0
}

func (x *Net_Fields) GetTcpCurrestab() int64 {
	if x != nil {
		return x.TcpCurrestab
	}
	return 0
}

func (x *Net_Fields) GetTcpEstabresets() int64 {
	if x != nil {
		return x.TcpEstabresets
	}
	return 0
}

func (x *Net_Fields) GetTcpIncsumerrors() int64 {
	if x != nil {
		return x.TcpIncsumerrors
	}
	return 0
}

func (x *Net_Fields) GetTcpInerrs() int64 {
	if x != nil {
		return x.TcpInerrs
	}
	return 0
}

func (x *Net_Fields) GetTcpInsegs() int64 {
	if x != nil {
		return x.TcpInsegs
	}
	return 0
}

func (x *Net_Fields) GetTcpMaxconn() int64 {
	if x != nil {
		return x.TcpMaxconn
	}
	return 0
}

func (x *Net_Fields) GetTcpOutrsts() int64 {
	if x != nil {
		return x.TcpOutrsts
	}
	return 0
}

func (x *Net_Fields) GetTcpOutsegs() int64 {
	if x != nil {
		return x.TcpOutsegs
	}
	return 0
}

func (x *Net_Fields) GetTcpPassiveopens() int64 {
	if x != nil {
		return x.TcpPassiveopens
	}
	return 0
}

func (x *Net_Fields) GetTcpRetranssegs() int64 {
	if x != nil {
		return x.TcpRetranssegs
	}
	return 0
}

func (x *Net_Fields) GetTcpRtoalgorithm() int64 {
	if x != nil {
		return x.TcpRtoalgorithm
	}
	return 0
}

func (x *Net_Fields) GetTcpRtomax() int64 {
	if x != nil {
		return x.TcpRtomax
	}
	return 0
}

func (x *Net_Fields) GetTcpRtomin() int64 {
	if x != nil {
		return x.TcpRtomin
	}
	return 0
}

func (x *Net_Fields) GetUdpIgnoredmulti() int64 {
	if x != nil {
		return x.UdpIgnoredmulti
	}
	return 0
}

func (x *Net_Fields) GetUdpIncsumerrors() int64 {
	if x != nil {
		return x.UdpIncsumerrors
	}
	return 0
}

func (x *Net_Fields) GetUdpIndatagrams() int64 {
	if x != nil {
		return x.UdpIndatagrams
	}
	return 0
}

func (x *Net_Fields) GetUdpInerrors() int64 {
	if x != nil {
		return x.UdpInerrors
	}
	return 0
}

func (x *Net_Fields) GetUdpNoports() int64 {
	if x != nil {
		return x.UdpNoports
	}
	return 0
}

func (x *Net_Fields) GetUdpOutdatagrams() int64 {
	if x != nil {
		return x.UdpOutdatagrams
	}
	return 0
}

func (x *Net_Fields) GetUdpRcvbuferrors() int64 {
	if x != nil {
		return x.UdpRcvbuferrors
	}
	return 0
}

func (x *Net_Fields) GetUdpSndbuferrors() int64 {
	if x != nil {
		return x.UdpSndbuferrors
	}
	return 0
}

func (x *Net_Fields) GetUdpliteIgnoredmulti() int64 {
	if x != nil {
		return x.UdpliteIgnoredmulti
	}
	return 0
}

func (x *Net_Fields) GetUdpliteIncsumerrors() int64 {
	if x != nil {
		return x.UdpliteIncsumerrors
	}
	return 0
}

func (x *Net_Fields) GetUdpliteIndatagrams() int64 {
	if x != nil {
		return x.UdpliteIndatagrams
	}
	return 0
}

func (x *Net_Fields) GetUdpliteInerrors() int64 {
	if x != nil {
		return x.UdpliteInerrors
	}
	return 0
}

func (x *Net_Fields) GetUdpliteNoports() int64 {
	if x != nil {
		return x.UdpliteNoports
	}
	return 0
}

func (x *Net_Fields) GetUdpliteOutdatagrams() int64 {
	if x != nil {
		return x.UdpliteOutdatagrams
	}
	return 0
}

func (x *Net_Fields) GetUdpliteRcvbuferrors() int64 {
	if x != nil {
		return x.UdpliteRcvbuferrors
	}
	return 0
}

func (x *Net_Fields) GetUdpliteSndbuferrors() int64 {
	if x != nil {
		return x.UdpliteSndbuferrors
	}
	return 0
}

type Net_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host      string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *Net_Tags) Reset() {
	*x = Net_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_Tags) ProtoMessage() {}

func (x *Net_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_Tags.ProtoReflect.Descriptor instead.
func (*Net_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Net_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Net_Tags) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

type Interrupts_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPU0  int64 `protobuf:"varint,1,opt,name=CPU0,proto3" json:"CPU0,omitempty"`
	CPU1  int64 `protobuf:"varint,2,opt,name=CPU1,proto3" json:"CPU1,omitempty"`
	CPU2  int64 `protobuf:"varint,3,opt,name=CPU2,proto3" json:"CPU2,omitempty"`
	CPU3  int64 `protobuf:"varint,4,opt,name=CPU3,proto3" json:"CPU3,omitempty"`
	CPU4  int64 `protobuf:"varint,5,opt,name=CPU4,proto3" json:"CPU4,omitempty"`
	CPU5  int64 `protobuf:"varint,6,opt,name=CPU5,proto3" json:"CPU5,omitempty"`
	Total int64 `protobuf:"varint,7,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Interrupts_Fields) Reset() {
	*x = Interrupts_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interrupts_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interrupts_Fields) ProtoMessage() {}

func (x *Interrupts_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interrupts_Fields.ProtoReflect.Descriptor instead.
func (*Interrupts_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Interrupts_Fields) GetCPU0() int64 {
	if x != nil {
		return x.CPU0
	}
	return 0
}

func (x *Interrupts_Fields) GetCPU1() int64 {
	if x != nil {
		return x.CPU1
	}
	return 0
}

func (x *Interrupts_Fields) GetCPU2() int64 {
	if x != nil {
		return x.CPU2
	}
	return 0
}

func (x *Interrupts_Fields) GetCPU3() int64 {
	if x != nil {
		return x.CPU3
	}
	return 0
}

func (x *Interrupts_Fields) GetCPU4() int64 {
	if x != nil {
		return x.CPU4
	}
	return 0
}

func (x *Interrupts_Fields) GetCPU5() int64 {
	if x != nil {
		return x.CPU5
	}
	return 0
}

func (x *Interrupts_Fields) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Interrupts_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Irq    string `protobuf:"bytes,3,opt,name=irq,proto3" json:"irq,omitempty"`
	Type   string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Interrupts_Tags) Reset() {
	*x = Interrupts_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interrupts_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interrupts_Tags) ProtoMessage() {}

func (x *Interrupts_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interrupts_Tags.ProtoReflect.Descriptor instead.
func (*Interrupts_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{11, 1}
}

func (x *Interrupts_Tags) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Interrupts_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Interrupts_Tags) GetIrq() string {
	if x != nil {
		return x.Irq
	}
	return ""
}

func (x *Interrupts_Tags) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Mem_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active           int64   `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Available        int64   `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	AvailablePercent float64 `protobuf:"fixed64,3,opt,name=available_percent,json=availablePercent,proto3" json:"available_percent,omitempty"`
	Buffered         int64   `protobuf:"varint,4,opt,name=buffered,proto3" json:"buffered,omitempty"`
	Cached           int64   `protobuf:"varint,5,opt,name=cached,proto3" json:"cached,omitempty"`
	CommitLimit      int64   `protobuf:"varint,6,opt,name=commit_limit,json=commitLimit,proto3" json:"commit_limit,omitempty"`
	CommittedAs      int64   `protobuf:"varint,7,opt,name=committed_as,json=committedAs,proto3" json:"committed_as,omitempty"`
	Dirty            int64   `protobuf:"varint,8,opt,name=dirty,proto3" json:"dirty,omitempty"`
	Free             int64   `protobuf:"varint,9,opt,name=free,proto3" json:"free,omitempty"`
	HighFree         int64   `protobuf:"varint,10,opt,name=high_free,json=highFree,proto3" json:"high_free,omitempty"`
	HighTotal        int64   `protobuf:"varint,11,opt,name=high_total,json=highTotal,proto3" json:"high_total,omitempty"`
	HugePageSize     int64   `protobuf:"varint,12,opt,name=huge_page_size,json=hugePageSize,proto3" json:"huge_page_size,omitempty"`
	HugePagesFree    int64   `protobuf:"varint,13,opt,name=huge_pages_free,json=hugePagesFree,proto3" json:"huge_pages_free,omitempty"`
	HugePagesTotal   int64   `protobuf:"varint,14,opt,name=huge_pages_total,json=hugePagesTotal,proto3" json:"huge_pages_total,omitempty"`
	Inactive         int64   `protobuf:"varint,15,opt,name=inactive,proto3" json:"inactive,omitempty"`
	LowFree          int64   `protobuf:"varint,16,opt,name=low_free,json=lowFree,proto3" json:"low_free,omitempty"`
	LowTotal         int64   `protobuf:"varint,17,opt,name=low_total,json=lowTotal,proto3" json:"low_total,omitempty"`
	Mapped           int64   `protobuf:"varint,18,opt,name=mapped,proto3" json:"mapped,omitempty"`
	PageTables       int64   `protobuf:"varint,19,opt,name=page_tables,json=pageTables,proto3" json:"page_tables,omitempty"`
	Shared           int64   `protobuf:"varint,20,opt,name=shared,proto3" json:"shared,omitempty"`
	Slab             int64   `protobuf:"varint,21,opt,name=slab,proto3" json:"slab,omitempty"`
	Sreclaimable     int64   `protobuf:"varint,22,opt,name=sreclaimable,proto3" json:"sreclaimable,omitempty"`
	Sunreclaim       int64   `protobuf:"varint,23,opt,name=sunreclaim,proto3" json:"sunreclaim,omitempty"`
	SwapCached       int64   `protobuf:"varint,24,opt,name=swap_cached,json=swapCached,proto3" json:"swap_cached,omitempty"`
	SwapFree         int64   `protobuf:"varint,25,opt,name=swap_free,json=swapFree,proto3" json:"swap_free,omitempty"`
	SwapTotal        int64   `protobuf:"varint,26,opt,name=swap_total,json=swapTotal,proto3" json:"swap_total,omitempty"`
	Total            int64   `protobuf:"varint,27,opt,name=total,proto3" json:"total,omitempty"`
	Used             int64   `protobuf:"varint,28,opt,name=used,proto3" json:"used,omitempty"`
	UsedPercent      float64 `protobuf:"fixed64,29,opt,name=used_percent,json=usedPercent,proto3" json:"used_percent,omitempty"`
	VmallocChunk     int64   `protobuf:"varint,30,opt,name=vmalloc_chunk,json=vmallocChunk,proto3" json:"vmalloc_chunk,omitempty"`
	VmallocTotal     int64   `protobuf:"varint,31,opt,name=vmalloc_total,json=vmallocTotal,proto3" json:"vmalloc_total,omitempty"`
	VmallocUsed      int64   `protobuf:"varint,32,opt,name=vmalloc_used,json=vmallocUsed,proto3" json:"vmalloc_used,omitempty"`
	WriteBack        int64   `protobuf:"varint,33,opt,name=write_back,json=writeBack,proto3" json:"write_back,omitempty"`
	WriteBackTmp     int64   `protobuf:"varint,34,opt,name=write_back_tmp,json=writeBackTmp,proto3" json:"write_back_tmp,omitempty"`
}

func (x *Mem_Fields) Reset() {
	*x = Mem_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mem_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mem_Fields) ProtoMessage() {}

func (x *Mem_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mem_Fields.ProtoReflect.Descriptor instead.
func (*Mem_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Mem_Fields) GetActive() int64 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *Mem_Fields) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *Mem_Fields) GetAvailablePercent() float64 {
	if x != nil {
		return x.AvailablePercent
	}
	return 0
}

func (x *Mem_Fields) GetBuffered() int64 {
	if x != nil {
		return x.Buffered
	}
	return 0
}

func (x *Mem_Fields) GetCached() int64 {
	if x != nil {
		return x.Cached
	}
	return 0
}

func (x *Mem_Fields) GetCommitLimit() int64 {
	if x != nil {
		return x.CommitLimit
	}
	return 0
}

func (x *Mem_Fields) GetCommittedAs() int64 {
	if x != nil {
		return x.CommittedAs
	}
	return 0
}

func (x *Mem_Fields) GetDirty() int64 {
	if x != nil {
		return x.Dirty
	}
	return 0
}

func (x *Mem_Fields) GetFree() int64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *Mem_Fields) GetHighFree() int64 {
	if x != nil {
		return x.HighFree
	}
	return 0
}

func (x *Mem_Fields) GetHighTotal() int64 {
	if x != nil {
		return x.HighTotal
	}
	return 0
}

func (x *Mem_Fields) GetHugePageSize() int64 {
	if x != nil {
		return x.HugePageSize
	}
	return 0
}

func (x *Mem_Fields) GetHugePagesFree() int64 {
	if x != nil {
		return x.HugePagesFree
	}
	return 0
}

func (x *Mem_Fields) GetHugePagesTotal() int64 {
	if x != nil {
		return x.HugePagesTotal
	}
	return 0
}

func (x *Mem_Fields) GetInactive() int64 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *Mem_Fields) GetLowFree() int64 {
	if x != nil {
		return x.LowFree
	}
	return 0
}

func (x *Mem_Fields) GetLowTotal() int64 {
	if x != nil {
		return x.LowTotal
	}
	return 0
}

func (x *Mem_Fields) GetMapped() int64 {
	if x != nil {
		return x.Mapped
	}
	return 0
}

func (x *Mem_Fields) GetPageTables() int64 {
	if x != nil {
		return x.PageTables
	}
	return 0
}

func (x *Mem_Fields) GetShared() int64 {
	if x != nil {
		return x.Shared
	}
	return 0
}

func (x *Mem_Fields) GetSlab() int64 {
	if x != nil {
		return x.Slab
	}
	return 0
}

func (x *Mem_Fields) GetSreclaimable() int64 {
	if x != nil {
		return x.Sreclaimable
	}
	return 0
}

func (x *Mem_Fields) GetSunreclaim() int64 {
	if x != nil {
		return x.Sunreclaim
	}
	return 0
}

func (x *Mem_Fields) GetSwapCached() int64 {
	if x != nil {
		return x.SwapCached
	}
	return 0
}

func (x *Mem_Fields) GetSwapFree() int64 {
	if x != nil {
		return x.SwapFree
	}
	return 0
}

func (x *Mem_Fields) GetSwapTotal() int64 {
	if x != nil {
		return x.SwapTotal
	}
	return 0
}

func (x *Mem_Fields) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Mem_Fields) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Mem_Fields) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *Mem_Fields) GetVmallocChunk() int64 {
	if x != nil {
		return x.VmallocChunk
	}
	return 0
}

func (x *Mem_Fields) GetVmallocTotal() int64 {
	if x != nil {
		return x.VmallocTotal
	}
	return 0
}

func (x *Mem_Fields) GetVmallocUsed() int64 {
	if x != nil {
		return x.VmallocUsed
	}
	return 0
}

func (x *Mem_Fields) GetWriteBack() int64 {
	if x != nil {
		return x.WriteBack
	}
	return 0
}

func (x *Mem_Fields) GetWriteBackTmp() int64 {
	if x != nil {
		return x.WriteBackTmp
	}
	return 0
}

type Mem_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Mem_Tags) Reset() {
	*x = Mem_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mem_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mem_Tags) ProtoMessage() {}

func (x *Mem_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mem_Tags.ProtoReflect.Descriptor instead.
func (*Mem_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Mem_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type Disk_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Free        int64   `protobuf:"varint,1,opt,name=free,proto3" json:"free,omitempty"`
	InodesFree  int64   `protobuf:"varint,2,opt,name=inodes_free,json=inodesFree,proto3" json:"inodes_free,omitempty"`
	InodesTotal int64   `protobuf:"varint,3,opt,name=inodes_total,json=inodesTotal,proto3" json:"inodes_total,omitempty"`
	InodesUsed  int64   `protobuf:"varint,4,opt,name=inodes_used,json=inodesUsed,proto3" json:"inodes_used,omitempty"`
	Total       int64   `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	Used        int64   `protobuf:"varint,6,opt,name=used,proto3" json:"used,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,7,opt,name=used_percent,json=usedPercent,proto3" json:"used_percent,omitempty"`
}

func (x *Disk_Fields) Reset() {
	*x = Disk_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk_Fields) ProtoMessage() {}

func (x *Disk_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk_Fields.ProtoReflect.Descriptor instead.
func (*Disk_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Disk_Fields) GetFree() int64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *Disk_Fields) GetInodesFree() int64 {
	if x != nil {
		return x.InodesFree
	}
	return 0
}

func (x *Disk_Fields) GetInodesTotal() int64 {
	if x != nil {
		return x.InodesTotal
	}
	return 0
}

func (x *Disk_Fields) GetInodesUsed() int64 {
	if x != nil {
		return x.InodesUsed
	}
	return 0
}

func (x *Disk_Fields) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Disk_Fields) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Disk_Fields) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

type Disk_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Fstype string `protobuf:"bytes,2,opt,name=fstype,proto3" json:"fstype,omitempty"`
	Host   string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Mode   string `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Path   string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Disk_Tags) Reset() {
	*x = Disk_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk_Tags) ProtoMessage() {}

func (x *Disk_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk_Tags.ProtoReflect.Descriptor instead.
func (*Disk_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{13, 1}
}

func (x *Disk_Tags) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Disk_Tags) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *Disk_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Disk_Tags) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Disk_Tags) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Swap_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Free        int64   `protobuf:"varint,1,opt,name=free,proto3" json:"free,omitempty"`
	Total       int64   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Used        int64   `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,4,opt,name=used_percent,json=usedPercent,proto3" json:"used_percent,omitempty"`
}

func (x *Swap_Fields) Reset() {
	*x = Swap_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap_Fields) ProtoMessage() {}

func (x *Swap_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap_Fields.ProtoReflect.Descriptor instead.
func (*Swap_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Swap_Fields) GetFree() int64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *Swap_Fields) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Swap_Fields) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Swap_Fields) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

type Swap_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Swap_Tags) Reset() {
	*x = Swap_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap_Tags) ProtoMessage() {}

func (x *Swap_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap_Tags.ProtoReflect.Descriptor instead.
func (*Swap_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{14, 1}
}

func (x *Swap_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type Processes_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocked      int64 `protobuf:"varint,1,opt,name=blocked,proto3" json:"blocked,omitempty"`
	Dead         int64 `protobuf:"varint,2,opt,name=dead,proto3" json:"dead,omitempty"`
	Idle         int64 `protobuf:"varint,3,opt,name=idle,proto3" json:"idle,omitempty"`
	Paging       int64 `protobuf:"varint,4,opt,name=paging,proto3" json:"paging,omitempty"`
	Running      int64 `protobuf:"varint,5,opt,name=running,proto3" json:"running,omitempty"`
	Sleeping     int64 `protobuf:"varint,6,opt,name=sleeping,proto3" json:"sleeping,omitempty"`
	Stopped      int64 `protobuf:"varint,7,opt,name=stopped,proto3" json:"stopped,omitempty"`
	Total        int64 `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
	TotalThreads int64 `protobuf:"varint,9,opt,name=total_threads,json=totalThreads,proto3" json:"total_threads,omitempty"`
	Unknown      int64 `protobuf:"varint,10,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Zombies      int64 `protobuf:"varint,11,opt,name=zombies,proto3" json:"zombies,omitempty"`
}

func (x *Processes_Fields) Reset() {
	*x = Processes_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processes_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processes_Fields) ProtoMessage() {}

func (x *Processes_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processes_Fields.ProtoReflect.Descriptor instead.
func (*Processes_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Processes_Fields) GetBlocked() int64 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

func (x *Processes_Fields) GetDead() int64 {
	if x != nil {
		return x.Dead
	}
	return 0
}

func (x *Processes_Fields) GetIdle() int64 {
	if x != nil {
		return x.Idle
	}
	return 0
}

func (x *Processes_Fields) GetPaging() int64 {
	if x != nil {
		return x.Paging
	}
	return 0
}

func (x *Processes_Fields) GetRunning() int64 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *Processes_Fields) GetSleeping() int64 {
	if x != nil {
		return x.Sleeping
	}
	return 0
}

func (x *Processes_Fields) GetStopped() int64 {
	if x != nil {
		return x.Stopped
	}
	return 0
}

func (x *Processes_Fields) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Processes_Fields) GetTotalThreads() int64 {
	if x != nil {
		return x.TotalThreads
	}
	return 0
}

func (x *Processes_Fields) GetUnknown() int64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *Processes_Fields) GetZombies() int64 {
	if x != nil {
		return x.Zombies
	}
	return 0
}

type Processes_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Processes_Tags) Reset() {
	*x = Processes_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processes_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processes_Tags) ProtoMessage() {}

func (x *Processes_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processes_Tags.ProtoReflect.Descriptor instead.
func (*Processes_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Processes_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type DockerBlkio_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IoServiceBytesRecursiveAsync int64 `protobuf:"varint,2,opt,name=io_service_bytes_recursive_async,json=ioServiceBytesRecursiveAsync,proto3" json:"io_service_bytes_recursive_async,omitempty"`
	IoServiceBytesRecursiveRead  int64 `protobuf:"varint,3,opt,name=io_service_bytes_recursive_read,json=ioServiceBytesRecursiveRead,proto3" json:"io_service_bytes_recursive_read,omitempty"`
	IoServiceBytesRecursiveSync  int64 `protobuf:"varint,4,opt,name=io_service_bytes_recursive_sync,json=ioServiceBytesRecursiveSync,proto3" json:"io_service_bytes_recursive_sync,omitempty"`
	IoServiceBytesRecursiveTotal int64 `protobuf:"varint,5,opt,name=io_service_bytes_recursive_total,json=ioServiceBytesRecursiveTotal,proto3" json:"io_service_bytes_recursive_total,omitempty"`
	IoServiceBytesRecursiveWrite int64 `protobuf:"varint,6,opt,name=io_service_bytes_recursive_write,json=ioServiceBytesRecursiveWrite,proto3" json:"io_service_bytes_recursive_write,omitempty"`
	IoServicedRecursiveAsync     int64 `protobuf:"varint,7,opt,name=io_serviced_recursive_async,json=ioServicedRecursiveAsync,proto3" json:"io_serviced_recursive_async,omitempty"`
	IoServicedRecursiveRead      int64 `protobuf:"varint,8,opt,name=io_serviced_recursive_read,json=ioServicedRecursiveRead,proto3" json:"io_serviced_recursive_read,omitempty"`
	IoServicedRecursiveSync      int64 `protobuf:"varint,9,opt,name=io_serviced_recursive_sync,json=ioServicedRecursiveSync,proto3" json:"io_serviced_recursive_sync,omitempty"`
	IoServicedRecursiveTotal     int64 `protobuf:"varint,10,opt,name=io_serviced_recursive_total,json=ioServicedRecursiveTotal,proto3" json:"io_serviced_recursive_total,omitempty"`
	IoServicedRecursiveWrite     int64 `protobuf:"varint,11,opt,name=io_serviced_recursive_write,json=ioServicedRecursiveWrite,proto3" json:"io_serviced_recursive_write,omitempty"`
}

func (x *DockerBlkio_Fields) Reset() {
	*x = DockerBlkio_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerBlkio_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerBlkio_Fields) ProtoMessage() {}

func (x *DockerBlkio_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerBlkio_Fields.ProtoReflect.Descriptor instead.
func (*DockerBlkio_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{16, 0}
}

func (x *DockerBlkio_Fields) GetIoServiceBytesRecursiveAsync() int64 {
	if x != nil {
		return x.IoServiceBytesRecursiveAsync
	}
	return 0
}

func (x *DockerBlkio_Fields) GetIoServiceBytesRecursiveRead() int64 {
	if x != nil {
		return x.IoServiceBytesRecursiveRead
	}
	return 0
}

func (x *DockerBlkio_Fields) GetIoServiceBytesRecursiveSync() int64 {
	if x != nil {
		return x.IoServiceBytesRecursiveSync
	}
	return 0
}

func (x *DockerBlkio_Fields) GetIoServiceBytesRecursiveTotal() int64 {
	if x != nil {
		return x.IoServiceBytesRecursiveTotal
	}
	return 0
}

func (x *DockerBlkio_Fields) GetIoServiceBytesRecursiveWrite() int64 {
	if x != nil {
		return x.IoServiceBytesRecursiveWrite
	}
	return 0
}

func (x *DockerBlkio_Fields) GetIoServicedRecursiveAsync() int64 {
	if x != nil {
		return x.IoServicedRecursiveAsync
	}
	return 0
}

func (x *DockerBlkio_Fields) GetIoServicedRecursiveRead() int64 {
	if x != nil {
		return x.IoServicedRecursiveRead
	}
	return 0
}

func (x *DockerBlkio_Fields) GetIoServicedRecursiveSync() int64 {
	if x != nil {
		return x.IoServicedRecursiveSync
	}
	return 0
}

func (x *DockerBlkio_Fields) GetIoServicedRecursiveTotal() int64 {
	if x != nil {
		return x.IoServicedRecursiveTotal
	}
	return 0
}

func (x *DockerBlkio_Fields) GetIoServicedRecursiveWrite() int64 {
	if x != nil {
		return x.IoServicedRecursiveWrite
	}
	return 0
}

type DockerBlkio_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerImage   string `protobuf:"bytes,1,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	ContainerName    string `protobuf:"bytes,2,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ContainerStatus  string `protobuf:"bytes,3,opt,name=container_status,json=containerStatus,proto3" json:"container_status,omitempty"`
	ContainerVersion string `protobuf:"bytes,4,opt,name=container_version,json=containerVersion,proto3" json:"container_version,omitempty"`
	Device           string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	EngineHost       string `protobuf:"bytes,6,opt,name=engine_host,json=engineHost,proto3" json:"engine_host,omitempty"`
	Host             string `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	ServerVersion    string `protobuf:"bytes,8,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
}

func (x *DockerBlkio_Tags) Reset() {
	*x = DockerBlkio_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerBlkio_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerBlkio_Tags) ProtoMessage() {}

func (x *DockerBlkio_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerBlkio_Tags.ProtoReflect.Descriptor instead.
func (*DockerBlkio_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{16, 1}
}

func (x *DockerBlkio_Tags) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *DockerBlkio_Tags) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DockerBlkio_Tags) GetContainerStatus() string {
	if x != nil {
		return x.ContainerStatus
	}
	return ""
}

func (x *DockerBlkio_Tags) GetContainerVersion() string {
	if x != nil {
		return x.ContainerVersion
	}
	return ""
}

func (x *DockerBlkio_Tags) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DockerBlkio_Tags) GetEngineHost() string {
	if x != nil {
		return x.EngineHost
	}
	return ""
}

func (x *DockerBlkio_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DockerBlkio_Tags) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

type DockerStats_FIELDS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NContainers          int64 `protobuf:"varint,1,opt,name=n_containers,json=nContainers,proto3" json:"n_containers,omitempty"`
	NContainersPaused    int64 `protobuf:"varint,2,opt,name=n_containers_paused,json=nContainersPaused,proto3" json:"n_containers_paused,omitempty"`
	NContainersRunning   int64 `protobuf:"varint,3,opt,name=n_containers_running,json=nContainersRunning,proto3" json:"n_containers_running,omitempty"`
	NContainersStopped   int64 `protobuf:"varint,4,opt,name=n_containers_stopped,json=nContainersStopped,proto3" json:"n_containers_stopped,omitempty"`
	NCpus                int64 `protobuf:"varint,5,opt,name=n_cpus,json=nCpus,proto3" json:"n_cpus,omitempty"`
	NGoroutines          int64 `protobuf:"varint,6,opt,name=n_goroutines,json=nGoroutines,proto3" json:"n_goroutines,omitempty"`
	NImages              int64 `protobuf:"varint,7,opt,name=n_images,json=nImages,proto3" json:"n_images,omitempty"`
	NListenerEvents      int64 `protobuf:"varint,8,opt,name=n_listener_events,json=nListenerEvents,proto3" json:"n_listener_events,omitempty"`
	NUsedFileDescriptors int64 `protobuf:"varint,9,opt,name=n_used_file_descriptors,json=nUsedFileDescriptors,proto3" json:"n_used_file_descriptors,omitempty"`
	MemoryTotal          int64 `protobuf:"varint,10,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
}

func (x *DockerStats_FIELDS) Reset() {
	*x = DockerStats_FIELDS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerStats_FIELDS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerStats_FIELDS) ProtoMessage() {}

func (x *DockerStats_FIELDS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerStats_FIELDS.ProtoReflect.Descriptor instead.
func (*DockerStats_FIELDS) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{17, 0}
}

func (x *DockerStats_FIELDS) GetNContainers() int64 {
	if x != nil {
		return x.NContainers
	}
	return 0
}

func (x *DockerStats_FIELDS) GetNContainersPaused() int64 {
	if x != nil {
		return x.NContainersPaused
	}
	return 0
}

func (x *DockerStats_FIELDS) GetNContainersRunning() int64 {
	if x != nil {
		return x.NContainersRunning
	}
	return 0
}

func (x *DockerStats_FIELDS) GetNContainersStopped() int64 {
	if x != nil {
		return x.NContainersStopped
	}
	return 0
}

func (x *DockerStats_FIELDS) GetNCpus() int64 {
	if x != nil {
		return x.NCpus
	}
	return 0
}

func (x *DockerStats_FIELDS) GetNGoroutines() int64 {
	if x != nil {
		return x.NGoroutines
	}
	return 0
}

func (x *DockerStats_FIELDS) GetNImages() int64 {
	if x != nil {
		return x.NImages
	}
	return 0
}

func (x *DockerStats_FIELDS) GetNListenerEvents() int64 {
	if x != nil {
		return x.NListenerEvents
	}
	return 0
}

func (x *DockerStats_FIELDS) GetNUsedFileDescriptors() int64 {
	if x != nil {
		return x.NUsedFileDescriptors
	}
	return 0
}

func (x *DockerStats_FIELDS) GetMemoryTotal() int64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

type DockerStats_TAGS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EngineHost    string `protobuf:"bytes,1,opt,name=engine_host,json=engineHost,proto3" json:"engine_host,omitempty"`
	Host          string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	ServerVersion string `protobuf:"bytes,3,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
}

func (x *DockerStats_TAGS) Reset() {
	*x = DockerStats_TAGS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerStats_TAGS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerStats_TAGS) ProtoMessage() {}

func (x *DockerStats_TAGS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerStats_TAGS.ProtoReflect.Descriptor instead.
func (*DockerStats_TAGS) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{17, 1}
}

func (x *DockerStats_TAGS) GetEngineHost() string {
	if x != nil {
		return x.EngineHost
	}
	return ""
}

func (x *DockerStats_TAGS) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DockerStats_TAGS) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

type DockerMem_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsagePercent float64 `protobuf:"fixed64,1,opt,name=usage_percent,json=usagePercent,proto3" json:"usage_percent,omitempty"`
}

func (x *DockerMem_Fields) Reset() {
	*x = DockerMem_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerMem_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerMem_Fields) ProtoMessage() {}

func (x *DockerMem_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerMem_Fields.ProtoReflect.Descriptor instead.
func (*DockerMem_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{18, 0}
}

func (x *DockerMem_Fields) GetUsagePercent() float64 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

type DockerMem_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerImage   string `protobuf:"bytes,1,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	ContainerName    string `protobuf:"bytes,2,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ContainerStatus  string `protobuf:"bytes,3,opt,name=container_status,json=containerStatus,proto3" json:"container_status,omitempty"`
	ContainerVersion string `protobuf:"bytes,4,opt,name=container_version,json=containerVersion,proto3" json:"container_version,omitempty"`
	EngineHost       string `protobuf:"bytes,5,opt,name=engine_host,json=engineHost,proto3" json:"engine_host,omitempty"`
	Host             string `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	ServerVersion    string `protobuf:"bytes,7,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
}

func (x *DockerMem_Tags) Reset() {
	*x = DockerMem_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerMem_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerMem_Tags) ProtoMessage() {}

func (x *DockerMem_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerMem_Tags.ProtoReflect.Descriptor instead.
func (*DockerMem_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{18, 1}
}

func (x *DockerMem_Tags) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *DockerMem_Tags) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DockerMem_Tags) GetContainerStatus() string {
	if x != nil {
		return x.ContainerStatus
	}
	return ""
}

func (x *DockerMem_Tags) GetContainerVersion() string {
	if x != nil {
		return x.ContainerVersion
	}
	return ""
}

func (x *DockerMem_Tags) GetEngineHost() string {
	if x != nil {
		return x.EngineHost
	}
	return ""
}

func (x *DockerMem_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DockerMem_Tags) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

type DockerCpu_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsagePercent float64 `protobuf:"fixed64,6,opt,name=usage_percent,json=usagePercent,proto3" json:"usage_percent,omitempty"`
	UsageSystem  int64   `protobuf:"varint,7,opt,name=usage_system,json=usageSystem,proto3" json:"usage_system,omitempty"`
	UsageTotal   int64   `protobuf:"varint,8,opt,name=usage_total,json=usageTotal,proto3" json:"usage_total,omitempty"`
}

func (x *DockerCpu_Fields) Reset() {
	*x = DockerCpu_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerCpu_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCpu_Fields) ProtoMessage() {}

func (x *DockerCpu_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCpu_Fields.ProtoReflect.Descriptor instead.
func (*DockerCpu_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{19, 0}
}

func (x *DockerCpu_Fields) GetUsagePercent() float64 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

func (x *DockerCpu_Fields) GetUsageSystem() int64 {
	if x != nil {
		return x.UsageSystem
	}
	return 0
}

func (x *DockerCpu_Fields) GetUsageTotal() int64 {
	if x != nil {
		return x.UsageTotal
	}
	return 0
}

type DockerCpu_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerImage   string `protobuf:"bytes,1,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	ContainerName    string `protobuf:"bytes,2,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ContainerStatus  string `protobuf:"bytes,3,opt,name=container_status,json=containerStatus,proto3" json:"container_status,omitempty"`
	ContainerVersion string `protobuf:"bytes,4,opt,name=container_version,json=containerVersion,proto3" json:"container_version,omitempty"`
	Cpu              string `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	EngineHost       string `protobuf:"bytes,6,opt,name=engine_host,json=engineHost,proto3" json:"engine_host,omitempty"`
	Host             string `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	ServerVersion    string `protobuf:"bytes,8,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
}

func (x *DockerCpu_Tags) Reset() {
	*x = DockerCpu_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerCpu_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCpu_Tags) ProtoMessage() {}

func (x *DockerCpu_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCpu_Tags.ProtoReflect.Descriptor instead.
func (*DockerCpu_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{19, 1}
}

func (x *DockerCpu_Tags) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *DockerCpu_Tags) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DockerCpu_Tags) GetContainerStatus() string {
	if x != nil {
		return x.ContainerStatus
	}
	return ""
}

func (x *DockerCpu_Tags) GetContainerVersion() string {
	if x != nil {
		return x.ContainerVersion
	}
	return ""
}

func (x *DockerCpu_Tags) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *DockerCpu_Tags) GetEngineHost() string {
	if x != nil {
		return x.EngineHost
	}
	return ""
}

func (x *DockerCpu_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DockerCpu_Tags) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

type DockerNet_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxBytes   int64 `protobuf:"varint,2,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	RxDropped int64 `protobuf:"varint,3,opt,name=rx_dropped,json=rxDropped,proto3" json:"rx_dropped,omitempty"`
	RxErrors  int64 `protobuf:"varint,4,opt,name=rx_errors,json=rxErrors,proto3" json:"rx_errors,omitempty"`
	RxPackets int64 `protobuf:"varint,5,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"`
	TxBytes   int64 `protobuf:"varint,6,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	TxDropped int64 `protobuf:"varint,7,opt,name=tx_dropped,json=txDropped,proto3" json:"tx_dropped,omitempty"`
	TxErrors  int64 `protobuf:"varint,8,opt,name=tx_errors,json=txErrors,proto3" json:"tx_errors,omitempty"`
	TxPackets int64 `protobuf:"varint,9,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
}

func (x *DockerNet_Fields) Reset() {
	*x = DockerNet_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerNet_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerNet_Fields) ProtoMessage() {}

func (x *DockerNet_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerNet_Fields.ProtoReflect.Descriptor instead.
func (*DockerNet_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{20, 0}
}

func (x *DockerNet_Fields) GetRxBytes() int64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *DockerNet_Fields) GetRxDropped() int64 {
	if x != nil {
		return x.RxDropped
	}
	return 0
}

func (x *DockerNet_Fields) GetRxErrors() int64 {
	if x != nil {
		return x.RxErrors
	}
	return 0
}

func (x *DockerNet_Fields) GetRxPackets() int64 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *DockerNet_Fields) GetTxBytes() int64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *DockerNet_Fields) GetTxDropped() int64 {
	if x != nil {
		return x.TxDropped
	}
	return 0
}

func (x *DockerNet_Fields) GetTxErrors() int64 {
	if x != nil {
		return x.TxErrors
	}
	return 0
}

func (x *DockerNet_Fields) GetTxPackets() int64 {
	if x != nil {
		return x.TxPackets
	}
	return 0
}

type DockerNet_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerImage   string `protobuf:"bytes,1,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	ContainerName    string `protobuf:"bytes,2,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ContainerStatus  string `protobuf:"bytes,3,opt,name=container_status,json=containerStatus,proto3" json:"container_status,omitempty"`
	ContainerVersion string `protobuf:"bytes,4,opt,name=container_version,json=containerVersion,proto3" json:"container_version,omitempty"`
	EngineHost       string `protobuf:"bytes,5,opt,name=engine_host,json=engineHost,proto3" json:"engine_host,omitempty"`
	Host             string `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	Network          string `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	ServerVersion    string `protobuf:"bytes,8,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
}

func (x *DockerNet_Tags) Reset() {
	*x = DockerNet_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerNet_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerNet_Tags) ProtoMessage() {}

func (x *DockerNet_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerNet_Tags.ProtoReflect.Descriptor instead.
func (*DockerNet_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{20, 1}
}

func (x *DockerNet_Tags) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *DockerNet_Tags) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DockerNet_Tags) GetContainerStatus() string {
	if x != nil {
		return x.ContainerStatus
	}
	return ""
}

func (x *DockerNet_Tags) GetContainerVersion() string {
	if x != nil {
		return x.ContainerVersion
	}
	return ""
}

func (x *DockerNet_Tags) GetEngineHost() string {
	if x != nil {
		return x.EngineHost
	}
	return ""
}

func (x *DockerNet_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DockerNet_Tags) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DockerNet_Tags) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

type Netstat_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcpClose       float64 `protobuf:"fixed64,1,opt,name=tcp_close,json=tcpClose,proto3" json:"tcp_close,omitempty"`
	TcpCloseWait   float64 `protobuf:"fixed64,2,opt,name=tcp_close_wait,json=tcpCloseWait,proto3" json:"tcp_close_wait,omitempty"`
	TcpClosing     float64 `protobuf:"fixed64,3,opt,name=tcp_closing,json=tcpClosing,proto3" json:"tcp_closing,omitempty"`
	TcpEstablished float64 `protobuf:"fixed64,4,opt,name=tcp_established,json=tcpEstablished,proto3" json:"tcp_established,omitempty"`
	TcpFinWait1    float64 `protobuf:"fixed64,5,opt,name=tcp_fin_wait1,json=tcpFinWait1,proto3" json:"tcp_fin_wait1,omitempty"`
	TcpFinWait2    float64 `protobuf:"fixed64,6,opt,name=tcp_fin_wait2,json=tcpFinWait2,proto3" json:"tcp_fin_wait2,omitempty"`
	TcpLastAck     float64 `protobuf:"fixed64,7,opt,name=tcp_last_ack,json=tcpLastAck,proto3" json:"tcp_last_ack,omitempty"`
	TcpListen      float64 `protobuf:"fixed64,8,opt,name=tcp_listen,json=tcpListen,proto3" json:"tcp_listen,omitempty"`
	TcpNone        float64 `protobuf:"fixed64,9,opt,name=tcp_none,json=tcpNone,proto3" json:"tcp_none,omitempty"`
	TcpSynRecv     float64 `protobuf:"fixed64,10,opt,name=tcp_syn_recv,json=tcpSynRecv,proto3" json:"tcp_syn_recv,omitempty"`
	TcpSynSent     float64 `protobuf:"fixed64,11,opt,name=tcp_syn_sent,json=tcpSynSent,proto3" json:"tcp_syn_sent,omitempty"`
	TcpTimeWait    float64 `protobuf:"fixed64,12,opt,name=tcp_time_wait,json=tcpTimeWait,proto3" json:"tcp_time_wait,omitempty"`
	UdpSocket      float64 `protobuf:"fixed64,13,opt,name=udp_socket,json=udpSocket,proto3" json:"udp_socket,omitempty"`
}

func (x *Netstat_Fields) Reset() {
	*x = Netstat_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Netstat_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Netstat_Fields) ProtoMessage() {}

func (x *Netstat_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Netstat_Fields.ProtoReflect.Descriptor instead.
func (*Netstat_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{21, 0}
}

func (x *Netstat_Fields) GetTcpClose() float64 {
	if x != nil {
		return x.TcpClose
	}
	return 0
}

func (x *Netstat_Fields) GetTcpCloseWait() float64 {
	if x != nil {
		return x.TcpCloseWait
	}
	return 0
}

func (x *Netstat_Fields) GetTcpClosing() float64 {
	if x != nil {
		return x.TcpClosing
	}
	return 0
}

func (x *Netstat_Fields) GetTcpEstablished() float64 {
	if x != nil {
		return x.TcpEstablished
	}
	return 0
}

func (x *Netstat_Fields) GetTcpFinWait1() float64 {
	if x != nil {
		return x.TcpFinWait1
	}
	return 0
}

func (x *Netstat_Fields) GetTcpFinWait2() float64 {
	if x != nil {
		return x.TcpFinWait2
	}
	return 0
}

func (x *Netstat_Fields) GetTcpLastAck() float64 {
	if x != nil {
		return x.TcpLastAck
	}
	return 0
}

func (x *Netstat_Fields) GetTcpListen() float64 {
	if x != nil {
		return x.TcpListen
	}
	return 0
}

func (x *Netstat_Fields) GetTcpNone() float64 {
	if x != nil {
		return x.TcpNone
	}
	return 0
}

func (x *Netstat_Fields) GetTcpSynRecv() float64 {
	if x != nil {
		return x.TcpSynRecv
	}
	return 0
}

func (x *Netstat_Fields) GetTcpSynSent() float64 {
	if x != nil {
		return x.TcpSynSent
	}
	return 0
}

func (x *Netstat_Fields) GetTcpTimeWait() float64 {
	if x != nil {
		return x.TcpTimeWait
	}
	return 0
}

func (x *Netstat_Fields) GetUdpSocket() float64 {
	if x != nil {
		return x.UdpSocket
	}
	return 0
}

type Netstat_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Netstat_Tags) Reset() {
	*x = Netstat_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Netstat_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Netstat_Tags) ProtoMessage() {}

func (x *Netstat_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Netstat_Tags.ProtoReflect.Descriptor instead.
func (*Netstat_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{21, 1}
}

func (x *Netstat_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type GPS_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat                 float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon                 float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
	Heading             float64 `protobuf:"fixed64,3,opt,name=heading,proto3" json:"heading,omitempty"`
	Pdop                float64 `protobuf:"fixed64,4,opt,name=pdop,proto3" json:"pdop,omitempty"`
	Active              bool    `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	FusionMode          int64   `protobuf:"varint,6,opt,name=fusion_mode,json=fusionMode,proto3" json:"fusion_mode,omitempty"`
	SystemGpsTimeDiffMs int64   `protobuf:"varint,7,opt,name=system_gps_time_diff_ms,json=systemGpsTimeDiffMs,proto3" json:"system_gps_time_diff_ms,omitempty"`
}

func (x *GPS_Fields) Reset() {
	*x = GPS_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPS_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPS_Fields) ProtoMessage() {}

func (x *GPS_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPS_Fields.ProtoReflect.Descriptor instead.
func (*GPS_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{22, 0}
}

func (x *GPS_Fields) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GPS_Fields) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *GPS_Fields) GetHeading() float64 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *GPS_Fields) GetPdop() float64 {
	if x != nil {
		return x.Pdop
	}
	return 0
}

func (x *GPS_Fields) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *GPS_Fields) GetFusionMode() int64 {
	if x != nil {
		return x.FusionMode
	}
	return 0
}

func (x *GPS_Fields) GetSystemGpsTimeDiffMs() int64 {
	if x != nil {
		return x.SystemGpsTimeDiffMs
	}
	return 0
}

type GPS_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *GPS_Tags) Reset() {
	*x = GPS_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPS_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPS_Tags) ProtoMessage() {}

func (x *GPS_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPS_Tags.ProtoReflect.Descriptor instead.
func (*GPS_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{22, 1}
}

func (x *GPS_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type Uploader_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthTokenStatus string `protobuf:"bytes,1,opt,name=auth_token_status,json=authTokenStatus,proto3" json:"auth_token_status,omitempty"`
	Initialized     string `protobuf:"bytes,2,opt,name=initialized,proto3" json:"initialized,omitempty"`
	UploadingStatus string `protobuf:"bytes,3,opt,name=uploading_status,json=uploadingStatus,proto3" json:"uploading_status,omitempty"`
}

func (x *Uploader_Fields) Reset() {
	*x = Uploader_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uploader_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uploader_Fields) ProtoMessage() {}

func (x *Uploader_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uploader_Fields.ProtoReflect.Descriptor instead.
func (*Uploader_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{23, 0}
}

func (x *Uploader_Fields) GetAuthTokenStatus() string {
	if x != nil {
		return x.AuthTokenStatus
	}
	return ""
}

func (x *Uploader_Fields) GetInitialized() string {
	if x != nil {
		return x.Initialized
	}
	return ""
}

func (x *Uploader_Fields) GetUploadingStatus() string {
	if x != nil {
		return x.UploadingStatus
	}
	return ""
}

type Uploader_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Uploader_Tags) Reset() {
	*x = Uploader_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uploader_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uploader_Tags) ProtoMessage() {}

func (x *Uploader_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uploader_Tags.ProtoReflect.Descriptor instead.
func (*Uploader_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{23, 1}
}

func (x *Uploader_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Uploader_Tags) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UploaderStats_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Complete int64 `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	Error    int64 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	InQueue  int64 `protobuf:"varint,3,opt,name=in_queue,json=inQueue,proto3" json:"in_queue,omitempty"`
	Part     int64 `protobuf:"varint,4,opt,name=part,proto3" json:"part,omitempty"`
}

func (x *UploaderStats_Fields) Reset() {
	*x = UploaderStats_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploaderStats_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploaderStats_Fields) ProtoMessage() {}

func (x *UploaderStats_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploaderStats_Fields.ProtoReflect.Descriptor instead.
func (*UploaderStats_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{24, 0}
}

func (x *UploaderStats_Fields) GetComplete() int64 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *UploaderStats_Fields) GetError() int64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *UploaderStats_Fields) GetInQueue() int64 {
	if x != nil {
		return x.InQueue
	}
	return 0
}

func (x *UploaderStats_Fields) GetPart() int64 {
	if x != nil {
		return x.Part
	}
	return 0
}

type UploaderStats_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UploaderStats_Tags) Reset() {
	*x = UploaderStats_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploaderStats_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploaderStats_Tags) ProtoMessage() {}

func (x *UploaderStats_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploaderStats_Tags.ProtoReflect.Descriptor instead.
func (*UploaderStats_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{24, 1}
}

func (x *UploaderStats_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *UploaderStats_Tags) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DetectNet_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetectionSent    string `protobuf:"bytes,1,opt,name=detection_sent,json=detectionSent,proto3" json:"detection_sent,omitempty"`
	FramesLoaded     string `protobuf:"bytes,2,opt,name=frames_loaded,json=framesLoaded,proto3" json:"frames_loaded,omitempty"`
	FramesProccessed string `protobuf:"bytes,3,opt,name=frames_proccessed,json=framesProccessed,proto3" json:"frames_proccessed,omitempty"`
	Initialized      string `protobuf:"bytes,4,opt,name=initialized,proto3" json:"initialized,omitempty"`
	NetProcessed     string `protobuf:"bytes,5,opt,name=net_processed,json=netProcessed,proto3" json:"net_processed,omitempty"`
	TrackerProcessed string `protobuf:"bytes,6,opt,name=tracker_processed,json=trackerProcessed,proto3" json:"tracker_processed,omitempty"`
}

func (x *DetectNet_Fields) Reset() {
	*x = DetectNet_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectNet_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectNet_Fields) ProtoMessage() {}

func (x *DetectNet_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectNet_Fields.ProtoReflect.Descriptor instead.
func (*DetectNet_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{25, 0}
}

func (x *DetectNet_Fields) GetDetectionSent() string {
	if x != nil {
		return x.DetectionSent
	}
	return ""
}

func (x *DetectNet_Fields) GetFramesLoaded() string {
	if x != nil {
		return x.FramesLoaded
	}
	return ""
}

func (x *DetectNet_Fields) GetFramesProccessed() string {
	if x != nil {
		return x.FramesProccessed
	}
	return ""
}

func (x *DetectNet_Fields) GetInitialized() string {
	if x != nil {
		return x.Initialized
	}
	return ""
}

func (x *DetectNet_Fields) GetNetProcessed() string {
	if x != nil {
		return x.NetProcessed
	}
	return ""
}

func (x *DetectNet_Fields) GetTrackerProcessed() string {
	if x != nil {
		return x.TrackerProcessed
	}
	return ""
}

type DetectNet_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DetectNet_Tags) Reset() {
	*x = DetectNet_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectNet_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectNet_Tags) ProtoMessage() {}

func (x *DetectNet_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectNet_Tags.ProtoReflect.Descriptor instead.
func (*DetectNet_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{25, 1}
}

func (x *DetectNet_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DetectNet_Tags) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SegNet_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSent         string `protobuf:"bytes,1,opt,name=data_sent,json=dataSent,proto3" json:"data_sent,omitempty"`
	DetectionLoaded  string `protobuf:"bytes,2,opt,name=detection_loaded,json=detectionLoaded,proto3" json:"detection_loaded,omitempty"`
	FramesLoaded     string `protobuf:"bytes,3,opt,name=frames_loaded,json=framesLoaded,proto3" json:"frames_loaded,omitempty"`
	FramesProccessed string `protobuf:"bytes,4,opt,name=frames_proccessed,json=framesProccessed,proto3" json:"frames_proccessed,omitempty"`
	Initialized      string `protobuf:"bytes,5,opt,name=initialized,proto3" json:"initialized,omitempty"`
	NetProcessed     string `protobuf:"bytes,6,opt,name=net_processed,json=netProcessed,proto3" json:"net_processed,omitempty"`
}

func (x *SegNet_Fields) Reset() {
	*x = SegNet_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegNet_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegNet_Fields) ProtoMessage() {}

func (x *SegNet_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegNet_Fields.ProtoReflect.Descriptor instead.
func (*SegNet_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{26, 0}
}

func (x *SegNet_Fields) GetDataSent() string {
	if x != nil {
		return x.DataSent
	}
	return ""
}

func (x *SegNet_Fields) GetDetectionLoaded() string {
	if x != nil {
		return x.DetectionLoaded
	}
	return ""
}

func (x *SegNet_Fields) GetFramesLoaded() string {
	if x != nil {
		return x.FramesLoaded
	}
	return ""
}

func (x *SegNet_Fields) GetFramesProccessed() string {
	if x != nil {
		return x.FramesProccessed
	}
	return ""
}

func (x *SegNet_Fields) GetInitialized() string {
	if x != nil {
		return x.Initialized
	}
	return ""
}

func (x *SegNet_Fields) GetNetProcessed() string {
	if x != nil {
		return x.NetProcessed
	}
	return ""
}

type SegNet_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SegNet_Tags) Reset() {
	*x = SegNet_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegNet_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegNet_Tags) ProtoMessage() {}

func (x *SegNet_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegNet_Tags.ProtoReflect.Descriptor instead.
func (*SegNet_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{26, 1}
}

func (x *SegNet_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SegNet_Tags) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PPCorrection_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initialized      string `protobuf:"bytes,1,opt,name=initialized,proto3" json:"initialized,omitempty"`
	DynamicKey       string `protobuf:"bytes,2,opt,name=dynamic_key,json=dynamicKey,proto3" json:"dynamic_key,omitempty"`
	SPARTNCorrection string `protobuf:"bytes,3,opt,name=SPARTN_correction,json=SPARTNCorrection,proto3" json:"SPARTN_correction,omitempty"`
	RTCMCorrection   string `protobuf:"bytes,4,opt,name=RTCM_correction,json=RTCMCorrection,proto3" json:"RTCM_correction,omitempty"`
	GNSSData         string `protobuf:"bytes,5,opt,name=GNSS_data,json=GNSSData,proto3" json:"GNSS_data,omitempty"`
}

func (x *PPCorrection_Fields) Reset() {
	*x = PPCorrection_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPCorrection_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPCorrection_Fields) ProtoMessage() {}

func (x *PPCorrection_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPCorrection_Fields.ProtoReflect.Descriptor instead.
func (*PPCorrection_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{27, 0}
}

func (x *PPCorrection_Fields) GetInitialized() string {
	if x != nil {
		return x.Initialized
	}
	return ""
}

func (x *PPCorrection_Fields) GetDynamicKey() string {
	if x != nil {
		return x.DynamicKey
	}
	return ""
}

func (x *PPCorrection_Fields) GetSPARTNCorrection() string {
	if x != nil {
		return x.SPARTNCorrection
	}
	return ""
}

func (x *PPCorrection_Fields) GetRTCMCorrection() string {
	if x != nil {
		return x.RTCMCorrection
	}
	return ""
}

func (x *PPCorrection_Fields) GetGNSSData() string {
	if x != nil {
		return x.GNSSData
	}
	return ""
}

type PPCorrection_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *PPCorrection_Tags) Reset() {
	*x = PPCorrection_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPCorrection_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPCorrection_Tags) ProtoMessage() {}

func (x *PPCorrection_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPCorrection_Tags.ProtoReflect.Descriptor instead.
func (*PPCorrection_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{27, 1}
}

func (x *PPCorrection_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PPCorrection_Tags) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Able_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlprLoaded           string `protobuf:"bytes,1,opt,name=alpr_loaded,json=alprLoaded,proto3" json:"alpr_loaded,omitempty"`
	ContextFrameLoaded   string `protobuf:"bytes,2,opt,name=context_frame_loaded,json=contextFrameLoaded,proto3" json:"context_frame_loaded,omitempty"`
	FrameGpsTimeDiffOk   string `protobuf:"bytes,3,opt,name=frame_gps_time_diff_ok,json=frameGpsTimeDiffOk,proto3" json:"frame_gps_time_diff_ok,omitempty"`
	FrameModelTimeDiffOk string `protobuf:"bytes,4,opt,name=frame_model_time_diff_ok,json=frameModelTimeDiffOk,proto3" json:"frame_model_time_diff_ok,omitempty"`
	GpsActive            string `protobuf:"bytes,5,opt,name=gps_active,json=gpsActive,proto3" json:"gps_active,omitempty"`
	GpsTimeStatus        string `protobuf:"bytes,6,opt,name=gps_time_status,json=gpsTimeStatus,proto3" json:"gps_time_status,omitempty"`
	Initialized          string `protobuf:"bytes,7,opt,name=initialized,proto3" json:"initialized,omitempty"`
	LprFramesLoaded      string `protobuf:"bytes,8,opt,name=lpr_frames_loaded,json=lprFramesLoaded,proto3" json:"lpr_frames_loaded,omitempty"`
	ModelDataLoaded      string `protobuf:"bytes,9,opt,name=model_data_loaded,json=modelDataLoaded,proto3" json:"model_data_loaded,omitempty"`
	RouteLoaded          string `protobuf:"bytes,10,opt,name=route_loaded,json=routeLoaded,proto3" json:"route_loaded,omitempty"`
	HomographyLoaded     string `protobuf:"bytes,11,opt,name=homography_loaded,json=homographyLoaded,proto3" json:"homography_loaded,omitempty"`
}

func (x *Able_Fields) Reset() {
	*x = Able_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Able_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Able_Fields) ProtoMessage() {}

func (x *Able_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Able_Fields.ProtoReflect.Descriptor instead.
func (*Able_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{28, 0}
}

func (x *Able_Fields) GetAlprLoaded() string {
	if x != nil {
		return x.AlprLoaded
	}
	return ""
}

func (x *Able_Fields) GetContextFrameLoaded() string {
	if x != nil {
		return x.ContextFrameLoaded
	}
	return ""
}

func (x *Able_Fields) GetFrameGpsTimeDiffOk() string {
	if x != nil {
		return x.FrameGpsTimeDiffOk
	}
	return ""
}

func (x *Able_Fields) GetFrameModelTimeDiffOk() string {
	if x != nil {
		return x.FrameModelTimeDiffOk
	}
	return ""
}

func (x *Able_Fields) GetGpsActive() string {
	if x != nil {
		return x.GpsActive
	}
	return ""
}

func (x *Able_Fields) GetGpsTimeStatus() string {
	if x != nil {
		return x.GpsTimeStatus
	}
	return ""
}

func (x *Able_Fields) GetInitialized() string {
	if x != nil {
		return x.Initialized
	}
	return ""
}

func (x *Able_Fields) GetLprFramesLoaded() string {
	if x != nil {
		return x.LprFramesLoaded
	}
	return ""
}

func (x *Able_Fields) GetModelDataLoaded() string {
	if x != nil {
		return x.ModelDataLoaded
	}
	return ""
}

func (x *Able_Fields) GetRouteLoaded() string {
	if x != nil {
		return x.RouteLoaded
	}
	return ""
}

func (x *Able_Fields) GetHomographyLoaded() string {
	if x != nil {
		return x.HomographyLoaded
	}
	return ""
}

type Able_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Able_Tags) Reset() {
	*x = Able_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Able_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Able_Tags) ProtoMessage() {}

func (x *Able_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Able_Tags.ProtoReflect.Descriptor instead.
func (*Able_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{28, 1}
}

func (x *Able_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Able_Tags) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AbleStats_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FpsMain         float64 `protobuf:"fixed64,1,opt,name=fps_main,json=fpsMain,proto3" json:"fps_main,omitempty"`
	FpsSynchronizer float64 `protobuf:"fixed64,2,opt,name=fps_synchronizer,json=fpsSynchronizer,proto3" json:"fps_synchronizer,omitempty"`
	FpsObservation  float64 `protobuf:"fixed64,3,opt,name=fps_observation,json=fpsObservation,proto3" json:"fps_observation,omitempty"`
	PlatesDetected  int64   `protobuf:"varint,4,opt,name=plates_detected,json=platesDetected,proto3" json:"plates_detected,omitempty"`
	EventsCreated   int64   `protobuf:"varint,5,opt,name=events_created,json=eventsCreated,proto3" json:"events_created,omitempty"`
}

func (x *AbleStats_Fields) Reset() {
	*x = AbleStats_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbleStats_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbleStats_Fields) ProtoMessage() {}

func (x *AbleStats_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbleStats_Fields.ProtoReflect.Descriptor instead.
func (*AbleStats_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{29, 0}
}

func (x *AbleStats_Fields) GetFpsMain() float64 {
	if x != nil {
		return x.FpsMain
	}
	return 0
}

func (x *AbleStats_Fields) GetFpsSynchronizer() float64 {
	if x != nil {
		return x.FpsSynchronizer
	}
	return 0
}

func (x *AbleStats_Fields) GetFpsObservation() float64 {
	if x != nil {
		return x.FpsObservation
	}
	return 0
}

func (x *AbleStats_Fields) GetPlatesDetected() int64 {
	if x != nil {
		return x.PlatesDetected
	}
	return 0
}

func (x *AbleStats_Fields) GetEventsCreated() int64 {
	if x != nil {
		return x.EventsCreated
	}
	return 0
}

type AbleStats_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AbleStats_Tags) Reset() {
	*x = AbleStats_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbleStats_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbleStats_Tags) ProtoMessage() {}

func (x *AbleStats_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbleStats_Tags.ProtoReflect.Descriptor instead.
func (*AbleStats_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{29, 1}
}

func (x *AbleStats_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AbleStats_Tags) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CameraControl_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoexposureStatus string `protobuf:"bytes,1,opt,name=autoexposure_status,json=autoexposureStatus,proto3" json:"autoexposure_status,omitempty"`
	Initialized        string `protobuf:"bytes,2,opt,name=initialized,proto3" json:"initialized,omitempty"`
	PipelineStatus     string `protobuf:"bytes,3,opt,name=pipeline_status,json=pipelineStatus,proto3" json:"pipeline_status,omitempty"`
}

func (x *CameraControl_Fields) Reset() {
	*x = CameraControl_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraControl_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraControl_Fields) ProtoMessage() {}

func (x *CameraControl_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraControl_Fields.ProtoReflect.Descriptor instead.
func (*CameraControl_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{30, 0}
}

func (x *CameraControl_Fields) GetAutoexposureStatus() string {
	if x != nil {
		return x.AutoexposureStatus
	}
	return ""
}

func (x *CameraControl_Fields) GetInitialized() string {
	if x != nil {
		return x.Initialized
	}
	return ""
}

func (x *CameraControl_Fields) GetPipelineStatus() string {
	if x != nil {
		return x.PipelineStatus
	}
	return ""
}

type CameraControl_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CameraControl_Tags) Reset() {
	*x = CameraControl_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraControl_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraControl_Tags) ProtoMessage() {}

func (x *CameraControl_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraControl_Tags.ProtoReflect.Descriptor instead.
func (*CameraControl_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{30, 1}
}

func (x *CameraControl_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CameraControl_Tags) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type EventDataCutter_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *EventDataCutter_Tags) Reset() {
	*x = EventDataCutter_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDataCutter_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDataCutter_Tags) ProtoMessage() {}

func (x *EventDataCutter_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDataCutter_Tags.ProtoReflect.Descriptor instead.
func (*EventDataCutter_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{31, 0}
}

func (x *EventDataCutter_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type EventDataCutterStats_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *EventDataCutterStats_Tags) Reset() {
	*x = EventDataCutterStats_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDataCutterStats_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDataCutterStats_Tags) ProtoMessage() {}

func (x *EventDataCutterStats_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDataCutterStats_Tags.ProtoReflect.Descriptor instead.
func (*EventDataCutterStats_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{32, 0}
}

func (x *EventDataCutterStats_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type Recorder_Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Recorder_Tags) Reset() {
	*x = Recorder_Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recorder_Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recorder_Tags) ProtoMessage() {}

func (x *Recorder_Tags) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recorder_Tags.ProtoReflect.Descriptor instead.
func (*Recorder_Tags) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{33, 0}
}

func (x *Recorder_Tags) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type SMARTAttribute_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitStatus float64 `protobuf:"fixed64,1,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	RawValue   int64   `protobuf:"varint,2,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
	Threshold  int64   `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Value      int64   `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Worst      int64   `protobuf:"varint,5,opt,name=worst,proto3" json:"worst,omitempty"`
}

func (x *SMARTAttribute_Fields) Reset() {
	*x = SMARTAttribute_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMARTAttribute_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMARTAttribute_Fields) ProtoMessage() {}

func (x *SMARTAttribute_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMARTAttribute_Fields.ProtoReflect.Descriptor instead.
func (*SMARTAttribute_Fields) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{34, 0}
}

func (x *SMARTAttribute_Fields) GetExitStatus() float64 {
	if x != nil {
		return x.ExitStatus
	}
	return 0
}

func (x *SMARTAttribute_Fields) GetRawValue() int64 {
	if x != nil {
		return x.RawValue
	}
	return 0
}

func (x *SMARTAttribute_Fields) GetThreshold() int64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SMARTAttribute_Fields) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SMARTAttribute_Fields) GetWorst() int64 {
	if x != nil {
		return x.Worst
	}
	return 0
}

type SMARTAttribute_TAGS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Device   string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Enabled  string `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Fail     string `protobuf:"bytes,4,opt,name=fail,proto3" json:"fail,omitempty"`
	Flags    string `protobuf:"bytes,5,opt,name=flags,proto3" json:"flags,omitempty"`
	Id       string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Model    string `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	Name     string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	SerialNo string `protobuf:"bytes,9,opt,name=serial_no,json=serialNo,proto3" json:"serial_no,omitempty"`
	Wwn      string `protobuf:"bytes,10,opt,name=wwn,proto3" json:"wwn,omitempty"`
	Capacity string `protobuf:"bytes,11,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *SMARTAttribute_TAGS) Reset() {
	*x = SMARTAttribute_TAGS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMARTAttribute_TAGS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMARTAttribute_TAGS) ProtoMessage() {}

func (x *SMARTAttribute_TAGS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMARTAttribute_TAGS.ProtoReflect.Descriptor instead.
func (*SMARTAttribute_TAGS) Descriptor() ([]byte, []int) {
	return file_proto_proto_rawDescGZIP(), []int{34, 1}
}

func (x *SMARTAttribute_TAGS) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetEnabled() string {
	if x != nil {
		return x.Enabled
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetFail() string {
	if x != nil {
		return x.Fail
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetFlags() string {
	if x != nil {
		return x.Flags
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetSerialNo() string {
	if x != nil {
		return x.SerialNo
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetWwn() string {
	if x != nil {
		return x.Wwn
	}
	return ""
}

func (x *SMARTAttribute_TAGS) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

var File_proto_proto protoreflect.FileDescriptor

var file_proto_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x04, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x69, 0x6f, 0x12,
	0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x69, 0x6f, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x69, 0x6f, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xe7, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x69, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6f, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6f, 0x70, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6f, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x49, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x1a, 0x2e, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xcb, 0x02, 0x0a, 0x04, 0x47, 0x6c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x77,
	0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x46, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0xc6, 0x04, 0x0a, 0x03, 0x4c, 0x54, 0x45, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x54, 0x45, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x54, 0x45,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x8c, 0x03, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x66, 0x72, 0x65, 0x71, 0x42, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x74, 0x64, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73,
	0x54, 0x64, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6d, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6d, 0x6d, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x73, 0x72, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x72, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x72, 0x73, 0x72, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x6e, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x72, 0x78, 0x6c, 0x65, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x72,
	0x78, 0x6c, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6c,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x75, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x73, 0x72, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x72, 0x73, 0x72, 0x70, 0x4e, 0x75, 0x6d, 0x1a, 0x2e, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xc0, 0x03, 0x0a, 0x08, 0x57, 0x69, 0x72,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0xed, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e,
	0x6f, 0x69, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x77, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6e, 0x77, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72,
	0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x1a, 0x38, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x05,
	0x53, 0x4d, 0x41, 0x52, 0x54, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x4d,
	0x41, 0x52, 0x54, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x4d, 0x41,
	0x52, 0x54, 0x2e, 0x54, 0x41, 0x47, 0x53, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x5d, 0x0a, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x4f, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x43, 0x1a, 0x65, 0x0a, 0x04, 0x54, 0x41,
	0x47, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x6f, 0x22, 0xde, 0x0a, 0x0a, 0x0a, 0x54, 0x65, 0x67, 0x72, 0x61, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x67, 0x72, 0x61, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x67,
	0x72, 0x61, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x1a, 0x8f, 0x09, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6f,
	0x54, 0x65, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x61, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x78, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x75, 0x78, 0x54, 0x65, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x31, 0x66, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x31, 0x66, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x70, 0x75, 0x31, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x63, 0x70, 0x75, 0x31, 0x70, 0x72, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75,
	0x32, 0x66, 0x72, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x32, 0x66, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x32, 0x70, 0x72, 0x6f,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x32, 0x70, 0x72, 0x6f,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6d, 0x63, 0x66, 0x72, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65,
	0x6d, 0x63, 0x66, 0x72, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6d, 0x63, 0x66, 0x72, 0x65,
	0x71, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x6d, 0x63,
	0x66, 0x72, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54,
	0x65, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x33, 0x64, 0x66, 0x72, 0x65, 0x71, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x67, 0x72, 0x33, 0x64, 0x66, 0x72, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0c, 0x67, 0x72, 0x33, 0x64, 0x66, 0x72, 0x65, 0x71, 0x70, 0x72, 0x6f, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x72, 0x33, 0x64, 0x66, 0x72, 0x65, 0x71, 0x70,
	0x72, 0x6f, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x74, 0x73, 0x5f, 0x62, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x74, 0x73, 0x42, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x74,
	0x73, 0x5f, 0x66, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6d, 0x74, 0x73, 0x46,
	0x67, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72,
	0x61, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6d, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x1b, 0x76, 0x64, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x67, 0x70,
	0x75, 0x5f, 0x63, 0x76, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x69, 0x6c, 0x69, 0x77, 0x61, 0x74,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x76, 0x64, 0x64, 0x43, 0x70, 0x75, 0x47,
	0x70, 0x75, 0x43, 0x76, 0x41, 0x76, 0x67, 0x4d, 0x69, 0x6c, 0x69, 0x77, 0x61, 0x74, 0x73, 0x12,
	0x43, 0x0a, 0x1f, 0x76, 0x64, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x63,
	0x76, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x69, 0x77, 0x61,
	0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x76, 0x64, 0x64, 0x43, 0x70, 0x75,
	0x47, 0x70, 0x75, 0x43, 0x76, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6c, 0x69,
	0x77, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x76, 0x64, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x61,
	0x76, 0x67, 0x5f, 0x6d, 0x69, 0x6c, 0x69, 0x77, 0x61, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x76, 0x64, 0x64, 0x49, 0x6e, 0x41, 0x76, 0x67, 0x4d, 0x69, 0x6c, 0x69, 0x77,
	0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x64, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x69, 0x77, 0x61, 0x74, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x76, 0x64, 0x64, 0x49, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x69, 0x6c, 0x69, 0x77, 0x61, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x64,
	0x64, 0x5f, 0x73, 0x6f, 0x63, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x69, 0x6c, 0x69, 0x77, 0x61,
	0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x76, 0x64, 0x64, 0x53, 0x6f, 0x63,
	0x41, 0x76, 0x67, 0x4d, 0x69, 0x6c, 0x69, 0x77, 0x61, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x76,
	0x64, 0x64, 0x5f, 0x73, 0x6f, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x69, 0x6c, 0x69, 0x77, 0x61, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x76,
	0x64, 0x64, 0x53, 0x6f, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6c, 0x69,
	0x77, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x6d, 0x62, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x76, 0x64, 0x65, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x6e, 0x76, 0x64, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x76, 0x64, 0x65, 0x63, 0x31,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x76, 0x64, 0x65, 0x63, 0x31, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x76, 0x65, 0x6e, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6e,
	0x76, 0x65, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x76, 0x65, 0x6e, 0x63, 0x31, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x76, 0x65, 0x6e, 0x63, 0x31, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x76, 0x6a, 0x70, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6e, 0x76, 0x6a,
	0x70, 0x67, 0x1a, 0x2e, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x91, 0x04, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x50, 0x55, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x50, 0x55, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xd9, 0x02, 0x0a,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6f, 0x77, 0x61, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6f,
	0x77, 0x61, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x72,
	0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x72,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72,
	0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f,
	0x66, 0x74, 0x69, 0x72, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x2c, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x70, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x06, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xc0, 0x01, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x1a, 0x1a, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xbf, 0x04, 0x0a, 0x0d, 0x4c, 0x69, 0x6e,
	0x75, 0x78, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x46, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x46, 0x73,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53,
	0x79, 0x73, 0x63, 0x74, 0x6c, 0x46, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x1a, 0xfb, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x61,
	0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x4e, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x69, 0x6f,
	0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x69, 0x6f, 0x4e, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6e, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x64, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x4e,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x57, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x72, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x6e, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x46,
	0x72, 0x65, 0x65, 0x4e, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x69, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x4e, 0x72, 0x1a, 0x1a,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xc0, 0x02, 0x0a, 0x06, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x7b, 0x0a,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c,
	0x6f, 0x61, 0x64, 0x31, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x35, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x35, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x5f, 0x63, 0x70, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x43, 0x70,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x31, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x22, 0x9d, 0x1c,
	0x0a, 0x03, 0x4e, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65,
	0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xd9, 0x1a, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x72, 0x6f,
	0x70, 0x4f, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x49, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x4f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x63,
	0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x61, 0x64, 0x64, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x72, 0x65, 0x70,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x61,
	0x64, 0x64, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x72, 0x65, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x61, 0x64, 0x64, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x61, 0x64, 0x64,
	0x72, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69,
	0x6e, 0x63, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x63, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x73, 0x74, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x73, 0x74, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x65,
	0x63, 0x68, 0x6f, 0x72, 0x65, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69,
	0x63, 0x6d, 0x70, 0x49, 0x6e, 0x65, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x65, 0x63, 0x68, 0x6f, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x65, 0x63, 0x68, 0x6f, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e,
	0x6d, 0x73, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x63, 0x6d, 0x70,
	0x49, 0x6e, 0x6d, 0x73, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69,
	0x6e, 0x70, 0x61, 0x72, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x70, 0x61, 0x72, 0x6d, 0x70, 0x72, 0x6f, 0x62,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x63, 0x6d,
	0x70, 0x49, 0x6e, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x72, 0x63, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x68,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x73,
	0x72, 0x63, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x63, 0x6d,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x65, 0x78, 0x63, 0x64, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x65,
	0x78, 0x63, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x72, 0x65, 0x70, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x72, 0x65, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x61, 0x64, 0x64, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x72, 0x65, 0x70, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x61, 0x64, 0x64, 0x72, 0x6d,
	0x61, 0x73, 0x6b, 0x72, 0x65, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x61, 0x64, 0x64, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x61, 0x64, 0x64, 0x72, 0x6d,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x64, 0x65, 0x73, 0x74, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x64, 0x65, 0x73, 0x74, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x70, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x65, 0x63, 0x68, 0x6f, 0x72, 0x65,
	0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x63,
	0x68, 0x6f, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x63, 0x6d, 0x70, 0x4f,
	0x75, 0x74, 0x65, 0x63, 0x68, 0x6f, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x6d, 0x73, 0x67,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x61, 0x72,
	0x6d, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x63,
	0x6d, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x61, 0x72, 0x6d, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x4f,
	0x75, 0x74, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x72, 0x63, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x68,
	0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74,
	0x73, 0x72, 0x63, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x63,
	0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x65, 0x78, 0x63, 0x64, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x65, 0x78, 0x63, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x72, 0x65, 0x70, 0x73,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x72, 0x65, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x4f, 0x75,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x74, 0x6c, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x69, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x74, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x70, 0x46, 0x72, 0x61, 0x67,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69,
	0x70, 0x46, 0x72, 0x61, 0x67, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6f, 0x6b, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x69, 0x70, 0x46, 0x72, 0x61, 0x67, 0x6f, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x70, 0x5f,
	0x69, 0x6e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x69, 0x70, 0x49, 0x6e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x70, 0x49, 0x6e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x69, 0x70, 0x49, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x70, 0x5f, 0x69, 0x6e, 0x68, 0x64, 0x72, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x70, 0x49, 0x6e, 0x68, 0x64, 0x72, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x70, 0x49, 0x6e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x69,
	0x6e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x70, 0x49, 0x6e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x6f, 0x75,
	0x74, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x69, 0x70, 0x4f, 0x75, 0x74, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x6e, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x70, 0x4f, 0x75, 0x74, 0x6e, 0x6f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69,
	0x70, 0x4f, 0x75, 0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6d, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6d, 0x66, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6d, 0x6f, 0x6b, 0x73,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6d, 0x6f,
	0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6d, 0x72, 0x65,
	0x71, 0x64, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x70, 0x52, 0x65, 0x61,
	0x73, 0x6d, 0x72, 0x65, 0x71, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x66,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x63, 0x70,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x73, 0x74, 0x61, 0x62, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x63, 0x70,
	0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x63, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x63,
	0x70, 0x49, 0x6e, 0x63, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x65, 0x72, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x67, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x63, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x63, 0x70, 0x4d, 0x61, 0x78, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x63, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x72, 0x73, 0x74, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4f, 0x75, 0x74, 0x72, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x63, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x73, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x63, 0x70,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x73, 0x65, 0x67, 0x73, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x73, 0x65,
	0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x74, 0x6f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x63,
	0x70, 0x52, 0x74, 0x6f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x74, 0x6f, 0x6d, 0x61, 0x78, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x63, 0x70, 0x52, 0x74, 0x6f, 0x6d, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x63, 0x70, 0x5f, 0x72, 0x74, 0x6f, 0x6d, 0x69, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x63, 0x70, 0x52, 0x74, 0x6f, 0x6d, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x75,
	0x64, 0x70, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x64, 0x70, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x69, 0x6e,
	0x63, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x75, 0x64, 0x70, 0x49, 0x6e, 0x63, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x49,
	0x6e, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x64,
	0x70, 0x5f, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x75, 0x64, 0x70, 0x49, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x64, 0x70, 0x5f, 0x6e, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x4e, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x64, 0x70, 0x4f, 0x75, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x64, 0x70,
	0x5f, 0x72, 0x63, 0x76, 0x62, 0x75, 0x66, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x64, 0x70, 0x52, 0x63, 0x76, 0x62, 0x75, 0x66, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x6e, 0x64, 0x62,
	0x75, 0x66, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x75, 0x64, 0x70, 0x53, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x75,
	0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x63, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x6c,
	0x69, 0x74, 0x65, 0x4e, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x64,
	0x70, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x0a,
	0x14, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x63, 0x76, 0x62, 0x75, 0x66, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x75, 0x64, 0x70,
	0x6c, 0x69, 0x74, 0x65, 0x52, 0x63, 0x76, 0x62, 0x75, 0x66, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x64, 0x62,
	0x75, 0x66, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x75, 0x64, 0x70, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x1a, 0x38, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x8f, 0x03,
	0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x96, 0x01, 0x0a,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x50, 0x55, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x50, 0x55, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x50, 0x55, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x50, 0x55, 0x31, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x50, 0x55, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43,
	0x50, 0x55, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x50, 0x55, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x43, 0x50, 0x55, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x50, 0x55, 0x34, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x50, 0x55, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x50, 0x55, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x50, 0x55, 0x35, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x58, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xc2, 0x09, 0x0a, 0x03, 0x4d, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x6d, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x9c, 0x08, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x68, 0x69, 0x67, 0x68, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x69,
	0x67, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x68, 0x75, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x68, 0x75, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x75, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x75, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x68, 0x75, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c,
	0x6f, 0x77, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x61, 0x62, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x6c, 0x61, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x65, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x77, 0x61, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6d, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76,
	0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x76,
	0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x76, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x74, 0x6d, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6d, 0x70, 0x1a, 0x1a, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x22, 0xcf, 0x03, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x2a, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0xce, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x1a, 0x72, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x91, 0x02, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70, 0x12,
	0x2a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x1a, 0x69, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x65,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x1a,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xa1, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x65, 0x61, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69,
	0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x7a, 0x6f, 0x6d, 0x62, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x7a, 0x6f, 0x6d, 0x62, 0x69, 0x65, 0x73, 0x1a, 0x1a, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xea, 0x08, 0x0a, 0x0b, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xa3, 0x05, 0x0a, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x69,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x44, 0x0a, 0x1f, 0x69,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x69, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x6f, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1c, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x46, 0x0a, 0x20, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x69, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6f, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x69, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x69, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x3d, 0x0a, 0x1b, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x1a, 0xa2,
	0x02, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x05, 0x0a, 0x0b, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x41, 0x47,
	0x53, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x9a, 0x03, 0x0a, 0x06, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x5f, 0x63, 0x70, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x43, 0x70, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x5f, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x55, 0x73, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x1a, 0x62, 0x0a, 0x04, 0x54, 0x41, 0x47, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x03, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x1a, 0x2d, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x1a, 0x8a, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xab,
	0x04, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x70, 0x75, 0x12, 0x2f, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x70, 0x75, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x70,
	0x75, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x71, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x9c, 0x02,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x05, 0x0a,
	0x09, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xf4, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x44, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a,
	0xa4, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x04, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x73, 0x74,
	0x61, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74,
	0x61, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x73,
	0x74, 0x61, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xc0, 0x03, 0x0a,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x63, 0x70, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x63,
	0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x61, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x63,
	0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x74, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x63, 0x70, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x69, 0x6e, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x63, 0x70,
	0x46, 0x69, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f,
	0x66, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x63, 0x70, 0x46, 0x69, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x32, 0x12, 0x20, 0x0a, 0x0c,
	0x74, 0x63, 0x70, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x63, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x63, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x63, 0x70, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x74, 0x63, 0x70, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x63, 0x70, 0x5f,
	0x73, 0x79, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x63, 0x70, 0x53, 0x79, 0x6e, 0x52, 0x65, 0x63, 0x76, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x63,
	0x70, 0x5f, 0x73, 0x79, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x74, 0x63, 0x70, 0x53, 0x79, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x63, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x64, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x1a,
	0x1a, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x03,
	0x47, 0x50, 0x53, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x53, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x53, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xc9, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x64, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x64,
	0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x17, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x47, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x4d,
	0x73, 0x1a, 0x1a, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xc5, 0x03,
	0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x81, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x2c, 0x0a, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x69, 0x0a,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x1a, 0x2c, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xbd, 0x04, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x4e, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x70, 0x1a, 0xf5, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x1a, 0x2c, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x04, 0x0a, 0x06, 0x53, 0x65, 0x67, 0x4e, 0x65,
	0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x67, 0x4e, 0x65, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x67, 0x4e, 0x65, 0x74,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x67, 0x4e, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0xe9, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x1a, 0x2c, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92,
	0x04, 0x0a, 0x0c, 0x50, 0x50, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x50, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x50,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x50, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0xbe, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x53, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x53, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x52, 0x54, 0x43, 0x4d, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x54, 0x43, 0x4d,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x47, 0x4e,
	0x53, 0x53, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47,
	0x4e, 0x53, 0x53, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x2c, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x8c, 0x06, 0x0a, 0x04, 0x41, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x6c,
	0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0xd8, 0x03, 0x0a, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x70, 0x72, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x70,
	0x72, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x47, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x4f, 0x6b, 0x12, 0x36, 0x0a,
	0x18, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x4f, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x70, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x70, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x70, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x70, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x6f, 0x6d,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x1a, 0x2c, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x41, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xc7,
	0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x70, 0x73,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x70, 0x73,
	0x4d, 0x61, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x70, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x66, 0x70, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x70, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x70, 0x73, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x2c, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xdc, 0x03, 0x0a, 0x0d, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x70, 0x1a, 0x84, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x61, 0x75, 0x74, 0x6f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x2c, 0x0a, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x02, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x75, 0x74,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x70, 0x1a, 0x1a, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x1a, 0x3c,
	0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x02, 0x0a,
	0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x1a, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xff, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x1a, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x04, 0x0a, 0x0e, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x4d, 0x41, 0x52, 0x54, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x41, 0x47, 0x53, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0x90, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x65, 0x78, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x6f, 0x72, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x6f, 0x72,
	0x73, 0x74, 0x1a, 0xfb, 0x01, 0x0a, 0x04, 0x54, 0x41, 0x47, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x77, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x22, 0xc7, 0x0c, 0x0a, 0x06, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x12, 0x25, 0x0a, 0x06, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x73, 0x79, 0x73, 0x63,
	0x74, 0x6c, 0x5f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x46,
	0x73, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x46, 0x73,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74,
	0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x6d, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x50, 0x55,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1f, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x65, 0x67, 0x72, 0x61, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x67, 0x72, 0x61, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x6c, 0x6b,
	0x69, 0x6f, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x12,
	0x2e, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x12,
	0x2e, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x70, 0x75, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x70, 0x75, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x70, 0x75, 0x12,
	0x2e, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x12,
	0x34, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x4d, 0x41,
	0x52, 0x54, 0x52, 0x05, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x6c, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x54, 0x45, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x67, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c,
	0x6f, 0x67, 0x52, 0x04, 0x67, 0x6c, 0x6f, 0x67, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b,
	0x69, 0x6f, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x69, 0x6f, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x69, 0x6f, 0x12,
	0x28, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x67, 0x70, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x50, 0x53, 0x52, 0x03, 0x67, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62,
	0x6c, 0x65, 0x52, 0x04, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x65, 0x67, 0x4e, 0x65, 0x74, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x67,
	0x4e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x65, 0x67, 0x4e, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74,
	0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x08, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x70, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x50, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70,
	0x70, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a,
	0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x75, 0x74,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x75, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x09, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x4d, 0x41, 0x52,
	0x54, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_proto_rawDescOnce sync.Once
	file_proto_proto_rawDescData = file_proto_proto_rawDesc
)

func file_proto_proto_rawDescGZIP() []byte {
	file_proto_proto_rawDescOnce.Do(func() {
		file_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_proto_rawDescData)
	})
	return file_proto_proto_rawDescData
}

var file_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 112)
var file_proto_proto_goTypes = []interface{}{
	(*Diskio)(nil),                    // 0: proto.Diskio
	(*Glog)(nil),                      // 1: proto.Glog
	(*LTE)(nil),                       // 2: proto.LTE
	(*Wireless)(nil),                  // 3: proto.Wireless
	(*SMART)(nil),                     // 4: proto.SMART
	(*Tegrastats)(nil),                // 5: proto.Tegrastats
	(*CPU)(nil),                       // 6: proto.CPU
	(*Kernel)(nil),                    // 7: proto.Kernel
	(*LinuxSysctlFs)(nil),             // 8: proto.LinuxSysctlFs
	(*System)(nil),                    // 9: proto.System
	(*Net)(nil),                       // 10: proto.Net
	(*Interrupts)(nil),                // 11: proto.Interrupts
	(*Mem)(nil),                       // 12: proto.Mem
	(*Disk)(nil),                      // 13: proto.Disk
	(*Swap)(nil),                      // 14: proto.Swap
	(*Processes)(nil),                 // 15: proto.Processes
	(*DockerBlkio)(nil),               // 16: proto.DockerBlkio
	(*DockerStats)(nil),               // 17: proto.DockerStats
	(*DockerMem)(nil),                 // 18: proto.DockerMem
	(*DockerCpu)(nil),                 // 19: proto.DockerCpu
	(*DockerNet)(nil),                 // 20: proto.DockerNet
	(*Netstat)(nil),                   // 21: proto.Netstat
	(*GPS)(nil),                       // 22: proto.GPS
	(*Uploader)(nil),                  // 23: proto.Uploader
	(*UploaderStats)(nil),             // 24: proto.UploaderStats
	(*DetectNet)(nil),                 // 25: proto.DetectNet
	(*SegNet)(nil),                    // 26: proto.SegNet
	(*PPCorrection)(nil),              // 27: proto.PPCorrection
	(*Able)(nil),                      // 28: proto.Able
	(*AbleStats)(nil),                 // 29: proto.AbleStats
	(*CameraControl)(nil),             // 30: proto.CameraControl
	(*EventDataCutter)(nil),           // 31: proto.EventDataCutter
	(*EventDataCutterStats)(nil),      // 32: proto.EventDataCutterStats
	(*Recorder)(nil),                  // 33: proto.Recorder
	(*SMARTAttribute)(nil),            // 34: proto.SMARTAttribute
	(*Influx)(nil),                    // 35: proto.Influx
	(*Diskio_Fields)(nil),             // 36: proto.Diskio.Fields
	(*Diskio_Tags)(nil),               // 37: proto.Diskio.Tags
	(*Glog_Fields)(nil),               // 38: proto.Glog.Fields
	(*Glog_Tags)(nil),                 // 39: proto.Glog.Tags
	(*LTE_Fields)(nil),                // 40: proto.LTE.Fields
	(*LTE_Tags)(nil),                  // 41: proto.LTE.Tags
	(*Wireless_Fields)(nil),           // 42: proto.Wireless.Fields
	(*Wireless_Tags)(nil),             // 43: proto.Wireless.Tags
	(*SMART_Fields)(nil),              // 44: proto.SMART.Fields
	(*SMART_TAGS)(nil),                // 45: proto.SMART.TAGS
	(*Tegrastats_Fields)(nil),         // 46: proto.Tegrastats.Fields
	(*Tegrastats_Tags)(nil),           // 47: proto.Tegrastats.Tags
	(*CPU_Fields)(nil),                // 48: proto.CPU.Fields
	(*CPU_Tags)(nil),                  // 49: proto.CPU.Tags
	(*Kernel_Fields)(nil),             // 50: proto.Kernel.Fields
	(*Kernel_Tags)(nil),               // 51: proto.Kernel.Tags
	(*LinuxSysctlFs_Fields)(nil),      // 52: proto.LinuxSysctlFs.Fields
	(*LinuxSysctlFs_Tags)(nil),        // 53: proto.LinuxSysctlFs.Tags
	(*System_Fields)(nil),             // 54: proto.System.Fields
	(*System_Tags)(nil),               // 55: proto.System.Tags
	(*Net_Fields)(nil),                // 56: proto.Net.Fields
	(*Net_Tags)(nil),                  // 57: proto.Net.Tags
	(*Interrupts_Fields)(nil),         // 58: proto.Interrupts.Fields
	(*Interrupts_Tags)(nil),           // 59: proto.Interrupts.Tags
	(*Mem_Fields)(nil),                // 60: proto.Mem.Fields
	(*Mem_Tags)(nil),                  // 61: proto.Mem.Tags
	(*Disk_Fields)(nil),               // 62: proto.Disk.Fields
	(*Disk_Tags)(nil),                 // 63: proto.Disk.Tags
	(*Swap_Fields)(nil),               // 64: proto.Swap.Fields
	(*Swap_Tags)(nil),                 // 65: proto.Swap.Tags
	(*Processes_Fields)(nil),          // 66: proto.Processes.Fields
	(*Processes_Tags)(nil),            // 67: proto.Processes.Tags
	(*DockerBlkio_Fields)(nil),        // 68: proto.DockerBlkio.Fields
	(*DockerBlkio_Tags)(nil),          // 69: proto.DockerBlkio.Tags
	(*DockerStats_FIELDS)(nil),        // 70: proto.DockerStats.FIELDS
	(*DockerStats_TAGS)(nil),          // 71: proto.DockerStats.TAGS
	(*DockerMem_Fields)(nil),          // 72: proto.DockerMem.Fields
	(*DockerMem_Tags)(nil),            // 73: proto.DockerMem.Tags
	(*DockerCpu_Fields)(nil),          // 74: proto.DockerCpu.Fields
	(*DockerCpu_Tags)(nil),            // 75: proto.DockerCpu.Tags
	(*DockerNet_Fields)(nil),          // 76: proto.DockerNet.Fields
	(*DockerNet_Tags)(nil),            // 77: proto.DockerNet.Tags
	(*Netstat_Fields)(nil),            // 78: proto.Netstat.Fields
	(*Netstat_Tags)(nil),              // 79: proto.Netstat.Tags
	(*GPS_Fields)(nil),                // 80: proto.GPS.Fields
	(*GPS_Tags)(nil),                  // 81: proto.GPS.Tags
	(*Uploader_Fields)(nil),           // 82: proto.Uploader.Fields
	(*Uploader_Tags)(nil),             // 83: proto.Uploader.Tags
	nil,                               // 84: proto.Uploader.FieldsMapEntry
	(*UploaderStats_Fields)(nil),      // 85: proto.UploaderStats.Fields
	(*UploaderStats_Tags)(nil),        // 86: proto.UploaderStats.Tags
	(*DetectNet_Fields)(nil),          // 87: proto.DetectNet.Fields
	(*DetectNet_Tags)(nil),            // 88: proto.DetectNet.Tags
	nil,                               // 89: proto.DetectNet.FieldsMapEntry
	(*SegNet_Fields)(nil),             // 90: proto.SegNet.Fields
	(*SegNet_Tags)(nil),               // 91: proto.SegNet.Tags
	nil,                               // 92: proto.SegNet.FieldsMapEntry
	(*PPCorrection_Fields)(nil),       // 93: proto.PPCorrection.Fields
	(*PPCorrection_Tags)(nil),         // 94: proto.PPCorrection.Tags
	nil,                               // 95: proto.PPCorrection.FieldsMapEntry
	(*Able_Fields)(nil),               // 96: proto.Able.Fields
	(*Able_Tags)(nil),                 // 97: proto.Able.Tags
	nil,                               // 98: proto.Able.FieldsMapEntry
	(*AbleStats_Fields)(nil),          // 99: proto.AbleStats.Fields
	(*AbleStats_Tags)(nil),            // 100: proto.AbleStats.Tags
	(*CameraControl_Fields)(nil),      // 101: proto.CameraControl.Fields
	(*CameraControl_Tags)(nil),        // 102: proto.CameraControl.Tags
	nil,                               // 103: proto.CameraControl.FieldsMapEntry
	(*EventDataCutter_Tags)(nil),      // 104: proto.EventDataCutter.Tags
	nil,                               // 105: proto.EventDataCutter.FieldsMapEntry
	(*EventDataCutterStats_Tags)(nil), // 106: proto.EventDataCutterStats.Tags
	nil,                               // 107: proto.EventDataCutterStats.FieldsMapEntry
	(*Recorder_Tags)(nil),             // 108: proto.Recorder.Tags
	nil,                               // 109: proto.Recorder.FieldsMapEntry
	(*SMARTAttribute_Fields)(nil),     // 110: proto.SMARTAttribute.Fields
	(*SMARTAttribute_TAGS)(nil),       // 111: proto.SMARTAttribute.TAGS
}
var file_proto_proto_depIdxs = []int32{
	36,  // 0: proto.Diskio.fields:type_name -> proto.Diskio.Fields
	37,  // 1: proto.Diskio.tags:type_name -> proto.Diskio.Tags
	38,  // 2: proto.Glog.fields:type_name -> proto.Glog.Fields
	39,  // 3: proto.Glog.tags:type_name -> proto.Glog.Tags
	40,  // 4: proto.LTE.fields:type_name -> proto.LTE.Fields
	41,  // 5: proto.LTE.tags:type_name -> proto.LTE.Tags
	42,  // 6: proto.Wireless.fields:type_name -> proto.Wireless.Fields
	43,  // 7: proto.Wireless.tags:type_name -> proto.Wireless.Tags
	44,  // 8: proto.SMART.fields:type_name -> proto.SMART.Fields
	45,  // 9: proto.SMART.tags:type_name -> proto.SMART.TAGS
	46,  // 10: proto.Tegrastats.fields:type_name -> proto.Tegrastats.Fields
	47,  // 11: proto.Tegrastats.tags:type_name -> proto.Tegrastats.Tags
	48,  // 12: proto.CPU.fields:type_name -> proto.CPU.Fields
	49,  // 13: proto.CPU.tags:type_name -> proto.CPU.Tags
	50,  // 14: proto.Kernel.fields:type_name -> proto.Kernel.Fields
	51,  // 15: proto.Kernel.tags:type_name -> proto.Kernel.Tags
	52,  // 16: proto.LinuxSysctlFs.fields:type_name -> proto.LinuxSysctlFs.Fields
	53,  // 17: proto.LinuxSysctlFs.tags:type_name -> proto.LinuxSysctlFs.Tags
	54,  // 18: proto.System.fields:type_name -> proto.System.Fields
	55,  // 19: proto.System.tags:type_name -> proto.System.Tags
	56,  // 20: proto.Net.fields:type_name -> proto.Net.Fields
	57,  // 21: proto.Net.tags:type_name -> proto.Net.Tags
	58,  // 22: proto.Interrupts.fields:type_name -> proto.Interrupts.Fields
	59,  // 23: proto.Interrupts.tags:type_name -> proto.Interrupts.Tags
	60,  // 24: proto.Mem.fields:type_name -> proto.Mem.Fields
	61,  // 25: proto.Mem.tags:type_name -> proto.Mem.Tags
	62,  // 26: proto.Disk.fields:type_name -> proto.Disk.Fields
	63,  // 27: proto.Disk.tags:type_name -> proto.Disk.Tags
	64,  // 28: proto.Swap.fields:type_name -> proto.Swap.Fields
	65,  // 29: proto.Swap.tags:type_name -> proto.Swap.Tags
	66,  // 30: proto.Processes.fields:type_name -> proto.Processes.Fields
	67,  // 31: proto.Processes.tags:type_name -> proto.Processes.Tags
	68,  // 32: proto.DockerBlkio.fields:type_name -> proto.DockerBlkio.Fields
	69,  // 33: proto.DockerBlkio.tags:type_name -> proto.DockerBlkio.Tags
	70,  // 34: proto.DockerStats.fields:type_name -> proto.DockerStats.FIELDS
	71,  // 35: proto.DockerStats.tags:type_name -> proto.DockerStats.TAGS
	72,  // 36: proto.DockerMem.fields:type_name -> proto.DockerMem.Fields
	73,  // 37: proto.DockerMem.tags:type_name -> proto.DockerMem.Tags
	74,  // 38: proto.DockerCpu.fields:type_name -> proto.DockerCpu.Fields
	75,  // 39: proto.DockerCpu.tags:type_name -> proto.DockerCpu.Tags
	76,  // 40: proto.DockerNet.fields:type_name -> proto.DockerNet.Fields
	77,  // 41: proto.DockerNet.tags:type_name -> proto.DockerNet.Tags
	78,  // 42: proto.Netstat.fields:type_name -> proto.Netstat.Fields
	79,  // 43: proto.Netstat.tags:type_name -> proto.Netstat.Tags
	80,  // 44: proto.GPS.fields:type_name -> proto.GPS.Fields
	81,  // 45: proto.GPS.tags:type_name -> proto.GPS.Tags
	82,  // 46: proto.Uploader.fields:type_name -> proto.Uploader.Fields
	83,  // 47: proto.Uploader.tags:type_name -> proto.Uploader.Tags
	84,  // 48: proto.Uploader.fields_map:type_name -> proto.Uploader.FieldsMapEntry
	85,  // 49: proto.UploaderStats.fields:type_name -> proto.UploaderStats.Fields
	86,  // 50: proto.UploaderStats.tags:type_name -> proto.UploaderStats.Tags
	87,  // 51: proto.DetectNet.fields:type_name -> proto.DetectNet.Fields
	88,  // 52: proto.DetectNet.tags:type_name -> proto.DetectNet.Tags
	89,  // 53: proto.DetectNet.fields_map:type_name -> proto.DetectNet.FieldsMapEntry
	90,  // 54: proto.SegNet.fields:type_name -> proto.SegNet.Fields
	91,  // 55: proto.SegNet.tags:type_name -> proto.SegNet.Tags
	92,  // 56: proto.SegNet.fields_map:type_name -> proto.SegNet.FieldsMapEntry
	93,  // 57: proto.PPCorrection.fields:type_name -> proto.PPCorrection.Fields
	94,  // 58: proto.PPCorrection.tags:type_name -> proto.PPCorrection.Tags
	95,  // 59: proto.PPCorrection.fields_map:type_name -> proto.PPCorrection.FieldsMapEntry
	96,  // 60: proto.Able.fields:type_name -> proto.Able.Fields
	97,  // 61: proto.Able.tags:type_name -> proto.Able.Tags
	98,  // 62: proto.Able.fields_map:type_name -> proto.Able.FieldsMapEntry
	99,  // 63: proto.AbleStats.fields:type_name -> proto.AbleStats.Fields
	100, // 64: proto.AbleStats.tags:type_name -> proto.AbleStats.Tags
	101, // 65: proto.CameraControl.fields:type_name -> proto.CameraControl.Fields
	102, // 66: proto.CameraControl.tags:type_name -> proto.CameraControl.Tags
	103, // 67: proto.CameraControl.fields_map:type_name -> proto.CameraControl.FieldsMapEntry
	104, // 68: proto.EventDataCutter.tags:type_name -> proto.EventDataCutter.Tags
	105, // 69: proto.EventDataCutter.fields_map:type_name -> proto.EventDataCutter.FieldsMapEntry
	106, // 70: proto.EventDataCutterStats.tags:type_name -> proto.EventDataCutterStats.Tags
	107, // 71: proto.EventDataCutterStats.fields_map:type_name -> proto.EventDataCutterStats.FieldsMapEntry
	108, // 72: proto.Recorder.tags:type_name -> proto.Recorder.Tags
	109, // 73: proto.Recorder.fields_map:type_name -> proto.Recorder.FieldsMapEntry
	110, // 74: proto.SMARTAttribute.fields:type_name -> proto.SMARTAttribute.Fields
	111, // 75: proto.SMARTAttribute.tags:type_name -> proto.SMARTAttribute.TAGS
	7,   // 76: proto.Influx.kernel:type_name -> proto.Kernel
	8,   // 77: proto.Influx.linux_sysctl_fs:type_name -> proto.LinuxSysctlFs
	9,   // 78: proto.Influx.system:type_name -> proto.System
	10,  // 79: proto.Influx.net:type_name -> proto.Net
	11,  // 80: proto.Influx.interrupts:type_name -> proto.Interrupts
	12,  // 81: proto.Influx.mem:type_name -> proto.Mem
	13,  // 82: proto.Influx.disk:type_name -> proto.Disk
	15,  // 83: proto.Influx.processes:type_name -> proto.Processes
	6,   // 84: proto.Influx.cpu:type_name -> proto.CPU
	14,  // 85: proto.Influx.swap:type_name -> proto.Swap
	5,   // 86: proto.Influx.tegrastats:type_name -> proto.Tegrastats
	16,  // 87: proto.Influx.dockerBlkio:type_name -> proto.DockerBlkio
	20,  // 88: proto.Influx.dockerNet:type_name -> proto.DockerNet
	19,  // 89: proto.Influx.dockerCpu:type_name -> proto.DockerCpu
	18,  // 90: proto.Influx.dockerMem:type_name -> proto.DockerMem
	17,  // 91: proto.Influx.dockerStats:type_name -> proto.DockerStats
	4,   // 92: proto.Influx.smart:type_name -> proto.SMART
	2,   // 93: proto.Influx.lte:type_name -> proto.LTE
	1,   // 94: proto.Influx.glog:type_name -> proto.Glog
	0,   // 95: proto.Influx.diskio:type_name -> proto.Diskio
	21,  // 96: proto.Influx.netstat:type_name -> proto.Netstat
	22,  // 97: proto.Influx.gps:type_name -> proto.GPS
	28,  // 98: proto.Influx.able:type_name -> proto.Able
	30,  // 99: proto.Influx.cameraControl:type_name -> proto.CameraControl
	26,  // 100: proto.Influx.segNet:type_name -> proto.SegNet
	25,  // 101: proto.Influx.detectnet:type_name -> proto.DetectNet
	23,  // 102: proto.Influx.uploader:type_name -> proto.Uploader
	24,  // 103: proto.Influx.uploader_stats:type_name -> proto.UploaderStats
	3,   // 104: proto.Influx.wireless:type_name -> proto.Wireless
	27,  // 105: proto.Influx.ppCorrection:type_name -> proto.PPCorrection
	31,  // 106: proto.Influx.eventDataCutter:type_name -> proto.EventDataCutter
	32,  // 107: proto.Influx.eventDataCutterStats:type_name -> proto.EventDataCutterStats
	33,  // 108: proto.Influx.recorder:type_name -> proto.Recorder
	29,  // 109: proto.Influx.ableStats:type_name -> proto.AbleStats
	34,  // 110: proto.Influx.smartAttribute:type_name -> proto.SMARTAttribute
	111, // [111:111] is the sub-list for method output_type
	111, // [111:111] is the sub-list for method input_type
	111, // [111:111] is the sub-list for extension type_name
	111, // [111:111] is the sub-list for extension extendee
	0,   // [0:111] is the sub-list for field type_name
}

func init() { file_proto_proto_init() }
func file_proto_proto_init() {
	if File_proto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diskio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Glog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wireless); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMART); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tegrastats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kernel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxSysctlFs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interrupts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerBlkio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerMem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerCpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Netstat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uploader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploaderStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPCorrection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Able); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbleStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDataCutter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDataCutterStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMARTAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Influx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diskio_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diskio_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Glog_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Glog_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTE_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LTE_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wireless_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wireless_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMART_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMART_TAGS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tegrastats_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tegrastats_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPU_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPU_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kernel_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kernel_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxSysctlFs_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxSysctlFs_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interrupts_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interrupts_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mem_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mem_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processes_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processes_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerBlkio_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerBlkio_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerStats_FIELDS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerStats_TAGS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerMem_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerMem_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerCpu_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerCpu_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerNet_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerNet_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Netstat_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Netstat_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPS_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPS_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uploader_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uploader_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploaderStats_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploaderStats_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectNet_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectNet_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegNet_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegNet_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPCorrection_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPCorrection_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Able_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Able_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbleStats_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbleStats_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraControl_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraControl_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDataCutter_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDataCutterStats_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recorder_Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMARTAttribute_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMARTAttribute_TAGS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   112,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_proto_goTypes,
		DependencyIndexes: file_proto_proto_depIdxs,
		MessageInfos:      file_proto_proto_msgTypes,
	}.Build()
	File_proto_proto = out.File
	file_proto_proto_rawDesc = nil
	file_proto_proto_goTypes = nil
	file_proto_proto_depIdxs = nil
}
